{"version":3,"file":"msal-browser.cjs","sources":["../../msal-common/dist/utils/Constants.mjs","../../msal-common/dist/error/AuthErrorCodes.mjs","../../msal-common/dist/error/AuthError.mjs","../../msal-common/dist/error/ClientAuthErrorCodes.mjs","../../msal-common/dist/error/ClientAuthError.mjs","../../msal-common/dist/crypto/ICrypto.mjs","../../msal-common/dist/logger/Logger.mjs","../../msal-common/dist/packageMetadata.mjs","../../msal-common/dist/authority/AuthorityOptions.mjs","../../msal-common/dist/account/AuthToken.mjs","../../msal-common/dist/utils/TimeUtils.mjs","../../msal-common/dist/cache/utils/CacheHelpers.mjs","../../msal-common/dist/error/ClientConfigurationErrorCodes.mjs","../../msal-common/dist/error/ClientConfigurationError.mjs","../../msal-common/dist/utils/StringUtils.mjs","../../msal-common/dist/request/ScopeSet.mjs","../../msal-common/dist/account/ClientInfo.mjs","../../msal-common/dist/authority/AuthorityType.mjs","../../msal-common/dist/authority/ProtocolMode.mjs","../../msal-common/dist/cache/entities/AccountEntity.mjs","../../msal-common/dist/utils/UrlUtils.mjs","../../msal-common/dist/url/UrlString.mjs","../../msal-common/dist/authority/AuthorityMetadata.mjs","../../msal-common/dist/cache/CacheManager.mjs","../../msal-common/dist/config/ClientConfiguration.mjs","../../msal-common/dist/error/ServerError.mjs","../../msal-common/dist/network/ThrottlingUtils.mjs","../../msal-common/dist/network/NetworkManager.mjs","../../msal-common/dist/account/CcsCredential.mjs","../../msal-common/dist/request/RequestValidator.mjs","../../msal-common/dist/request/RequestParameterBuilder.mjs","../../msal-common/dist/authority/OpenIdConfigResponse.mjs","../../msal-common/dist/cache/entities/AuthorityMetadataEntity.mjs","../../msal-common/dist/authority/CloudInstanceDiscoveryResponse.mjs","../../msal-common/dist/authority/CloudInstanceDiscoveryErrorResponse.mjs","../../msal-common/dist/telemetry/performance/PerformanceEvent.mjs","../../msal-common/dist/utils/FunctionWrappers.mjs","../../msal-common/dist/authority/RegionDiscovery.mjs","../../msal-common/dist/authority/Authority.mjs","../../msal-common/dist/authority/AuthorityFactory.mjs","../../msal-common/dist/client/BaseClient.mjs","../../msal-common/dist/error/InteractionRequiredAuthErrorCodes.mjs","../../msal-common/dist/error/InteractionRequiredAuthError.mjs","../../msal-common/dist/cache/entities/CacheRecord.mjs","../../msal-common/dist/utils/ProtocolUtils.mjs","../../msal-common/dist/crypto/PopTokenGenerator.mjs","../../msal-common/dist/cache/entities/AppMetadataEntity.mjs","../../msal-common/dist/cache/persistence/TokenCacheContext.mjs","../../msal-common/dist/response/ResponseHandler.mjs","../../msal-common/dist/client/AuthorizationCodeClient.mjs","../../msal-common/dist/client/RefreshTokenClient.mjs","../../msal-common/dist/client/SilentFlowClient.mjs","../../msal-common/dist/cache/entities/ThrottlingEntity.mjs","../../msal-common/dist/network/INetworkModule.mjs","../../msal-common/dist/error/JoseHeaderErrorCodes.mjs","../../msal-common/dist/error/JoseHeaderError.mjs","../../msal-common/dist/crypto/JoseHeader.mjs","../../msal-common/dist/request/AuthenticationHeaderParser.mjs","../../msal-common/dist/telemetry/server/ServerTelemetryManager.mjs","../../msal-common/dist/telemetry/performance/PerformanceClient.mjs","../../msal-common/dist/telemetry/performance/StubPerformanceClient.mjs","../src/error/BrowserAuthErrorCodes.ts","../src/error/BrowserAuthError.ts","../src/utils/BrowserConstants.ts","../src/utils/BrowserUtils.ts","../src/navigation/NavigationClient.ts","../src/network/FetchClient.ts","../src/config/Configuration.ts","../src/packageMetadata.ts","../src/operatingcontext/BaseOperatingContext.ts","../src/naa/BridgeProxy.ts","../src/operatingcontext/TeamsAppOperatingContext.ts","../src/operatingcontext/StandardOperatingContext.ts","../src/controllers/ControllerFactory.ts","../src/encode/Base64Encode.ts","../src/encode/Base64Decode.ts","../src/crypto/BrowserCrypto.ts","../src/cache/DatabaseStorage.ts","../src/cache/MemoryStorage.ts","../src/cache/AsyncMemoryStorage.ts","../src/cache/CryptoKeyStore.ts","../src/crypto/CryptoOps.ts","../src/error/BrowserConfigurationAuthErrorCodes.ts","../src/error/BrowserConfigurationAuthError.ts","../src/cache/BrowserStorage.ts","../src/utils/BrowserProtocolUtils.ts","../src/cache/BrowserCacheManager.ts","../src/event/EventType.ts","../src/event/EventHandler.ts","../src/interaction_client/BaseInteractionClient.ts","../src/crypto/PkceGenerator.ts","../src/interaction_client/StandardInteractionClient.ts","../src/error/NativeAuthErrorCodes.ts","../src/broker/nativeBroker/NativeStatusCodes.ts","../src/error/NativeAuthError.ts","../src/interaction_client/SilentCacheClient.ts","../src/interaction_client/NativeInteractionClient.ts","../src/broker/nativeBroker/NativeMessageHandler.ts","../src/interaction_handler/InteractionHandler.ts","../src/response/ResponseHandler.ts","../src/interaction_client/PopupClient.ts","../src/interaction_handler/RedirectHandler.ts","../src/interaction_client/RedirectClient.ts","../src/interaction_handler/SilentHandler.ts","../src/interaction_client/SilentIframeClient.ts","../src/interaction_client/SilentRefreshClient.ts","../src/cache/TokenCache.ts","../src/interaction_client/HybridSpaAuthorizationCodeClient.ts","../src/interaction_client/SilentAuthCodeClient.ts","../src/controllers/StandardController.ts","../src/app/PublicClientApplication.ts","../src/controllers/UnknownOperatingContextController.ts","../src/operatingcontext/UnknownOperatingContext.ts","../src/app/PublicClientNext.ts","../src/app/IPublicClientApplication.ts","../src/event/EventMessage.ts","../src/crypto/SignedHttpRequest.ts","../src/telemetry/BrowserPerformanceMeasurement.ts","../src/telemetry/BrowserPerformanceClient.ts","../src/naa/BridgeError.ts","../src/naa/BridgeStatusCode.ts","../src/naa/mapping/NestedAppAuthAdapter.ts","../src/error/NestedAppAuthError.ts","../src/controllers/NestedAppAuthController.ts"],"sourcesContent":["/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nconst Constants = {\n    LIBRARY_NAME: \"MSAL.JS\",\n    SKU: \"msal.js.common\",\n    // Prefix for all library cache entries\n    CACHE_PREFIX: \"msal\",\n    // default authority\n    DEFAULT_AUTHORITY: \"https://login.microsoftonline.com/common/\",\n    DEFAULT_AUTHORITY_HOST: \"login.microsoftonline.com\",\n    DEFAULT_COMMON_TENANT: \"common\",\n    // ADFS String\n    ADFS: \"adfs\",\n    DSTS: \"dstsv2\",\n    // Default AAD Instance Discovery Endpoint\n    AAD_INSTANCE_DISCOVERY_ENDPT: \"https://login.microsoftonline.com/common/discovery/instance?api-version=1.1&authorization_endpoint=\",\n    // CIAM URL\n    CIAM_AUTH_URL: \".ciamlogin.com\",\n    AAD_TENANT_DOMAIN_SUFFIX: \".onmicrosoft.com\",\n    // Resource delimiter - used for certain cache entries\n    RESOURCE_DELIM: \"|\",\n    // Placeholder for non-existent account ids/objects\n    NO_ACCOUNT: \"NO_ACCOUNT\",\n    // Claims\n    CLAIMS: \"claims\",\n    // Consumer UTID\n    CONSUMER_UTID: \"9188040d-6c67-4c5b-b112-36a304b66dad\",\n    // Default scopes\n    OPENID_SCOPE: \"openid\",\n    PROFILE_SCOPE: \"profile\",\n    OFFLINE_ACCESS_SCOPE: \"offline_access\",\n    EMAIL_SCOPE: \"email\",\n    // Default response type for authorization code flow\n    CODE_RESPONSE_TYPE: \"code\",\n    CODE_GRANT_TYPE: \"authorization_code\",\n    RT_GRANT_TYPE: \"refresh_token\",\n    FRAGMENT_RESPONSE_MODE: \"fragment\",\n    S256_CODE_CHALLENGE_METHOD: \"S256\",\n    URL_FORM_CONTENT_TYPE: \"application/x-www-form-urlencoded;charset=utf-8\",\n    AUTHORIZATION_PENDING: \"authorization_pending\",\n    NOT_DEFINED: \"not_defined\",\n    EMPTY_STRING: \"\",\n    NOT_APPLICABLE: \"N/A\",\n    FORWARD_SLASH: \"/\",\n    IMDS_ENDPOINT: \"http://169.254.169.254/metadata/instance/compute/location\",\n    IMDS_VERSION: \"2020-06-01\",\n    IMDS_TIMEOUT: 2000,\n    AZURE_REGION_AUTO_DISCOVER_FLAG: \"TryAutoDetect\",\n    REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX: \"login.microsoft.com\",\n    KNOWN_PUBLIC_CLOUDS: [\n        \"login.microsoftonline.com\",\n        \"login.windows.net\",\n        \"login.microsoft.com\",\n        \"sts.windows.net\",\n    ],\n    TOKEN_RESPONSE_TYPE: \"token\",\n    ID_TOKEN_RESPONSE_TYPE: \"id_token\",\n    SHR_NONCE_VALIDITY: 240,\n    INVALID_INSTANCE: \"invalid_instance\",\n};\nconst HttpStatus = {\n    SUCCESS_RANGE_START: 200,\n    SUCCESS_RANGE_END: 299,\n    REDIRECT: 302,\n    CLIENT_ERROR_RANGE_START: 400,\n    CLIENT_ERROR_RANGE_END: 499,\n    SERVER_ERROR_RANGE_START: 500,\n    SERVER_ERROR_RANGE_END: 599,\n};\nconst OIDC_DEFAULT_SCOPES = [\n    Constants.OPENID_SCOPE,\n    Constants.PROFILE_SCOPE,\n    Constants.OFFLINE_ACCESS_SCOPE,\n];\nconst OIDC_SCOPES = [...OIDC_DEFAULT_SCOPES, Constants.EMAIL_SCOPE];\n/**\n * Request header names\n */\nconst HeaderNames = {\n    CONTENT_TYPE: \"Content-Type\",\n    RETRY_AFTER: \"Retry-After\",\n    CCS_HEADER: \"X-AnchorMailbox\",\n    WWWAuthenticate: \"WWW-Authenticate\",\n    AuthenticationInfo: \"Authentication-Info\",\n    X_MS_REQUEST_ID: \"x-ms-request-id\",\n    X_MS_HTTP_VERSION: \"x-ms-httpver\",\n};\n/**\n * Persistent cache keys MSAL which stay while user is logged in.\n */\nconst PersistentCacheKeys = {\n    ID_TOKEN: \"idtoken\",\n    CLIENT_INFO: \"client.info\",\n    ADAL_ID_TOKEN: \"adal.idtoken\",\n    ERROR: \"error\",\n    ERROR_DESC: \"error.description\",\n    ACTIVE_ACCOUNT: \"active-account\",\n    ACTIVE_ACCOUNT_FILTERS: \"active-account-filters\", // new cache entry for active_account for a more robust version for browser\n};\n/**\n * String constants related to AAD Authority\n */\nconst AADAuthorityConstants = {\n    COMMON: \"common\",\n    ORGANIZATIONS: \"organizations\",\n    CONSUMERS: \"consumers\",\n};\n/**\n * Keys in the hashParams sent by AAD Server\n */\nconst AADServerParamKeys = {\n    CLIENT_ID: \"client_id\",\n    REDIRECT_URI: \"redirect_uri\",\n    RESPONSE_TYPE: \"response_type\",\n    RESPONSE_MODE: \"response_mode\",\n    GRANT_TYPE: \"grant_type\",\n    CLAIMS: \"claims\",\n    SCOPE: \"scope\",\n    ERROR: \"error\",\n    ERROR_DESCRIPTION: \"error_description\",\n    ACCESS_TOKEN: \"access_token\",\n    ID_TOKEN: \"id_token\",\n    REFRESH_TOKEN: \"refresh_token\",\n    EXPIRES_IN: \"expires_in\",\n    STATE: \"state\",\n    NONCE: \"nonce\",\n    PROMPT: \"prompt\",\n    SESSION_STATE: \"session_state\",\n    CLIENT_INFO: \"client_info\",\n    CODE: \"code\",\n    CODE_CHALLENGE: \"code_challenge\",\n    CODE_CHALLENGE_METHOD: \"code_challenge_method\",\n    CODE_VERIFIER: \"code_verifier\",\n    CLIENT_REQUEST_ID: \"client-request-id\",\n    X_CLIENT_SKU: \"x-client-SKU\",\n    X_CLIENT_VER: \"x-client-VER\",\n    X_CLIENT_OS: \"x-client-OS\",\n    X_CLIENT_CPU: \"x-client-CPU\",\n    X_CLIENT_CURR_TELEM: \"x-client-current-telemetry\",\n    X_CLIENT_LAST_TELEM: \"x-client-last-telemetry\",\n    X_MS_LIB_CAPABILITY: \"x-ms-lib-capability\",\n    X_APP_NAME: \"x-app-name\",\n    X_APP_VER: \"x-app-ver\",\n    POST_LOGOUT_URI: \"post_logout_redirect_uri\",\n    ID_TOKEN_HINT: \"id_token_hint\",\n    DEVICE_CODE: \"device_code\",\n    CLIENT_SECRET: \"client_secret\",\n    CLIENT_ASSERTION: \"client_assertion\",\n    CLIENT_ASSERTION_TYPE: \"client_assertion_type\",\n    TOKEN_TYPE: \"token_type\",\n    REQ_CNF: \"req_cnf\",\n    OBO_ASSERTION: \"assertion\",\n    REQUESTED_TOKEN_USE: \"requested_token_use\",\n    ON_BEHALF_OF: \"on_behalf_of\",\n    FOCI: \"foci\",\n    CCS_HEADER: \"X-AnchorMailbox\",\n    RETURN_SPA_CODE: \"return_spa_code\",\n    NATIVE_BROKER: \"nativebroker\",\n    LOGOUT_HINT: \"logout_hint\",\n};\n/**\n * Claims request keys\n */\nconst ClaimsRequestKeys = {\n    ACCESS_TOKEN: \"access_token\",\n    XMS_CC: \"xms_cc\",\n};\n/**\n * we considered making this \"enum\" in the request instead of string, however it looks like the allowed list of\n * prompt values kept changing over past couple of years. There are some undocumented prompt values for some\n * internal partners too, hence the choice of generic \"string\" type instead of the \"enum\"\n */\nconst PromptValue = {\n    LOGIN: \"login\",\n    SELECT_ACCOUNT: \"select_account\",\n    CONSENT: \"consent\",\n    NONE: \"none\",\n    CREATE: \"create\",\n    NO_SESSION: \"no_session\",\n};\n/**\n * SSO Types - generated to populate hints\n */\nconst SSOTypes = {\n    ACCOUNT: \"account\",\n    SID: \"sid\",\n    LOGIN_HINT: \"login_hint\",\n    ID_TOKEN: \"id_token\",\n    DOMAIN_HINT: \"domain_hint\",\n    ORGANIZATIONS: \"organizations\",\n    CONSUMERS: \"consumers\",\n    ACCOUNT_ID: \"accountIdentifier\",\n    HOMEACCOUNT_ID: \"homeAccountIdentifier\",\n};\n/**\n * allowed values for codeVerifier\n */\nconst CodeChallengeMethodValues = {\n    PLAIN: \"plain\",\n    S256: \"S256\",\n};\n/**\n * allowed values for server response type\n */\nconst ServerResponseType = {\n    QUERY: \"query\",\n    FRAGMENT: \"fragment\",\n};\n/**\n * allowed values for response_mode\n */\nconst ResponseMode = {\n    ...ServerResponseType,\n    FORM_POST: \"form_post\",\n};\n/**\n * allowed grant_type\n */\nconst GrantType = {\n    IMPLICIT_GRANT: \"implicit\",\n    AUTHORIZATION_CODE_GRANT: \"authorization_code\",\n    CLIENT_CREDENTIALS_GRANT: \"client_credentials\",\n    RESOURCE_OWNER_PASSWORD_GRANT: \"password\",\n    REFRESH_TOKEN_GRANT: \"refresh_token\",\n    DEVICE_CODE_GRANT: \"device_code\",\n    JWT_BEARER: \"urn:ietf:params:oauth:grant-type:jwt-bearer\",\n};\n/**\n * Account types in Cache\n */\nconst CacheAccountType = {\n    MSSTS_ACCOUNT_TYPE: \"MSSTS\",\n    ADFS_ACCOUNT_TYPE: \"ADFS\",\n    MSAV1_ACCOUNT_TYPE: \"MSA\",\n    GENERIC_ACCOUNT_TYPE: \"Generic\", // NTLM, Kerberos, FBA, Basic etc\n};\n/**\n * Separators used in cache\n */\nconst Separators = {\n    CACHE_KEY_SEPARATOR: \"-\",\n    CLIENT_INFO_SEPARATOR: \".\",\n};\n/**\n * Credential Type stored in the cache\n */\nconst CredentialType = {\n    ID_TOKEN: \"IdToken\",\n    ACCESS_TOKEN: \"AccessToken\",\n    ACCESS_TOKEN_WITH_AUTH_SCHEME: \"AccessToken_With_AuthScheme\",\n    REFRESH_TOKEN: \"RefreshToken\",\n};\n/**\n * Combine all cache types\n */\nconst CacheType = {\n    ADFS: 1001,\n    MSA: 1002,\n    MSSTS: 1003,\n    GENERIC: 1004,\n    ACCESS_TOKEN: 2001,\n    REFRESH_TOKEN: 2002,\n    ID_TOKEN: 2003,\n    APP_METADATA: 3001,\n    UNDEFINED: 9999,\n};\n/**\n * More Cache related constants\n */\nconst APP_METADATA = \"appmetadata\";\nconst CLIENT_INFO = \"client_info\";\nconst THE_FAMILY_ID = \"1\";\nconst AUTHORITY_METADATA_CONSTANTS = {\n    CACHE_KEY: \"authority-metadata\",\n    REFRESH_TIME_SECONDS: 3600 * 24, // 24 Hours\n};\nconst AuthorityMetadataSource = {\n    CONFIG: \"config\",\n    CACHE: \"cache\",\n    NETWORK: \"network\",\n    HARDCODED_VALUES: \"hardcoded_values\",\n};\nconst SERVER_TELEM_CONSTANTS = {\n    SCHEMA_VERSION: 5,\n    MAX_CUR_HEADER_BYTES: 80,\n    MAX_LAST_HEADER_BYTES: 330,\n    MAX_CACHED_ERRORS: 50,\n    CACHE_KEY: \"server-telemetry\",\n    CATEGORY_SEPARATOR: \"|\",\n    VALUE_SEPARATOR: \",\",\n    OVERFLOW_TRUE: \"1\",\n    OVERFLOW_FALSE: \"0\",\n    UNKNOWN_ERROR: \"unknown_error\",\n};\n/**\n * Type of the authentication request\n */\nconst AuthenticationScheme = {\n    BEARER: \"Bearer\",\n    POP: \"pop\",\n    SSH: \"ssh-cert\",\n};\n/**\n * Constants related to throttling\n */\nconst ThrottlingConstants = {\n    // Default time to throttle RequestThumbprint in seconds\n    DEFAULT_THROTTLE_TIME_SECONDS: 60,\n    // Default maximum time to throttle in seconds, overrides what the server sends back\n    DEFAULT_MAX_THROTTLE_TIME_SECONDS: 3600,\n    // Prefix for storing throttling entries\n    THROTTLING_PREFIX: \"throttling\",\n    // Value assigned to the x-ms-lib-capability header to indicate to the server the library supports throttling\n    X_MS_LIB_CAPABILITY_VALUE: \"retry-after, h429\",\n};\nconst Errors = {\n    INVALID_GRANT_ERROR: \"invalid_grant\",\n    CLIENT_MISMATCH_ERROR: \"client_mismatch\",\n};\n/**\n * Password grant parameters\n */\nconst PasswordGrantConstants = {\n    username: \"username\",\n    password: \"password\",\n};\n/**\n * Response codes\n */\nconst ResponseCodes = {\n    httpSuccess: 200,\n    httpBadRequest: 400,\n};\n/**\n * Region Discovery Sources\n */\nconst RegionDiscoverySources = {\n    FAILED_AUTO_DETECTION: \"1\",\n    INTERNAL_CACHE: \"2\",\n    ENVIRONMENT_VARIABLE: \"3\",\n    IMDS: \"4\",\n};\n/**\n * Region Discovery Outcomes\n */\nconst RegionDiscoveryOutcomes = {\n    CONFIGURED_MATCHES_DETECTED: \"1\",\n    CONFIGURED_NO_AUTO_DETECTION: \"2\",\n    CONFIGURED_NOT_DETECTED: \"3\",\n    AUTO_DETECTION_REQUESTED_SUCCESSFUL: \"4\",\n    AUTO_DETECTION_REQUESTED_FAILED: \"5\",\n};\n/**\n * Specifies the reason for fetching the access token from the identity provider\n */\nconst CacheOutcome = {\n    // When a token is found in the cache or the cache is not supposed to be hit when making the request\n    NOT_APPLICABLE: \"0\",\n    // When the token request goes to the identity provider because force_refresh was set to true. Also occurs if claims were requested\n    FORCE_REFRESH_OR_CLAIMS: \"1\",\n    // When the token request goes to the identity provider because no cached access token exists\n    NO_CACHED_ACCESS_TOKEN: \"2\",\n    // When the token request goes to the identity provider because cached access token expired\n    CACHED_ACCESS_TOKEN_EXPIRED: \"3\",\n    // When the token request goes to the identity provider because refresh_in was used and the existing token needs to be refreshed\n    PROACTIVELY_REFRESHED: \"4\",\n};\nconst JsonWebTokenTypes = {\n    Jwt: \"JWT\",\n    Jwk: \"JWK\",\n    Pop: \"pop\",\n};\nconst ONE_DAY_IN_MS = 86400000;\n\nexport { AADAuthorityConstants, AADServerParamKeys, APP_METADATA, AUTHORITY_METADATA_CONSTANTS, AuthenticationScheme, AuthorityMetadataSource, CLIENT_INFO, CacheAccountType, CacheOutcome, CacheType, ClaimsRequestKeys, CodeChallengeMethodValues, Constants, CredentialType, Errors, GrantType, HeaderNames, HttpStatus, JsonWebTokenTypes, OIDC_DEFAULT_SCOPES, OIDC_SCOPES, ONE_DAY_IN_MS, PasswordGrantConstants, PersistentCacheKeys, PromptValue, RegionDiscoveryOutcomes, RegionDiscoverySources, ResponseCodes, ResponseMode, SERVER_TELEM_CONSTANTS, SSOTypes, Separators, ServerResponseType, THE_FAMILY_ID, ThrottlingConstants };\n//# sourceMappingURL=Constants.mjs.map\n","/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * AuthErrorMessage class containing string constants used by error codes and messages.\n */\nconst unexpectedError = \"unexpected_error\";\nconst postRequestFailed = \"post_request_failed\";\n\nexport { postRequestFailed, unexpectedError };\n//# sourceMappingURL=AuthErrorCodes.mjs.map\n","/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\nimport { Constants } from '../utils/Constants.mjs';\nimport { unexpectedError, postRequestFailed } from './AuthErrorCodes.mjs';\nimport * as AuthErrorCodes from './AuthErrorCodes.mjs';\nexport { AuthErrorCodes };\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nconst AuthErrorMessages = {\n    [unexpectedError]: \"Unexpected error in authentication.\",\n    [postRequestFailed]: \"Post request failed from the network, could be a 4xx/5xx or a network unavailability. Please check the exact error code for details.\",\n};\n/**\n * AuthErrorMessage class containing string constants used by error codes and messages.\n * @deprecated Use AuthErrorCodes instead\n */\nconst AuthErrorMessage = {\n    unexpectedError: {\n        code: unexpectedError,\n        desc: AuthErrorMessages[unexpectedError],\n    },\n    postRequestFailed: {\n        code: postRequestFailed,\n        desc: AuthErrorMessages[postRequestFailed],\n    },\n};\n/**\n * General error class thrown by the MSAL.js library.\n */\nclass AuthError extends Error {\n    constructor(errorCode, errorMessage, suberror) {\n        const errorString = errorMessage\n            ? `${errorCode}: ${errorMessage}`\n            : errorCode;\n        super(errorString);\n        Object.setPrototypeOf(this, AuthError.prototype);\n        this.errorCode = errorCode || Constants.EMPTY_STRING;\n        this.errorMessage = errorMessage || Constants.EMPTY_STRING;\n        this.subError = suberror || Constants.EMPTY_STRING;\n        this.name = \"AuthError\";\n    }\n    setCorrelationId(correlationId) {\n        this.correlationId = correlationId;\n    }\n}\nfunction createAuthError(code, additionalMessage) {\n    return new AuthError(code, additionalMessage\n        ? `${AuthErrorMessages[code]} ${additionalMessage}`\n        : AuthErrorMessages[code]);\n}\n\nexport { AuthError, AuthErrorMessage, AuthErrorMessages, createAuthError };\n//# sourceMappingURL=AuthError.mjs.map\n","/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nconst clientInfoDecodingError = \"client_info_decoding_error\";\nconst clientInfoEmptyError = \"client_info_empty_error\";\nconst tokenParsingError = \"token_parsing_error\";\nconst nullOrEmptyToken = \"null_or_empty_token\";\nconst endpointResolutionError = \"endpoints_resolution_error\";\nconst networkError = \"network_error\";\nconst openIdConfigError = \"openid_config_error\";\nconst hashNotDeserialized = \"hash_not_deserialized\";\nconst invalidState = \"invalid_state\";\nconst stateMismatch = \"state_mismatch\";\nconst stateNotFound = \"state_not_found\";\nconst nonceMismatch = \"nonce_mismatch\";\nconst authTimeNotFound = \"auth_time_not_found\";\nconst maxAgeTranspired = \"max_age_transpired\";\nconst multipleMatchingTokens = \"multiple_matching_tokens\";\nconst multipleMatchingAccounts = \"multiple_matching_accounts\";\nconst multipleMatchingAppMetadata = \"multiple_matching_appMetadata\";\nconst requestCannotBeMade = \"request_cannot_be_made\";\nconst cannotRemoveEmptyScope = \"cannot_remove_empty_scope\";\nconst cannotAppendScopeSet = \"cannot_append_scopeset\";\nconst emptyInputScopeSet = \"empty_input_scopeset\";\nconst deviceCodePollingCancelled = \"device_code_polling_cancelled\";\nconst deviceCodeExpired = \"device_code_expired\";\nconst deviceCodeUnknownError = \"device_code_unknown_error\";\nconst noAccountInSilentRequest = \"no_account_in_silent_request\";\nconst invalidCacheRecord = \"invalid_cache_record\";\nconst invalidCacheEnvironment = \"invalid_cache_environment\";\nconst noAccountFound = \"no_account_found\";\nconst noCryptoObject = \"no_crypto_object\";\nconst unexpectedCredentialType = \"unexpected_credential_type\";\nconst invalidAssertion = \"invalid_assertion\";\nconst invalidClientCredential = \"invalid_client_credential\";\nconst tokenRefreshRequired = \"token_refresh_required\";\nconst userTimeoutReached = \"user_timeout_reached\";\nconst tokenClaimsCnfRequiredForSignedJwt = \"token_claims_cnf_required_for_signedjwt\";\nconst authorizationCodeMissingFromServerResponse = \"authorization_code_missing_from_server_response\";\nconst bindingKeyNotRemoved = \"binding_key_not_removed\";\nconst endSessionEndpointNotSupported = \"end_session_endpoint_not_supported\";\nconst keyIdMissing = \"key_id_missing\";\nconst noNetworkConnectivity = \"no_network_connectivity\";\nconst userCanceled = \"user_canceled\";\nconst missingTenantIdError = \"missing_tenant_id_error\";\nconst methodNotImplemented = \"method_not_implemented\";\nconst nestedAppAuthBridgeDisabled = \"nested_app_auth_bridge_disabled\";\n\nexport { authTimeNotFound, authorizationCodeMissingFromServerResponse, bindingKeyNotRemoved, cannotAppendScopeSet, cannotRemoveEmptyScope, clientInfoDecodingError, clientInfoEmptyError, deviceCodeExpired, deviceCodePollingCancelled, deviceCodeUnknownError, emptyInputScopeSet, endSessionEndpointNotSupported, endpointResolutionError, hashNotDeserialized, invalidAssertion, invalidCacheEnvironment, invalidCacheRecord, invalidClientCredential, invalidState, keyIdMissing, maxAgeTranspired, methodNotImplemented, missingTenantIdError, multipleMatchingAccounts, multipleMatchingAppMetadata, multipleMatchingTokens, nestedAppAuthBridgeDisabled, networkError, noAccountFound, noAccountInSilentRequest, noCryptoObject, noNetworkConnectivity, nonceMismatch, nullOrEmptyToken, openIdConfigError, requestCannotBeMade, stateMismatch, stateNotFound, tokenClaimsCnfRequiredForSignedJwt, tokenParsingError, tokenRefreshRequired, unexpectedCredentialType, userCanceled, userTimeoutReached };\n//# sourceMappingURL=ClientAuthErrorCodes.mjs.map\n","/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\nimport { AuthError } from './AuthError.mjs';\nimport { clientInfoDecodingError, clientInfoEmptyError, tokenParsingError, nullOrEmptyToken, endpointResolutionError, networkError, openIdConfigError, hashNotDeserialized, invalidState, stateMismatch, stateNotFound, nonceMismatch, authTimeNotFound, maxAgeTranspired, multipleMatchingTokens, multipleMatchingAccounts, multipleMatchingAppMetadata, requestCannotBeMade, cannotRemoveEmptyScope, cannotAppendScopeSet, emptyInputScopeSet, deviceCodePollingCancelled, deviceCodeExpired, deviceCodeUnknownError, noAccountInSilentRequest, invalidCacheRecord, invalidCacheEnvironment, noAccountFound, noCryptoObject, unexpectedCredentialType, invalidAssertion, invalidClientCredential, tokenRefreshRequired, userTimeoutReached, tokenClaimsCnfRequiredForSignedJwt, authorizationCodeMissingFromServerResponse, bindingKeyNotRemoved, endSessionEndpointNotSupported, keyIdMissing, noNetworkConnectivity, userCanceled, missingTenantIdError, nestedAppAuthBridgeDisabled, methodNotImplemented } from './ClientAuthErrorCodes.mjs';\nimport * as ClientAuthErrorCodes from './ClientAuthErrorCodes.mjs';\nexport { ClientAuthErrorCodes };\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * ClientAuthErrorMessage class containing string constants used by error codes and messages.\n */\nconst ClientAuthErrorMessages = {\n    [clientInfoDecodingError]: \"The client info could not be parsed/decoded correctly\",\n    [clientInfoEmptyError]: \"The client info was empty\",\n    [tokenParsingError]: \"Token cannot be parsed\",\n    [nullOrEmptyToken]: \"The token is null or empty\",\n    [endpointResolutionError]: \"Endpoints cannot be resolved\",\n    [networkError]: \"Network request failed\",\n    [openIdConfigError]: \"Could not retrieve endpoints. Check your authority and verify the .well-known/openid-configuration endpoint returns the required endpoints.\",\n    [hashNotDeserialized]: \"The hash parameters could not be deserialized\",\n    [invalidState]: \"State was not the expected format\",\n    [stateMismatch]: \"State mismatch error\",\n    [stateNotFound]: \"State not found\",\n    [nonceMismatch]: \"Nonce mismatch error\",\n    [authTimeNotFound]: \"Max Age was requested and the ID token is missing the auth_time variable.\" +\n        \" auth_time is an optional claim and is not enabled by default - it must be enabled.\" +\n        \" See https://aka.ms/msaljs/optional-claims for more information.\",\n    [maxAgeTranspired]: \"Max Age is set to 0, or too much time has elapsed since the last end-user authentication.\",\n    [multipleMatchingTokens]: \"The cache contains multiple tokens satisfying the requirements. \" +\n        \"Call AcquireToken again providing more requirements such as authority or account.\",\n    [multipleMatchingAccounts]: \"The cache contains multiple accounts satisfying the given parameters. Please pass more info to obtain the correct account\",\n    [multipleMatchingAppMetadata]: \"The cache contains multiple appMetadata satisfying the given parameters. Please pass more info to obtain the correct appMetadata\",\n    [requestCannotBeMade]: \"Token request cannot be made without authorization code or refresh token.\",\n    [cannotRemoveEmptyScope]: \"Cannot remove null or empty scope from ScopeSet\",\n    [cannotAppendScopeSet]: \"Cannot append ScopeSet\",\n    [emptyInputScopeSet]: \"Empty input ScopeSet cannot be processed\",\n    [deviceCodePollingCancelled]: \"Caller has cancelled token endpoint polling during device code flow by setting DeviceCodeRequest.cancel = true.\",\n    [deviceCodeExpired]: \"Device code is expired.\",\n    [deviceCodeUnknownError]: \"Device code stopped polling for unknown reasons.\",\n    [noAccountInSilentRequest]: \"Please pass an account object, silent flow is not supported without account information\",\n    [invalidCacheRecord]: \"Cache record object was null or undefined.\",\n    [invalidCacheEnvironment]: \"Invalid environment when attempting to create cache entry\",\n    [noAccountFound]: \"No account found in cache for given key.\",\n    [noCryptoObject]: \"No crypto object detected.\",\n    [unexpectedCredentialType]: \"Unexpected credential type.\",\n    [invalidAssertion]: \"Client assertion must meet requirements described in https://tools.ietf.org/html/rfc7515\",\n    [invalidClientCredential]: \"Client credential (secret, certificate, or assertion) must not be empty when creating a confidential client. An application should at most have one credential\",\n    [tokenRefreshRequired]: \"Cannot return token from cache because it must be refreshed. This may be due to one of the following reasons: forceRefresh parameter is set to true, claims have been requested, there is no cached access token or it is expired.\",\n    [userTimeoutReached]: \"User defined timeout for device code polling reached\",\n    [tokenClaimsCnfRequiredForSignedJwt]: \"Cannot generate a POP jwt if the token_claims are not populated\",\n    [authorizationCodeMissingFromServerResponse]: \"Server response does not contain an authorization code to proceed\",\n    [bindingKeyNotRemoved]: \"Could not remove the credential's binding key from storage.\",\n    [endSessionEndpointNotSupported]: \"The provided authority does not support logout\",\n    [keyIdMissing]: \"A keyId value is missing from the requested bound token's cache record and is required to match the token to it's stored binding key.\",\n    [noNetworkConnectivity]: \"No network connectivity. Check your internet connection.\",\n    [userCanceled]: \"User cancelled the flow.\",\n    [missingTenantIdError]: \"A tenant id - not common, organizations, or consumers - must be specified when using the client_credentials flow.\",\n    [methodNotImplemented]: \"This method has not been implemented\",\n    [nestedAppAuthBridgeDisabled]: \"The nested app auth bridge is disabled\",\n};\n/**\n * String constants used by error codes and messages.\n * @deprecated Use ClientAuthErrorCodes instead\n */\nconst ClientAuthErrorMessage = {\n    clientInfoDecodingError: {\n        code: clientInfoDecodingError,\n        desc: ClientAuthErrorMessages[clientInfoDecodingError],\n    },\n    clientInfoEmptyError: {\n        code: clientInfoEmptyError,\n        desc: ClientAuthErrorMessages[clientInfoEmptyError],\n    },\n    tokenParsingError: {\n        code: tokenParsingError,\n        desc: ClientAuthErrorMessages[tokenParsingError],\n    },\n    nullOrEmptyToken: {\n        code: nullOrEmptyToken,\n        desc: ClientAuthErrorMessages[nullOrEmptyToken],\n    },\n    endpointResolutionError: {\n        code: endpointResolutionError,\n        desc: ClientAuthErrorMessages[endpointResolutionError],\n    },\n    networkError: {\n        code: networkError,\n        desc: ClientAuthErrorMessages[networkError],\n    },\n    unableToGetOpenidConfigError: {\n        code: openIdConfigError,\n        desc: ClientAuthErrorMessages[openIdConfigError],\n    },\n    hashNotDeserialized: {\n        code: hashNotDeserialized,\n        desc: ClientAuthErrorMessages[hashNotDeserialized],\n    },\n    invalidStateError: {\n        code: invalidState,\n        desc: ClientAuthErrorMessages[invalidState],\n    },\n    stateMismatchError: {\n        code: stateMismatch,\n        desc: ClientAuthErrorMessages[stateMismatch],\n    },\n    stateNotFoundError: {\n        code: stateNotFound,\n        desc: ClientAuthErrorMessages[stateNotFound],\n    },\n    nonceMismatchError: {\n        code: nonceMismatch,\n        desc: ClientAuthErrorMessages[nonceMismatch],\n    },\n    authTimeNotFoundError: {\n        code: authTimeNotFound,\n        desc: ClientAuthErrorMessages[authTimeNotFound],\n    },\n    maxAgeTranspired: {\n        code: maxAgeTranspired,\n        desc: ClientAuthErrorMessages[maxAgeTranspired],\n    },\n    multipleMatchingTokens: {\n        code: multipleMatchingTokens,\n        desc: ClientAuthErrorMessages[multipleMatchingTokens],\n    },\n    multipleMatchingAccounts: {\n        code: multipleMatchingAccounts,\n        desc: ClientAuthErrorMessages[multipleMatchingAccounts],\n    },\n    multipleMatchingAppMetadata: {\n        code: multipleMatchingAppMetadata,\n        desc: ClientAuthErrorMessages[multipleMatchingAppMetadata],\n    },\n    tokenRequestCannotBeMade: {\n        code: requestCannotBeMade,\n        desc: ClientAuthErrorMessages[requestCannotBeMade],\n    },\n    removeEmptyScopeError: {\n        code: cannotRemoveEmptyScope,\n        desc: ClientAuthErrorMessages[cannotRemoveEmptyScope],\n    },\n    appendScopeSetError: {\n        code: cannotAppendScopeSet,\n        desc: ClientAuthErrorMessages[cannotAppendScopeSet],\n    },\n    emptyInputScopeSetError: {\n        code: emptyInputScopeSet,\n        desc: ClientAuthErrorMessages[emptyInputScopeSet],\n    },\n    DeviceCodePollingCancelled: {\n        code: deviceCodePollingCancelled,\n        desc: ClientAuthErrorMessages[deviceCodePollingCancelled],\n    },\n    DeviceCodeExpired: {\n        code: deviceCodeExpired,\n        desc: ClientAuthErrorMessages[deviceCodeExpired],\n    },\n    DeviceCodeUnknownError: {\n        code: deviceCodeUnknownError,\n        desc: ClientAuthErrorMessages[deviceCodeUnknownError],\n    },\n    NoAccountInSilentRequest: {\n        code: noAccountInSilentRequest,\n        desc: ClientAuthErrorMessages[noAccountInSilentRequest],\n    },\n    invalidCacheRecord: {\n        code: invalidCacheRecord,\n        desc: ClientAuthErrorMessages[invalidCacheRecord],\n    },\n    invalidCacheEnvironment: {\n        code: invalidCacheEnvironment,\n        desc: ClientAuthErrorMessages[invalidCacheEnvironment],\n    },\n    noAccountFound: {\n        code: noAccountFound,\n        desc: ClientAuthErrorMessages[noAccountFound],\n    },\n    noCryptoObj: {\n        code: noCryptoObject,\n        desc: ClientAuthErrorMessages[noCryptoObject],\n    },\n    unexpectedCredentialType: {\n        code: unexpectedCredentialType,\n        desc: ClientAuthErrorMessages[unexpectedCredentialType],\n    },\n    invalidAssertion: {\n        code: invalidAssertion,\n        desc: ClientAuthErrorMessages[invalidAssertion],\n    },\n    invalidClientCredential: {\n        code: invalidClientCredential,\n        desc: ClientAuthErrorMessages[invalidClientCredential],\n    },\n    tokenRefreshRequired: {\n        code: tokenRefreshRequired,\n        desc: ClientAuthErrorMessages[tokenRefreshRequired],\n    },\n    userTimeoutReached: {\n        code: userTimeoutReached,\n        desc: ClientAuthErrorMessages[userTimeoutReached],\n    },\n    tokenClaimsRequired: {\n        code: tokenClaimsCnfRequiredForSignedJwt,\n        desc: ClientAuthErrorMessages[tokenClaimsCnfRequiredForSignedJwt],\n    },\n    noAuthorizationCodeFromServer: {\n        code: authorizationCodeMissingFromServerResponse,\n        desc: ClientAuthErrorMessages[authorizationCodeMissingFromServerResponse],\n    },\n    bindingKeyNotRemovedError: {\n        code: bindingKeyNotRemoved,\n        desc: ClientAuthErrorMessages[bindingKeyNotRemoved],\n    },\n    logoutNotSupported: {\n        code: endSessionEndpointNotSupported,\n        desc: ClientAuthErrorMessages[endSessionEndpointNotSupported],\n    },\n    keyIdMissing: {\n        code: keyIdMissing,\n        desc: ClientAuthErrorMessages[keyIdMissing],\n    },\n    noNetworkConnectivity: {\n        code: noNetworkConnectivity,\n        desc: ClientAuthErrorMessages[noNetworkConnectivity],\n    },\n    userCanceledError: {\n        code: userCanceled,\n        desc: ClientAuthErrorMessages[userCanceled],\n    },\n    missingTenantIdError: {\n        code: missingTenantIdError,\n        desc: ClientAuthErrorMessages[missingTenantIdError],\n    },\n    nestedAppAuthBridgeDisabled: {\n        code: nestedAppAuthBridgeDisabled,\n        desc: ClientAuthErrorMessages[nestedAppAuthBridgeDisabled],\n    },\n};\n/**\n * Error thrown when there is an error in the client code running on the browser.\n */\nclass ClientAuthError extends AuthError {\n    constructor(errorCode, additionalMessage) {\n        super(errorCode, additionalMessage\n            ? `${ClientAuthErrorMessages[errorCode]}: ${additionalMessage}`\n            : ClientAuthErrorMessages[errorCode]);\n        this.name = \"ClientAuthError\";\n        Object.setPrototypeOf(this, ClientAuthError.prototype);\n    }\n}\nfunction createClientAuthError(errorCode, additionalMessage) {\n    return new ClientAuthError(errorCode, additionalMessage);\n}\n\nexport { ClientAuthError, ClientAuthErrorMessage, ClientAuthErrorMessages, createClientAuthError };\n//# sourceMappingURL=ClientAuthError.mjs.map\n","/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\nimport { createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { methodNotImplemented } from '../error/ClientAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nconst DEFAULT_CRYPTO_IMPLEMENTATION = {\n    createNewGuid: () => {\n        throw createClientAuthError(methodNotImplemented);\n    },\n    base64Decode: () => {\n        throw createClientAuthError(methodNotImplemented);\n    },\n    base64Encode: () => {\n        throw createClientAuthError(methodNotImplemented);\n    },\n    async getPublicKeyThumbprint() {\n        throw createClientAuthError(methodNotImplemented);\n    },\n    async removeTokenBindingKey() {\n        throw createClientAuthError(methodNotImplemented);\n    },\n    async clearKeystore() {\n        throw createClientAuthError(methodNotImplemented);\n    },\n    async signJwt() {\n        throw createClientAuthError(methodNotImplemented);\n    },\n    async hashString() {\n        throw createClientAuthError(methodNotImplemented);\n    },\n};\n\nexport { DEFAULT_CRYPTO_IMPLEMENTATION };\n//# sourceMappingURL=ICrypto.mjs.map\n","/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\nimport { Constants } from '../utils/Constants.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Log message level.\n */\nvar LogLevel;\n(function (LogLevel) {\n    LogLevel[LogLevel[\"Error\"] = 0] = \"Error\";\n    LogLevel[LogLevel[\"Warning\"] = 1] = \"Warning\";\n    LogLevel[LogLevel[\"Info\"] = 2] = \"Info\";\n    LogLevel[LogLevel[\"Verbose\"] = 3] = \"Verbose\";\n    LogLevel[LogLevel[\"Trace\"] = 4] = \"Trace\";\n})(LogLevel || (LogLevel = {}));\n/**\n * Class which facilitates logging of messages to a specific place.\n */\nclass Logger {\n    constructor(loggerOptions, packageName, packageVersion) {\n        // Current log level, defaults to info.\n        this.level = LogLevel.Info;\n        const defaultLoggerCallback = () => {\n            return;\n        };\n        const setLoggerOptions = loggerOptions || Logger.createDefaultLoggerOptions();\n        this.localCallback =\n            setLoggerOptions.loggerCallback || defaultLoggerCallback;\n        this.piiLoggingEnabled = setLoggerOptions.piiLoggingEnabled || false;\n        this.level =\n            typeof setLoggerOptions.logLevel === \"number\"\n                ? setLoggerOptions.logLevel\n                : LogLevel.Info;\n        this.correlationId =\n            setLoggerOptions.correlationId || Constants.EMPTY_STRING;\n        this.packageName = packageName || Constants.EMPTY_STRING;\n        this.packageVersion = packageVersion || Constants.EMPTY_STRING;\n    }\n    static createDefaultLoggerOptions() {\n        return {\n            loggerCallback: () => {\n                // allow users to not set loggerCallback\n            },\n            piiLoggingEnabled: false,\n            logLevel: LogLevel.Info,\n        };\n    }\n    /**\n     * Create new Logger with existing configurations.\n     */\n    clone(packageName, packageVersion, correlationId) {\n        return new Logger({\n            loggerCallback: this.localCallback,\n            piiLoggingEnabled: this.piiLoggingEnabled,\n            logLevel: this.level,\n            correlationId: correlationId || this.correlationId,\n        }, packageName, packageVersion);\n    }\n    /**\n     * Log message with required options.\n     */\n    logMessage(logMessage, options) {\n        if (options.logLevel > this.level ||\n            (!this.piiLoggingEnabled && options.containsPii)) {\n            return;\n        }\n        const timestamp = new Date().toUTCString();\n        // Add correlationId to logs if set, correlationId provided on log messages take precedence\n        const logHeader = `[${timestamp}] : [${options.correlationId || this.correlationId || \"\"}]`;\n        const log = `${logHeader} : ${this.packageName}@${this.packageVersion} : ${LogLevel[options.logLevel]} - ${logMessage}`;\n        // debug(`msal:${LogLevel[options.logLevel]}${options.containsPii ? \"-Pii\": Constants.EMPTY_STRING}${options.context ? `:${options.context}` : Constants.EMPTY_STRING}`)(logMessage);\n        this.executeCallback(options.logLevel, log, options.containsPii || false);\n    }\n    /**\n     * Execute callback with message.\n     */\n    executeCallback(level, message, containsPii) {\n        if (this.localCallback) {\n            this.localCallback(level, message, containsPii);\n        }\n    }\n    /**\n     * Logs error messages.\n     */\n    error(message, correlationId) {\n        this.logMessage(message, {\n            logLevel: LogLevel.Error,\n            containsPii: false,\n            correlationId: correlationId || Constants.EMPTY_STRING,\n        });\n    }\n    /**\n     * Logs error messages with PII.\n     */\n    errorPii(message, correlationId) {\n        this.logMessage(message, {\n            logLevel: LogLevel.Error,\n            containsPii: true,\n            correlationId: correlationId || Constants.EMPTY_STRING,\n        });\n    }\n    /**\n     * Logs warning messages.\n     */\n    warning(message, correlationId) {\n        this.logMessage(message, {\n            logLevel: LogLevel.Warning,\n            containsPii: false,\n            correlationId: correlationId || Constants.EMPTY_STRING,\n        });\n    }\n    /**\n     * Logs warning messages with PII.\n     */\n    warningPii(message, correlationId) {\n        this.logMessage(message, {\n            logLevel: LogLevel.Warning,\n            containsPii: true,\n            correlationId: correlationId || Constants.EMPTY_STRING,\n        });\n    }\n    /**\n     * Logs info messages.\n     */\n    info(message, correlationId) {\n        this.logMessage(message, {\n            logLevel: LogLevel.Info,\n            containsPii: false,\n            correlationId: correlationId || Constants.EMPTY_STRING,\n        });\n    }\n    /**\n     * Logs info messages with PII.\n     */\n    infoPii(message, correlationId) {\n        this.logMessage(message, {\n            logLevel: LogLevel.Info,\n            containsPii: true,\n            correlationId: correlationId || Constants.EMPTY_STRING,\n        });\n    }\n    /**\n     * Logs verbose messages.\n     */\n    verbose(message, correlationId) {\n        this.logMessage(message, {\n            logLevel: LogLevel.Verbose,\n            containsPii: false,\n            correlationId: correlationId || Constants.EMPTY_STRING,\n        });\n    }\n    /**\n     * Logs verbose messages with PII.\n     */\n    verbosePii(message, correlationId) {\n        this.logMessage(message, {\n            logLevel: LogLevel.Verbose,\n            containsPii: true,\n            correlationId: correlationId || Constants.EMPTY_STRING,\n        });\n    }\n    /**\n     * Logs trace messages.\n     */\n    trace(message, correlationId) {\n        this.logMessage(message, {\n            logLevel: LogLevel.Trace,\n            containsPii: false,\n            correlationId: correlationId || Constants.EMPTY_STRING,\n        });\n    }\n    /**\n     * Logs trace messages with PII.\n     */\n    tracePii(message, correlationId) {\n        this.logMessage(message, {\n            logLevel: LogLevel.Trace,\n            containsPii: true,\n            correlationId: correlationId || Constants.EMPTY_STRING,\n        });\n    }\n    /**\n     * Returns whether PII Logging is enabled or not.\n     */\n    isPiiLoggingEnabled() {\n        return this.piiLoggingEnabled || false;\n    }\n}\n\nexport { LogLevel, Logger };\n//# sourceMappingURL=Logger.mjs.map\n","/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\n/* eslint-disable header/header */\nconst name = \"@azure/msal-common\";\nconst version = \"14.4.0\";\n\nexport { name, version };\n//# sourceMappingURL=packageMetadata.mjs.map\n","/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nconst AzureCloudInstance = {\n    // AzureCloudInstance is not specified.\n    None: \"none\",\n    // Microsoft Azure public cloud\n    AzurePublic: \"https://login.microsoftonline.com\",\n    // Microsoft PPE\n    AzurePpe: \"https://login.windows-ppe.net\",\n    // Microsoft Chinese national/regional cloud\n    AzureChina: \"https://login.chinacloudapi.cn\",\n    // Microsoft German national/regional cloud (\"Black Forest\")\n    AzureGermany: \"https://login.microsoftonline.de\",\n    // US Government cloud\n    AzureUsGovernment: \"https://login.microsoftonline.us\",\n};\n\nexport { AzureCloudInstance };\n//# sourceMappingURL=AuthorityOptions.mjs.map\n","/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\nimport { createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { tokenParsingError, nullOrEmptyToken, maxAgeTranspired } from '../error/ClientAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Extract token by decoding the rawToken\n *\n * @param encodedToken\n */\nfunction extractTokenClaims(encodedToken, base64Decode) {\n    const jswPayload = getJWSPayload(encodedToken);\n    // token will be decoded to get the username\n    try {\n        // base64Decode() should throw an error if there is an issue\n        const base64Decoded = base64Decode(jswPayload);\n        return JSON.parse(base64Decoded);\n    }\n    catch (err) {\n        throw createClientAuthError(tokenParsingError);\n    }\n}\n/**\n * decode a JWT\n *\n * @param authToken\n */\nfunction getJWSPayload(authToken) {\n    if (!authToken) {\n        throw createClientAuthError(nullOrEmptyToken);\n    }\n    const tokenPartsRegex = /^([^\\.\\s]*)\\.([^\\.\\s]+)\\.([^\\.\\s]*)$/;\n    const matches = tokenPartsRegex.exec(authToken);\n    if (!matches || matches.length < 4) {\n        throw createClientAuthError(tokenParsingError);\n    }\n    /**\n     * const crackedToken = {\n     *  header: matches[1],\n     *  JWSPayload: matches[2],\n     *  JWSSig: matches[3],\n     * };\n     */\n    return matches[2];\n}\n/**\n * Determine if the token's max_age has transpired\n */\nfunction checkMaxAge(authTime, maxAge) {\n    /*\n     * per https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest\n     * To force an immediate re-authentication: If an app requires that a user re-authenticate prior to access,\n     * provide a value of 0 for the max_age parameter and the AS will force a fresh login.\n     */\n    const fiveMinuteSkew = 300000; // five minutes in milliseconds\n    if (maxAge === 0 || Date.now() - fiveMinuteSkew > authTime + maxAge) {\n        throw createClientAuthError(maxAgeTranspired);\n    }\n}\n\nexport { checkMaxAge, extractTokenClaims, getJWSPayload };\n//# sourceMappingURL=AuthToken.mjs.map\n","/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Utility class which exposes functions for managing date and time operations.\n */\nclass TimeUtils {\n    /**\n     * return the current time in Unix time (seconds).\n     */\n    static nowSeconds() {\n        // Date.getTime() returns in milliseconds.\n        return Math.round(new Date().getTime() / 1000.0);\n    }\n    /**\n     * check if a token is expired based on given UTC time in seconds.\n     * @param expiresOn\n     */\n    static isTokenExpired(expiresOn, offset) {\n        // check for access token expiry\n        const expirationSec = Number(expiresOn) || 0;\n        const offsetCurrentTimeSec = TimeUtils.nowSeconds() + offset;\n        // If current time + offset is greater than token expiration time, then token is expired.\n        return offsetCurrentTimeSec > expirationSec;\n    }\n    /**\n     * If the current time is earlier than the time that a token was cached at, we must discard the token\n     * i.e. The system clock was turned back after acquiring the cached token\n     * @param cachedAt\n     * @param offset\n     */\n    static wasClockTurnedBack(cachedAt) {\n        const cachedAtSec = Number(cachedAt);\n        return cachedAtSec > TimeUtils.nowSeconds();\n    }\n    /**\n     * Waits for t number of milliseconds\n     * @param t number\n     * @param value T\n     */\n    static delay(t, value) {\n        return new Promise((resolve) => setTimeout(() => resolve(value), t));\n    }\n}\n\nexport { TimeUtils };\n//# sourceMappingURL=TimeUtils.mjs.map\n","/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\nimport { extractTokenClaims } from '../../account/AuthToken.mjs';\nimport { createClientAuthError } from '../../error/ClientAuthError.mjs';\nimport { Separators, CredentialType, AuthenticationScheme, SERVER_TELEM_CONSTANTS } from '../../utils/Constants.mjs';\nimport { TimeUtils } from '../../utils/TimeUtils.mjs';\nimport { tokenClaimsCnfRequiredForSignedJwt } from '../../error/ClientAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Cache Key: <home_account_id>-<environment>-<credential_type>-<client_id or familyId>-<realm>-<scopes>-<claims hash>-<scheme>\n * IdToken Example: uid.utid-login.microsoftonline.com-idtoken-app_client_id-contoso.com\n * AccessToken Example: uid.utid-login.microsoftonline.com-accesstoken-app_client_id-contoso.com-scope1 scope2--pop\n * RefreshToken Example: uid.utid-login.microsoftonline.com-refreshtoken-1-contoso.com\n * @param credentialEntity\n * @returns\n */\nfunction generateCredentialKey(credentialEntity) {\n    const credentialKey = [\n        generateAccountId(credentialEntity),\n        generateCredentialId(credentialEntity),\n        generateTarget(credentialEntity),\n        generateClaimsHash(credentialEntity),\n        generateScheme(credentialEntity),\n    ];\n    return credentialKey.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n}\n/**\n * Create IdTokenEntity\n * @param homeAccountId\n * @param authenticationResult\n * @param clientId\n * @param authority\n */\nfunction createIdTokenEntity(homeAccountId, environment, idToken, clientId, tenantId) {\n    const idTokenEntity = {\n        credentialType: CredentialType.ID_TOKEN,\n        homeAccountId: homeAccountId,\n        environment: environment,\n        clientId: clientId,\n        secret: idToken,\n        realm: tenantId,\n    };\n    return idTokenEntity;\n}\n/**\n * Create AccessTokenEntity\n * @param homeAccountId\n * @param environment\n * @param accessToken\n * @param clientId\n * @param tenantId\n * @param scopes\n * @param expiresOn\n * @param extExpiresOn\n */\nfunction createAccessTokenEntity(homeAccountId, environment, accessToken, clientId, tenantId, scopes, expiresOn, extExpiresOn, base64Decode, refreshOn, tokenType, userAssertionHash, keyId, requestedClaims, requestedClaimsHash) {\n    const atEntity = {\n        homeAccountId: homeAccountId,\n        credentialType: CredentialType.ACCESS_TOKEN,\n        secret: accessToken,\n        cachedAt: TimeUtils.nowSeconds().toString(),\n        expiresOn: expiresOn.toString(),\n        extendedExpiresOn: extExpiresOn.toString(),\n        environment: environment,\n        clientId: clientId,\n        realm: tenantId,\n        target: scopes,\n        tokenType: tokenType || AuthenticationScheme.BEARER,\n    };\n    if (userAssertionHash) {\n        atEntity.userAssertionHash = userAssertionHash;\n    }\n    if (refreshOn) {\n        atEntity.refreshOn = refreshOn.toString();\n    }\n    if (requestedClaims) {\n        atEntity.requestedClaims = requestedClaims;\n        atEntity.requestedClaimsHash = requestedClaimsHash;\n    }\n    /*\n     * Create Access Token With Auth Scheme instead of regular access token\n     * Cast to lower to handle \"bearer\" from ADFS\n     */\n    if (atEntity.tokenType?.toLowerCase() !==\n        AuthenticationScheme.BEARER.toLowerCase()) {\n        atEntity.credentialType = CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME;\n        switch (atEntity.tokenType) {\n            case AuthenticationScheme.POP:\n                // Make sure keyId is present and add it to credential\n                const tokenClaims = extractTokenClaims(accessToken, base64Decode);\n                if (!tokenClaims?.cnf?.kid) {\n                    throw createClientAuthError(tokenClaimsCnfRequiredForSignedJwt);\n                }\n                atEntity.keyId = tokenClaims.cnf.kid;\n                break;\n            case AuthenticationScheme.SSH:\n                atEntity.keyId = keyId;\n        }\n    }\n    return atEntity;\n}\n/**\n * Create RefreshTokenEntity\n * @param homeAccountId\n * @param authenticationResult\n * @param clientId\n * @param authority\n */\nfunction createRefreshTokenEntity(homeAccountId, environment, refreshToken, clientId, familyId, userAssertionHash) {\n    const rtEntity = {\n        credentialType: CredentialType.REFRESH_TOKEN,\n        homeAccountId: homeAccountId,\n        environment: environment,\n        clientId: clientId,\n        secret: refreshToken,\n    };\n    if (userAssertionHash) {\n        rtEntity.userAssertionHash = userAssertionHash;\n    }\n    if (familyId) {\n        rtEntity.familyId = familyId;\n    }\n    return rtEntity;\n}\nfunction isCredentialEntity(entity) {\n    return (entity.hasOwnProperty(\"homeAccountId\") &&\n        entity.hasOwnProperty(\"environment\") &&\n        entity.hasOwnProperty(\"credentialType\") &&\n        entity.hasOwnProperty(\"clientId\") &&\n        entity.hasOwnProperty(\"secret\"));\n}\n/**\n * Validates an entity: checks for all expected params\n * @param entity\n */\nfunction isAccessTokenEntity(entity) {\n    if (!entity) {\n        return false;\n    }\n    return (isCredentialEntity(entity) &&\n        entity.hasOwnProperty(\"realm\") &&\n        entity.hasOwnProperty(\"target\") &&\n        (entity[\"credentialType\"] === CredentialType.ACCESS_TOKEN ||\n            entity[\"credentialType\"] ===\n                CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME));\n}\n/**\n * Validates an entity: checks for all expected params\n * @param entity\n */\nfunction isIdTokenEntity(entity) {\n    if (!entity) {\n        return false;\n    }\n    return (isCredentialEntity(entity) &&\n        entity.hasOwnProperty(\"realm\") &&\n        entity[\"credentialType\"] === CredentialType.ID_TOKEN);\n}\n/**\n * Validates an entity: checks for all expected params\n * @param entity\n */\nfunction isRefreshTokenEntity(entity) {\n    if (!entity) {\n        return false;\n    }\n    return (isCredentialEntity(entity) &&\n        entity[\"credentialType\"] === CredentialType.REFRESH_TOKEN);\n}\n/**\n * Generate Account Id key component as per the schema: <home_account_id>-<environment>\n */\nfunction generateAccountId(credentialEntity) {\n    const accountId = [\n        credentialEntity.homeAccountId,\n        credentialEntity.environment,\n    ];\n    return accountId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n}\n/**\n * Generate Credential Id key component as per the schema: <credential_type>-<client_id>-<realm>\n */\nfunction generateCredentialId(credentialEntity) {\n    const clientOrFamilyId = credentialEntity.credentialType === CredentialType.REFRESH_TOKEN\n        ? credentialEntity.familyId || credentialEntity.clientId\n        : credentialEntity.clientId;\n    const credentialId = [\n        credentialEntity.credentialType,\n        clientOrFamilyId,\n        credentialEntity.realm || \"\",\n    ];\n    return credentialId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n}\n/**\n * Generate target key component as per schema: <target>\n */\nfunction generateTarget(credentialEntity) {\n    return (credentialEntity.target || \"\").toLowerCase();\n}\n/**\n * Generate requested claims key component as per schema: <requestedClaims>\n */\nfunction generateClaimsHash(credentialEntity) {\n    return (credentialEntity.requestedClaimsHash || \"\").toLowerCase();\n}\n/**\n * Generate scheme key componenet as per schema: <scheme>\n */\nfunction generateScheme(credentialEntity) {\n    /*\n     * PoP Tokens and SSH certs include scheme in cache key\n     * Cast to lowercase to handle \"bearer\" from ADFS\n     */\n    return credentialEntity.tokenType &&\n        credentialEntity.tokenType.toLowerCase() !==\n            AuthenticationScheme.BEARER.toLowerCase()\n        ? credentialEntity.tokenType.toLowerCase()\n        : \"\";\n}\n/**\n * validates if a given cache entry is \"Telemetry\", parses <key,value>\n * @param key\n * @param entity\n */\nfunction isServerTelemetryEntity(key, entity) {\n    const validateKey = key.indexOf(SERVER_TELEM_CONSTANTS.CACHE_KEY) === 0;\n    let validateEntity = true;\n    if (entity) {\n        validateEntity =\n            entity.hasOwnProperty(\"failedRequests\") &&\n                entity.hasOwnProperty(\"errors\") &&\n                entity.hasOwnProperty(\"cacheHits\");\n    }\n    return validateKey && validateEntity;\n}\n\nexport { createAccessTokenEntity, createIdTokenEntity, createRefreshTokenEntity, generateCredentialKey, isAccessTokenEntity, isCredentialEntity, isIdTokenEntity, isRefreshTokenEntity, isServerTelemetryEntity };\n//# sourceMappingURL=CacheHelpers.mjs.map\n","/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nconst redirectUriEmpty = \"redirect_uri_empty\";\nconst claimsRequestParsingError = \"claims_request_parsing_error\";\nconst authorityUriInsecure = \"authority_uri_insecure\";\nconst urlParseError = \"url_parse_error\";\nconst urlEmptyError = \"empty_url_error\";\nconst emptyInputScopesError = \"empty_input_scopes_error\";\nconst invalidPromptValue = \"invalid_prompt_value\";\nconst invalidClaims = \"invalid_claims\";\nconst tokenRequestEmpty = \"token_request_empty\";\nconst logoutRequestEmpty = \"logout_request_empty\";\nconst invalidCodeChallengeMethod = \"invalid_code_challenge_method\";\nconst pkceParamsMissing = \"pkce_params_missing\";\nconst invalidCloudDiscoveryMetadata = \"invalid_cloud_discovery_metadata\";\nconst invalidAuthorityMetadata = \"invalid_authority_metadata\";\nconst untrustedAuthority = \"untrusted_authority\";\nconst missingSshJwk = \"missing_ssh_jwk\";\nconst missingSshKid = \"missing_ssh_kid\";\nconst missingNonceAuthenticationHeader = \"missing_nonce_authentication_header\";\nconst invalidAuthenticationHeader = \"invalid_authentication_header\";\nconst cannotSetOIDCOptions = \"cannot_set_OIDCOptions\";\nconst cannotAllowNativeBroker = \"cannot_allow_native_broker\";\nconst authorityMismatch = \"authority_mismatch\";\n\nexport { authorityMismatch, authorityUriInsecure, cannotAllowNativeBroker, cannotSetOIDCOptions, claimsRequestParsingError, emptyInputScopesError, invalidAuthenticationHeader, invalidAuthorityMetadata, invalidClaims, invalidCloudDiscoveryMetadata, invalidCodeChallengeMethod, invalidPromptValue, logoutRequestEmpty, missingNonceAuthenticationHeader, missingSshJwk, missingSshKid, pkceParamsMissing, redirectUriEmpty, tokenRequestEmpty, untrustedAuthority, urlEmptyError, urlParseError };\n//# sourceMappingURL=ClientConfigurationErrorCodes.mjs.map\n","/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\nimport { AuthError } from './AuthError.mjs';\nimport { redirectUriEmpty, claimsRequestParsingError, authorityUriInsecure, urlParseError, urlEmptyError, emptyInputScopesError, invalidPromptValue, invalidClaims, tokenRequestEmpty, logoutRequestEmpty, invalidCodeChallengeMethod, pkceParamsMissing, invalidCloudDiscoveryMetadata, invalidAuthorityMetadata, untrustedAuthority, missingSshJwk, missingSshKid, missingNonceAuthenticationHeader, invalidAuthenticationHeader, cannotSetOIDCOptions, cannotAllowNativeBroker, authorityMismatch } from './ClientConfigurationErrorCodes.mjs';\nimport * as ClientConfigurationErrorCodes from './ClientConfigurationErrorCodes.mjs';\nexport { ClientConfigurationErrorCodes };\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nconst ClientConfigurationErrorMessages = {\n    [redirectUriEmpty]: \"A redirect URI is required for all calls, and none has been set.\",\n    [claimsRequestParsingError]: \"Could not parse the given claims request object.\",\n    [authorityUriInsecure]: \"Authority URIs must use https.  Please see here for valid authority configuration options: https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-js-initializing-client-applications#configuration-options\",\n    [urlParseError]: \"URL could not be parsed into appropriate segments.\",\n    [urlEmptyError]: \"URL was empty or null.\",\n    [emptyInputScopesError]: \"Scopes cannot be passed as null, undefined or empty array because they are required to obtain an access token.\",\n    [invalidPromptValue]: \"Please see here for valid configuration options: https://azuread.github.io/microsoft-authentication-library-for-js/ref/modules/_azure_msal_common.html#commonauthorizationurlrequest\",\n    [invalidClaims]: \"Given claims parameter must be a stringified JSON object.\",\n    [tokenRequestEmpty]: \"Token request was empty and not found in cache.\",\n    [logoutRequestEmpty]: \"The logout request was null or undefined.\",\n    [invalidCodeChallengeMethod]: 'code_challenge_method passed is invalid. Valid values are \"plain\" and \"S256\".',\n    [pkceParamsMissing]: \"Both params: code_challenge and code_challenge_method are to be passed if to be sent in the request\",\n    [invalidCloudDiscoveryMetadata]: \"Invalid cloudDiscoveryMetadata provided. Must be a stringified JSON object containing tenant_discovery_endpoint and metadata fields\",\n    [invalidAuthorityMetadata]: \"Invalid authorityMetadata provided. Must by a stringified JSON object containing authorization_endpoint, token_endpoint, issuer fields.\",\n    [untrustedAuthority]: \"The provided authority is not a trusted authority. Please include this authority in the knownAuthorities config parameter.\",\n    [missingSshJwk]: \"Missing sshJwk in SSH certificate request. A stringified JSON Web Key is required when using the SSH authentication scheme.\",\n    [missingSshKid]: \"Missing sshKid in SSH certificate request. A string that uniquely identifies the public SSH key is required when using the SSH authentication scheme.\",\n    [missingNonceAuthenticationHeader]: \"Unable to find an authentication header containing server nonce. Either the Authentication-Info or WWW-Authenticate headers must be present in order to obtain a server nonce.\",\n    [invalidAuthenticationHeader]: \"Invalid authentication header provided\",\n    [cannotSetOIDCOptions]: \"Cannot set OIDCOptions parameter. Please change the protocol mode to OIDC or use a non-Microsoft authority.\",\n    [cannotAllowNativeBroker]: \"Cannot set allowNativeBroker parameter to true when not in AAD protocol mode.\",\n    [authorityMismatch]: \"Authority mismatch error. Authority provided in login request or PublicClientApplication config does not match the environment of the provided account. Please use a matching account or make an interactive request to login to this authority.\",\n};\n/**\n * ClientConfigurationErrorMessage class containing string constants used by error codes and messages.\n * @deprecated Use ClientConfigurationErrorCodes instead\n */\nconst ClientConfigurationErrorMessage = {\n    redirectUriNotSet: {\n        code: redirectUriEmpty,\n        desc: ClientConfigurationErrorMessages[redirectUriEmpty],\n    },\n    claimsRequestParsingError: {\n        code: claimsRequestParsingError,\n        desc: ClientConfigurationErrorMessages[claimsRequestParsingError],\n    },\n    authorityUriInsecure: {\n        code: authorityUriInsecure,\n        desc: ClientConfigurationErrorMessages[authorityUriInsecure],\n    },\n    urlParseError: {\n        code: urlParseError,\n        desc: ClientConfigurationErrorMessages[urlParseError],\n    },\n    urlEmptyError: {\n        code: urlEmptyError,\n        desc: ClientConfigurationErrorMessages[urlEmptyError],\n    },\n    emptyScopesError: {\n        code: emptyInputScopesError,\n        desc: ClientConfigurationErrorMessages[emptyInputScopesError],\n    },\n    invalidPrompt: {\n        code: invalidPromptValue,\n        desc: ClientConfigurationErrorMessages[invalidPromptValue],\n    },\n    invalidClaimsRequest: {\n        code: invalidClaims,\n        desc: ClientConfigurationErrorMessages[invalidClaims],\n    },\n    tokenRequestEmptyError: {\n        code: tokenRequestEmpty,\n        desc: ClientConfigurationErrorMessages[tokenRequestEmpty],\n    },\n    logoutRequestEmptyError: {\n        code: logoutRequestEmpty,\n        desc: ClientConfigurationErrorMessages[logoutRequestEmpty],\n    },\n    invalidCodeChallengeMethod: {\n        code: invalidCodeChallengeMethod,\n        desc: ClientConfigurationErrorMessages[invalidCodeChallengeMethod],\n    },\n    invalidCodeChallengeParams: {\n        code: pkceParamsMissing,\n        desc: ClientConfigurationErrorMessages[pkceParamsMissing],\n    },\n    invalidCloudDiscoveryMetadata: {\n        code: invalidCloudDiscoveryMetadata,\n        desc: ClientConfigurationErrorMessages[invalidCloudDiscoveryMetadata],\n    },\n    invalidAuthorityMetadata: {\n        code: invalidAuthorityMetadata,\n        desc: ClientConfigurationErrorMessages[invalidAuthorityMetadata],\n    },\n    untrustedAuthority: {\n        code: untrustedAuthority,\n        desc: ClientConfigurationErrorMessages[untrustedAuthority],\n    },\n    missingSshJwk: {\n        code: missingSshJwk,\n        desc: ClientConfigurationErrorMessages[missingSshJwk],\n    },\n    missingSshKid: {\n        code: missingSshKid,\n        desc: ClientConfigurationErrorMessages[missingSshKid],\n    },\n    missingNonceAuthenticationHeader: {\n        code: missingNonceAuthenticationHeader,\n        desc: ClientConfigurationErrorMessages[missingNonceAuthenticationHeader],\n    },\n    invalidAuthenticationHeader: {\n        code: invalidAuthenticationHeader,\n        desc: ClientConfigurationErrorMessages[invalidAuthenticationHeader],\n    },\n    cannotSetOIDCOptions: {\n        code: cannotSetOIDCOptions,\n        desc: ClientConfigurationErrorMessages[cannotSetOIDCOptions],\n    },\n    cannotAllowNativeBroker: {\n        code: cannotAllowNativeBroker,\n        desc: ClientConfigurationErrorMessages[cannotAllowNativeBroker],\n    },\n    authorityMismatch: {\n        code: authorityMismatch,\n        desc: ClientConfigurationErrorMessages[authorityMismatch],\n    },\n};\n/**\n * Error thrown when there is an error in configuration of the MSAL.js library.\n */\nclass ClientConfigurationError extends AuthError {\n    constructor(errorCode) {\n        super(errorCode, ClientConfigurationErrorMessages[errorCode]);\n        this.name = \"ClientConfigurationError\";\n        Object.setPrototypeOf(this, ClientConfigurationError.prototype);\n    }\n}\nfunction createClientConfigurationError(errorCode) {\n    return new ClientConfigurationError(errorCode);\n}\n\nexport { ClientConfigurationError, ClientConfigurationErrorMessage, ClientConfigurationErrorMessages, createClientConfigurationError };\n//# sourceMappingURL=ClientConfigurationError.mjs.map\n","/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * @hidden\n */\nclass StringUtils {\n    /**\n     * Check if stringified object is empty\n     * @param strObj\n     */\n    static isEmptyObj(strObj) {\n        if (strObj) {\n            try {\n                const obj = JSON.parse(strObj);\n                return Object.keys(obj).length === 0;\n            }\n            catch (e) { }\n        }\n        return true;\n    }\n    static startsWith(str, search) {\n        return str.indexOf(search) === 0;\n    }\n    static endsWith(str, search) {\n        return (str.length >= search.length &&\n            str.lastIndexOf(search) === str.length - search.length);\n    }\n    /**\n     * Parses string into an object.\n     *\n     * @param query\n     */\n    static queryStringToObject(query) {\n        const obj = {};\n        const params = query.split(\"&\");\n        const decode = (s) => decodeURIComponent(s.replace(/\\+/g, \" \"));\n        params.forEach((pair) => {\n            if (pair.trim()) {\n                const [key, value] = pair.split(/=(.+)/g, 2); // Split on the first occurence of the '=' character\n                if (key && value) {\n                    obj[decode(key)] = decode(value);\n                }\n            }\n        });\n        return obj;\n    }\n    /**\n     * Trims entries in an array.\n     *\n     * @param arr\n     */\n    static trimArrayEntries(arr) {\n        return arr.map((entry) => entry.trim());\n    }\n    /**\n     * Removes empty strings from array\n     * @param arr\n     */\n    static removeEmptyStringsFromArray(arr) {\n        return arr.filter((entry) => {\n            return !!entry;\n        });\n    }\n    /**\n     * Attempts to parse a string into JSON\n     * @param str\n     */\n    static jsonParseHelper(str) {\n        try {\n            return JSON.parse(str);\n        }\n        catch (e) {\n            return null;\n        }\n    }\n    /**\n     * Tests if a given string matches a given pattern, with support for wildcards and queries.\n     * @param pattern Wildcard pattern to string match. Supports \"*\" for wildcards and \"?\" for queries\n     * @param input String to match against\n     */\n    static matchPattern(pattern, input) {\n        /**\n         * Wildcard support: https://stackoverflow.com/a/3117248/4888559\n         * Queries: replaces \"?\" in string with escaped \"\\?\" for regex test\n         */\n        // eslint-disable-next-line security/detect-non-literal-regexp\n        const regex = new RegExp(pattern\n            .replace(/\\\\/g, \"\\\\\\\\\")\n            .replace(/\\*/g, \"[^ ]*\")\n            .replace(/\\?/g, \"\\\\?\"));\n        return regex.test(input);\n    }\n}\n\nexport { StringUtils };\n//# sourceMappingURL=StringUtils.mjs.map\n","/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\nimport { createClientConfigurationError } from '../error/ClientConfigurationError.mjs';\nimport { StringUtils } from '../utils/StringUtils.mjs';\nimport { createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { Constants, OIDC_SCOPES } from '../utils/Constants.mjs';\nimport { emptyInputScopesError } from '../error/ClientConfigurationErrorCodes.mjs';\nimport { cannotAppendScopeSet, cannotRemoveEmptyScope, emptyInputScopeSet } from '../error/ClientAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * The ScopeSet class creates a set of scopes. Scopes are case-insensitive, unique values, so the Set object in JS makes\n * the most sense to implement for this class. All scopes are trimmed and converted to lower case strings in intersection and union functions\n * to ensure uniqueness of strings.\n */\nclass ScopeSet {\n    constructor(inputScopes) {\n        // Filter empty string and null/undefined array items\n        const scopeArr = inputScopes\n            ? StringUtils.trimArrayEntries([...inputScopes])\n            : [];\n        const filteredInput = scopeArr\n            ? StringUtils.removeEmptyStringsFromArray(scopeArr)\n            : [];\n        // Validate and filter scopes (validate function throws if validation fails)\n        this.validateInputScopes(filteredInput);\n        this.scopes = new Set(); // Iterator in constructor not supported by IE11\n        filteredInput.forEach((scope) => this.scopes.add(scope));\n    }\n    /**\n     * Factory method to create ScopeSet from space-delimited string\n     * @param inputScopeString\n     * @param appClientId\n     * @param scopesRequired\n     */\n    static fromString(inputScopeString) {\n        const scopeString = inputScopeString || Constants.EMPTY_STRING;\n        const inputScopes = scopeString.split(\" \");\n        return new ScopeSet(inputScopes);\n    }\n    /**\n     * Creates the set of scopes to search for in cache lookups\n     * @param inputScopeString\n     * @returns\n     */\n    static createSearchScopes(inputScopeString) {\n        const scopeSet = new ScopeSet(inputScopeString);\n        if (!scopeSet.containsOnlyOIDCScopes()) {\n            scopeSet.removeOIDCScopes();\n        }\n        else {\n            scopeSet.removeScope(Constants.OFFLINE_ACCESS_SCOPE);\n        }\n        return scopeSet;\n    }\n    /**\n     * Used to validate the scopes input parameter requested  by the developer.\n     * @param {Array<string>} inputScopes - Developer requested permissions. Not all scopes are guaranteed to be included in the access token returned.\n     * @param {boolean} scopesRequired - Boolean indicating whether the scopes array is required or not\n     */\n    validateInputScopes(inputScopes) {\n        // Check if scopes are required but not given or is an empty array\n        if (!inputScopes || inputScopes.length < 1) {\n            throw createClientConfigurationError(emptyInputScopesError);\n        }\n    }\n    /**\n     * Check if a given scope is present in this set of scopes.\n     * @param scope\n     */\n    containsScope(scope) {\n        const lowerCaseScopes = this.printScopesLowerCase().split(\" \");\n        const lowerCaseScopesSet = new ScopeSet(lowerCaseScopes);\n        // compare lowercase scopes\n        return scope\n            ? lowerCaseScopesSet.scopes.has(scope.toLowerCase())\n            : false;\n    }\n    /**\n     * Check if a set of scopes is present in this set of scopes.\n     * @param scopeSet\n     */\n    containsScopeSet(scopeSet) {\n        if (!scopeSet || scopeSet.scopes.size <= 0) {\n            return false;\n        }\n        return (this.scopes.size >= scopeSet.scopes.size &&\n            scopeSet.asArray().every((scope) => this.containsScope(scope)));\n    }\n    /**\n     * Check if set of scopes contains only the defaults\n     */\n    containsOnlyOIDCScopes() {\n        let defaultScopeCount = 0;\n        OIDC_SCOPES.forEach((defaultScope) => {\n            if (this.containsScope(defaultScope)) {\n                defaultScopeCount += 1;\n            }\n        });\n        return this.scopes.size === defaultScopeCount;\n    }\n    /**\n     * Appends single scope if passed\n     * @param newScope\n     */\n    appendScope(newScope) {\n        if (newScope) {\n            this.scopes.add(newScope.trim());\n        }\n    }\n    /**\n     * Appends multiple scopes if passed\n     * @param newScopes\n     */\n    appendScopes(newScopes) {\n        try {\n            newScopes.forEach((newScope) => this.appendScope(newScope));\n        }\n        catch (e) {\n            throw createClientAuthError(cannotAppendScopeSet);\n        }\n    }\n    /**\n     * Removes element from set of scopes.\n     * @param scope\n     */\n    removeScope(scope) {\n        if (!scope) {\n            throw createClientAuthError(cannotRemoveEmptyScope);\n        }\n        this.scopes.delete(scope.trim());\n    }\n    /**\n     * Removes default scopes from set of scopes\n     * Primarily used to prevent cache misses if the default scopes are not returned from the server\n     */\n    removeOIDCScopes() {\n        OIDC_SCOPES.forEach((defaultScope) => {\n            this.scopes.delete(defaultScope);\n        });\n    }\n    /**\n     * Combines an array of scopes with the current set of scopes.\n     * @param otherScopes\n     */\n    unionScopeSets(otherScopes) {\n        if (!otherScopes) {\n            throw createClientAuthError(emptyInputScopeSet);\n        }\n        const unionScopes = new Set(); // Iterator in constructor not supported in IE11\n        otherScopes.scopes.forEach((scope) => unionScopes.add(scope.toLowerCase()));\n        this.scopes.forEach((scope) => unionScopes.add(scope.toLowerCase()));\n        return unionScopes;\n    }\n    /**\n     * Check if scopes intersect between this set and another.\n     * @param otherScopes\n     */\n    intersectingScopeSets(otherScopes) {\n        if (!otherScopes) {\n            throw createClientAuthError(emptyInputScopeSet);\n        }\n        // Do not allow OIDC scopes to be the only intersecting scopes\n        if (!otherScopes.containsOnlyOIDCScopes()) {\n            otherScopes.removeOIDCScopes();\n        }\n        const unionScopes = this.unionScopeSets(otherScopes);\n        const sizeOtherScopes = otherScopes.getScopeCount();\n        const sizeThisScopes = this.getScopeCount();\n        const sizeUnionScopes = unionScopes.size;\n        return sizeUnionScopes < sizeThisScopes + sizeOtherScopes;\n    }\n    /**\n     * Returns size of set of scopes.\n     */\n    getScopeCount() {\n        return this.scopes.size;\n    }\n    /**\n     * Returns the scopes as an array of string values\n     */\n    asArray() {\n        const array = [];\n        this.scopes.forEach((val) => array.push(val));\n        return array;\n    }\n    /**\n     * Prints scopes into a space-delimited string\n     */\n    printScopes() {\n        if (this.scopes) {\n            const scopeArr = this.asArray();\n            return scopeArr.join(\" \");\n        }\n        return Constants.EMPTY_STRING;\n    }\n    /**\n     * Prints scopes into a space-delimited lower-case string (used for caching)\n     */\n    printScopesLowerCase() {\n        return this.printScopes().toLowerCase();\n    }\n}\n\nexport { ScopeSet };\n//# sourceMappingURL=ScopeSet.mjs.map\n","/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\nimport { createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { Separators, Constants } from '../utils/Constants.mjs';\nimport { clientInfoEmptyError, clientInfoDecodingError } from '../error/ClientAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Function to build a client info object from server clientInfo string\n * @param rawClientInfo\n * @param crypto\n */\nfunction buildClientInfo(rawClientInfo, crypto) {\n    if (!rawClientInfo) {\n        throw createClientAuthError(clientInfoEmptyError);\n    }\n    try {\n        const decodedClientInfo = crypto.base64Decode(rawClientInfo);\n        return JSON.parse(decodedClientInfo);\n    }\n    catch (e) {\n        throw createClientAuthError(clientInfoDecodingError);\n    }\n}\n/**\n * Function to build a client info object from cached homeAccountId string\n * @param homeAccountId\n */\nfunction buildClientInfoFromHomeAccountId(homeAccountId) {\n    if (!homeAccountId) {\n        throw createClientAuthError(clientInfoDecodingError);\n    }\n    const clientInfoParts = homeAccountId.split(Separators.CLIENT_INFO_SEPARATOR, 2);\n    return {\n        uid: clientInfoParts[0],\n        utid: clientInfoParts.length < 2\n            ? Constants.EMPTY_STRING\n            : clientInfoParts[1],\n    };\n}\n\nexport { buildClientInfo, buildClientInfoFromHomeAccountId };\n//# sourceMappingURL=ClientInfo.mjs.map\n","/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Authority types supported by MSAL.\n */\nconst AuthorityType = {\n    Default: 0,\n    Adfs: 1,\n    Dsts: 2,\n    Ciam: 3,\n};\n\nexport { AuthorityType };\n//# sourceMappingURL=AuthorityType.mjs.map\n","/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Protocol modes supported by MSAL.\n */\nconst ProtocolMode = {\n    AAD: \"AAD\",\n    OIDC: \"OIDC\",\n};\n\nexport { ProtocolMode };\n//# sourceMappingURL=ProtocolMode.mjs.map\n","/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\nimport { Separators, CacheAccountType, Constants } from '../../utils/Constants.mjs';\nimport { buildClientInfo } from '../../account/ClientInfo.mjs';\nimport { createClientAuthError } from '../../error/ClientAuthError.mjs';\nimport { AuthorityType } from '../../authority/AuthorityType.mjs';\nimport { ProtocolMode } from '../../authority/ProtocolMode.mjs';\nimport { invalidCacheEnvironment } from '../../error/ClientAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Type that defines required and optional parameters for an Account field (based on universal cache schema implemented by all MSALs).\n *\n * Key : Value Schema\n *\n * Key: <home_account_id>-<environment>-<realm*>\n *\n * Value Schema:\n * {\n *      homeAccountId: home account identifier for the auth scheme,\n *      environment: entity that issued the token, represented as a full host\n *      realm: Full tenant or organizational identifier that the account belongs to\n *      localAccountId: Original tenant-specific accountID, usually used for legacy cases\n *      username: primary username that represents the user, usually corresponds to preferred_username in the v2 endpt\n *      authorityType: Accounts authority type as a string\n *      name: Full name for the account, including given name and family name,\n *      lastModificationTime: last time this entity was modified in the cache\n *      lastModificationApp:\n *      idTokenClaims: Object containing claims parsed from ID token\n *      nativeAccountId: Account identifier on the native device\n * }\n * @internal\n */\nclass AccountEntity {\n    /**\n     * Generate Account Id key component as per the schema: <home_account_id>-<environment>\n     */\n    generateAccountId() {\n        const accountId = [this.homeAccountId, this.environment];\n        return accountId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n    }\n    /**\n     * Generate Account Cache Key as per the schema: <home_account_id>-<environment>-<realm*>\n     */\n    generateAccountKey() {\n        return AccountEntity.generateAccountCacheKey({\n            homeAccountId: this.homeAccountId,\n            environment: this.environment,\n            tenantId: this.realm,\n            username: this.username,\n            localAccountId: this.localAccountId,\n        });\n    }\n    /**\n     * Returns the AccountInfo interface for this account.\n     */\n    getAccountInfo() {\n        return {\n            homeAccountId: this.homeAccountId,\n            environment: this.environment,\n            tenantId: this.realm,\n            username: this.username,\n            localAccountId: this.localAccountId,\n            name: this.name,\n            idTokenClaims: this.idTokenClaims,\n            nativeAccountId: this.nativeAccountId,\n            authorityType: this.authorityType,\n        };\n    }\n    /**\n     * Generates account key from interface\n     * @param accountInterface\n     */\n    static generateAccountCacheKey(accountInterface) {\n        const accountKey = [\n            accountInterface.homeAccountId,\n            accountInterface.environment || Constants.EMPTY_STRING,\n            accountInterface.tenantId || Constants.EMPTY_STRING,\n        ];\n        return accountKey.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n    }\n    /**\n     * Build Account cache from IdToken, clientInfo and authority/policy. Associated with AAD.\n     * @param accountDetails\n     */\n    static createAccount(accountDetails, authority) {\n        const account = new AccountEntity();\n        if (authority.authorityType === AuthorityType.Adfs) {\n            account.authorityType = CacheAccountType.ADFS_ACCOUNT_TYPE;\n        }\n        else if (authority.protocolMode === ProtocolMode.AAD) {\n            account.authorityType = CacheAccountType.MSSTS_ACCOUNT_TYPE;\n        }\n        else {\n            account.authorityType = CacheAccountType.GENERIC_ACCOUNT_TYPE;\n        }\n        account.clientInfo = accountDetails.clientInfo;\n        account.homeAccountId = accountDetails.homeAccountId;\n        account.nativeAccountId = accountDetails.nativeAccountId;\n        const env = accountDetails.environment ||\n            (authority && authority.getPreferredCache());\n        if (!env) {\n            throw createClientAuthError(invalidCacheEnvironment);\n        }\n        account.environment = env;\n        // non AAD scenarios can have empty realm\n        account.realm =\n            accountDetails.idTokenClaims.tid || Constants.EMPTY_STRING;\n        // How do you account for MSA CID here?\n        account.localAccountId =\n            accountDetails.idTokenClaims.oid ||\n                accountDetails.idTokenClaims.sub ||\n                Constants.EMPTY_STRING;\n        /*\n         * In B2C scenarios the emails claim is used instead of preferred_username and it is an array.\n         * In most cases it will contain a single email. This field should not be relied upon if a custom\n         * policy is configured to return more than 1 email.\n         */\n        const preferredUsername = accountDetails.idTokenClaims.preferred_username ||\n            accountDetails.idTokenClaims.upn;\n        const email = accountDetails.idTokenClaims.emails\n            ? accountDetails.idTokenClaims.emails[0]\n            : null;\n        account.username = preferredUsername || email || Constants.EMPTY_STRING;\n        account.name = accountDetails.idTokenClaims.name;\n        account.cloudGraphHostName = accountDetails.cloudGraphHostName;\n        account.msGraphHost = accountDetails.msGraphHost;\n        return account;\n    }\n    /**\n     * Creates an AccountEntity object from AccountInfo\n     * @param accountInfo\n     * @param cloudGraphHostName\n     * @param msGraphHost\n     * @returns\n     */\n    static createFromAccountInfo(accountInfo, cloudGraphHostName, msGraphHost) {\n        const account = new AccountEntity();\n        account.authorityType =\n            accountInfo.authorityType || CacheAccountType.GENERIC_ACCOUNT_TYPE;\n        account.homeAccountId = accountInfo.homeAccountId;\n        account.localAccountId = accountInfo.localAccountId;\n        account.nativeAccountId = accountInfo.nativeAccountId;\n        account.realm = accountInfo.tenantId;\n        account.environment = accountInfo.environment;\n        account.username = accountInfo.username;\n        account.name = accountInfo.name;\n        account.cloudGraphHostName = cloudGraphHostName;\n        account.msGraphHost = msGraphHost;\n        return account;\n    }\n    /**\n     * Generate HomeAccountId from server response\n     * @param serverClientInfo\n     * @param authType\n     */\n    static generateHomeAccountId(serverClientInfo, authType, logger, cryptoObj, idTokenClaims) {\n        const accountId = idTokenClaims?.sub\n            ? idTokenClaims.sub\n            : Constants.EMPTY_STRING;\n        // since ADFS does not have tid and does not set client_info\n        if (authType === AuthorityType.Adfs ||\n            authType === AuthorityType.Dsts) {\n            return accountId;\n        }\n        // for cases where there is clientInfo\n        if (serverClientInfo) {\n            try {\n                const clientInfo = buildClientInfo(serverClientInfo, cryptoObj);\n                if (clientInfo.uid && clientInfo.utid) {\n                    return `${clientInfo.uid}${Separators.CLIENT_INFO_SEPARATOR}${clientInfo.utid}`;\n                }\n            }\n            catch (e) { }\n        }\n        // default to \"sub\" claim\n        logger.verbose(\"No client info in response\");\n        return accountId;\n    }\n    /**\n     * Validates an entity: checks for all expected params\n     * @param entity\n     */\n    static isAccountEntity(entity) {\n        if (!entity) {\n            return false;\n        }\n        return (entity.hasOwnProperty(\"homeAccountId\") &&\n            entity.hasOwnProperty(\"environment\") &&\n            entity.hasOwnProperty(\"realm\") &&\n            entity.hasOwnProperty(\"localAccountId\") &&\n            entity.hasOwnProperty(\"username\") &&\n            entity.hasOwnProperty(\"authorityType\"));\n    }\n    /**\n     * Helper function to determine whether 2 accountInfo objects represent the same account\n     * @param accountA\n     * @param accountB\n     * @param compareClaims - If set to true idTokenClaims will also be compared to determine account equality\n     */\n    static accountInfoIsEqual(accountA, accountB, compareClaims) {\n        if (!accountA || !accountB) {\n            return false;\n        }\n        let claimsMatch = true; // default to true so as to not fail comparison below if compareClaims: false\n        if (compareClaims) {\n            const accountAClaims = (accountA.idTokenClaims ||\n                {});\n            const accountBClaims = (accountB.idTokenClaims ||\n                {});\n            // issued at timestamp and nonce are expected to change each time a new id token is acquired\n            claimsMatch =\n                accountAClaims.iat === accountBClaims.iat &&\n                    accountAClaims.nonce === accountBClaims.nonce;\n        }\n        return (accountA.homeAccountId === accountB.homeAccountId &&\n            accountA.localAccountId === accountB.localAccountId &&\n            accountA.username === accountB.username &&\n            accountA.tenantId === accountB.tenantId &&\n            accountA.environment === accountB.environment &&\n            accountA.nativeAccountId === accountB.nativeAccountId &&\n            claimsMatch);\n    }\n}\n\nexport { AccountEntity };\n//# sourceMappingURL=AccountEntity.mjs.map\n","/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\nimport { createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { hashNotDeserialized } from '../error/ClientAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Parses hash string from given string. Returns empty string if no hash symbol is found.\n * @param hashString\n */\nfunction stripLeadingHashOrQuery(responseString) {\n    if (responseString.startsWith(\"#/\")) {\n        return responseString.substring(2);\n    }\n    else if (responseString.startsWith(\"#\") ||\n        responseString.startsWith(\"?\")) {\n        return responseString.substring(1);\n    }\n    return responseString;\n}\n/**\n * Returns URL hash as server auth code response object.\n */\nfunction getDeserializedResponse(responseString) {\n    // Check if given hash is empty\n    if (!responseString || responseString.indexOf(\"=\") < 0) {\n        return null;\n    }\n    try {\n        // Strip the # or ? symbol if present\n        const normalizedResponse = stripLeadingHashOrQuery(responseString);\n        // If # symbol was not present, above will return empty string, so give original hash value\n        const deserializedHash = Object.fromEntries(new URLSearchParams(normalizedResponse));\n        // Check for known response properties\n        if (deserializedHash.code ||\n            deserializedHash.error ||\n            deserializedHash.error_description ||\n            deserializedHash.state) {\n            return deserializedHash;\n        }\n    }\n    catch (e) {\n        throw createClientAuthError(hashNotDeserialized);\n    }\n    return null;\n}\n\nexport { getDeserializedResponse, stripLeadingHashOrQuery };\n//# sourceMappingURL=UrlUtils.mjs.map\n","/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\nimport { createClientConfigurationError } from '../error/ClientConfigurationError.mjs';\nimport { StringUtils } from '../utils/StringUtils.mjs';\nimport { AADAuthorityConstants, Constants } from '../utils/Constants.mjs';\nimport { getDeserializedResponse } from '../utils/UrlUtils.mjs';\nimport { urlEmptyError, urlParseError, authorityUriInsecure } from '../error/ClientConfigurationErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Url object class which can perform various transformations on url strings.\n */\nclass UrlString {\n    get urlString() {\n        return this._urlString;\n    }\n    constructor(url) {\n        this._urlString = url;\n        if (!this._urlString) {\n            // Throws error if url is empty\n            throw createClientConfigurationError(urlEmptyError);\n        }\n        if (!url.includes(\"#\")) {\n            this._urlString = UrlString.canonicalizeUri(url);\n        }\n    }\n    /**\n     * Ensure urls are lower case and end with a / character.\n     * @param url\n     */\n    static canonicalizeUri(url) {\n        if (url) {\n            let lowerCaseUrl = url.toLowerCase();\n            if (StringUtils.endsWith(lowerCaseUrl, \"?\")) {\n                lowerCaseUrl = lowerCaseUrl.slice(0, -1);\n            }\n            else if (StringUtils.endsWith(lowerCaseUrl, \"?/\")) {\n                lowerCaseUrl = lowerCaseUrl.slice(0, -2);\n            }\n            if (!StringUtils.endsWith(lowerCaseUrl, \"/\")) {\n                lowerCaseUrl += \"/\";\n            }\n            return lowerCaseUrl;\n        }\n        return url;\n    }\n    /**\n     * Throws if urlString passed is not a valid authority URI string.\n     */\n    validateAsUri() {\n        // Attempts to parse url for uri components\n        let components;\n        try {\n            components = this.getUrlComponents();\n        }\n        catch (e) {\n            throw createClientConfigurationError(urlParseError);\n        }\n        // Throw error if URI or path segments are not parseable.\n        if (!components.HostNameAndPort || !components.PathSegments) {\n            throw createClientConfigurationError(urlParseError);\n        }\n        // Throw error if uri is insecure.\n        if (!components.Protocol ||\n            components.Protocol.toLowerCase() !== \"https:\") {\n            throw createClientConfigurationError(authorityUriInsecure);\n        }\n    }\n    /**\n     * Given a url and a query string return the url with provided query string appended\n     * @param url\n     * @param queryString\n     */\n    static appendQueryString(url, queryString) {\n        if (!queryString) {\n            return url;\n        }\n        return url.indexOf(\"?\") < 0\n            ? `${url}?${queryString}`\n            : `${url}&${queryString}`;\n    }\n    /**\n     * Returns a url with the hash removed\n     * @param url\n     */\n    static removeHashFromUrl(url) {\n        return UrlString.canonicalizeUri(url.split(\"#\")[0]);\n    }\n    /**\n     * Given a url like https://a:b/common/d?e=f#g, and a tenantId, returns https://a:b/tenantId/d\n     * @param href The url\n     * @param tenantId The tenant id to replace\n     */\n    replaceTenantPath(tenantId) {\n        const urlObject = this.getUrlComponents();\n        const pathArray = urlObject.PathSegments;\n        if (tenantId &&\n            pathArray.length !== 0 &&\n            (pathArray[0] === AADAuthorityConstants.COMMON ||\n                pathArray[0] === AADAuthorityConstants.ORGANIZATIONS)) {\n            pathArray[0] = tenantId;\n        }\n        return UrlString.constructAuthorityUriFromObject(urlObject);\n    }\n    /**\n     * Parses out the components from a url string.\n     * @returns An object with the various components. Please cache this value insted of calling this multiple times on the same url.\n     */\n    getUrlComponents() {\n        // https://gist.github.com/curtisz/11139b2cfcaef4a261e0\n        const regEx = RegExp(\"^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\\\?([^#]*))?(#(.*))?\");\n        // If url string does not match regEx, we throw an error\n        const match = this.urlString.match(regEx);\n        if (!match) {\n            throw createClientConfigurationError(urlParseError);\n        }\n        // Url component object\n        const urlComponents = {\n            Protocol: match[1],\n            HostNameAndPort: match[4],\n            AbsolutePath: match[5],\n            QueryString: match[7],\n        };\n        let pathSegments = urlComponents.AbsolutePath.split(\"/\");\n        pathSegments = pathSegments.filter((val) => val && val.length > 0); // remove empty elements\n        urlComponents.PathSegments = pathSegments;\n        if (urlComponents.QueryString &&\n            urlComponents.QueryString.endsWith(\"/\")) {\n            urlComponents.QueryString = urlComponents.QueryString.substring(0, urlComponents.QueryString.length - 1);\n        }\n        return urlComponents;\n    }\n    static getDomainFromUrl(url) {\n        const regEx = RegExp(\"^([^:/?#]+://)?([^/?#]*)\");\n        const match = url.match(regEx);\n        if (!match) {\n            throw createClientConfigurationError(urlParseError);\n        }\n        return match[2];\n    }\n    static getAbsoluteUrl(relativeUrl, baseUrl) {\n        if (relativeUrl[0] === Constants.FORWARD_SLASH) {\n            const url = new UrlString(baseUrl);\n            const baseComponents = url.getUrlComponents();\n            return (baseComponents.Protocol +\n                \"//\" +\n                baseComponents.HostNameAndPort +\n                relativeUrl);\n        }\n        return relativeUrl;\n    }\n    static constructAuthorityUriFromObject(urlObject) {\n        return new UrlString(urlObject.Protocol +\n            \"//\" +\n            urlObject.HostNameAndPort +\n            \"/\" +\n            urlObject.PathSegments.join(\"/\"));\n    }\n    /**\n     * Check if the hash of the URL string contains known properties\n     * @deprecated This API will be removed in a future version\n     */\n    static hashContainsKnownProperties(response) {\n        return !!getDeserializedResponse(response);\n    }\n}\n\nexport { UrlString };\n//# sourceMappingURL=UrlString.mjs.map\n","/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\nimport { UrlString } from '../url/UrlString.mjs';\nimport { AuthorityMetadataSource } from '../utils/Constants.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nconst rawMetdataJSON = {\n    endpointMetadata: {\n        \"https://login.microsoftonline.com/common/\": {\n            token_endpoint: \"https://login.microsoftonline.com/common/oauth2/v2.0/token\",\n            token_endpoint_auth_methods_supported: [\n                \"client_secret_post\",\n                \"private_key_jwt\",\n                \"client_secret_basic\",\n            ],\n            jwks_uri: \"https://login.microsoftonline.com/common/discovery/v2.0/keys\",\n            response_modes_supported: [\"query\", \"fragment\", \"form_post\"],\n            subject_types_supported: [\"pairwise\"],\n            id_token_signing_alg_values_supported: [\"RS256\"],\n            response_types_supported: [\n                \"code\",\n                \"id_token\",\n                \"code id_token\",\n                \"id_token token\",\n            ],\n            scopes_supported: [\"openid\", \"profile\", \"email\", \"offline_access\"],\n            issuer: \"https://login.microsoftonline.com/{tenantid}/v2.0\",\n            request_uri_parameter_supported: false,\n            userinfo_endpoint: \"https://graph.microsoft.com/oidc/userinfo\",\n            authorization_endpoint: \"https://login.microsoftonline.com/common/oauth2/v2.0/authorize\",\n            device_authorization_endpoint: \"https://login.microsoftonline.com/common/oauth2/v2.0/devicecode\",\n            http_logout_supported: true,\n            frontchannel_logout_supported: true,\n            end_session_endpoint: \"https://login.microsoftonline.com/common/oauth2/v2.0/logout\",\n            claims_supported: [\n                \"sub\",\n                \"iss\",\n                \"cloud_instance_name\",\n                \"cloud_instance_host_name\",\n                \"cloud_graph_host_name\",\n                \"msgraph_host\",\n                \"aud\",\n                \"exp\",\n                \"iat\",\n                \"auth_time\",\n                \"acr\",\n                \"nonce\",\n                \"preferred_username\",\n                \"name\",\n                \"tid\",\n                \"ver\",\n                \"at_hash\",\n                \"c_hash\",\n                \"email\",\n            ],\n            kerberos_endpoint: \"https://login.microsoftonline.com/common/kerberos\",\n            tenant_region_scope: null,\n            cloud_instance_name: \"microsoftonline.com\",\n            cloud_graph_host_name: \"graph.windows.net\",\n            msgraph_host: \"graph.microsoft.com\",\n            rbac_url: \"https://pas.windows.net\",\n        },\n        \"https://login.chinacloudapi.cn/common/\": {\n            token_endpoint: \"https://login.chinacloudapi.cn/common/oauth2/v2.0/token\",\n            token_endpoint_auth_methods_supported: [\n                \"client_secret_post\",\n                \"private_key_jwt\",\n                \"client_secret_basic\",\n            ],\n            jwks_uri: \"https://login.chinacloudapi.cn/common/discovery/v2.0/keys\",\n            response_modes_supported: [\"query\", \"fragment\", \"form_post\"],\n            subject_types_supported: [\"pairwise\"],\n            id_token_signing_alg_values_supported: [\"RS256\"],\n            response_types_supported: [\n                \"code\",\n                \"id_token\",\n                \"code id_token\",\n                \"id_token token\",\n            ],\n            scopes_supported: [\"openid\", \"profile\", \"email\", \"offline_access\"],\n            issuer: \"https://login.partner.microsoftonline.cn/{tenantid}/v2.0\",\n            request_uri_parameter_supported: false,\n            userinfo_endpoint: \"https://microsoftgraph.chinacloudapi.cn/oidc/userinfo\",\n            authorization_endpoint: \"https://login.chinacloudapi.cn/common/oauth2/v2.0/authorize\",\n            device_authorization_endpoint: \"https://login.chinacloudapi.cn/common/oauth2/v2.0/devicecode\",\n            http_logout_supported: true,\n            frontchannel_logout_supported: true,\n            end_session_endpoint: \"https://login.chinacloudapi.cn/common/oauth2/v2.0/logout\",\n            claims_supported: [\n                \"sub\",\n                \"iss\",\n                \"cloud_instance_name\",\n                \"cloud_instance_host_name\",\n                \"cloud_graph_host_name\",\n                \"msgraph_host\",\n                \"aud\",\n                \"exp\",\n                \"iat\",\n                \"auth_time\",\n                \"acr\",\n                \"nonce\",\n                \"preferred_username\",\n                \"name\",\n                \"tid\",\n                \"ver\",\n                \"at_hash\",\n                \"c_hash\",\n                \"email\",\n            ],\n            kerberos_endpoint: \"https://login.chinacloudapi.cn/common/kerberos\",\n            tenant_region_scope: null,\n            cloud_instance_name: \"partner.microsoftonline.cn\",\n            cloud_graph_host_name: \"graph.chinacloudapi.cn\",\n            msgraph_host: \"microsoftgraph.chinacloudapi.cn\",\n            rbac_url: \"https://pas.chinacloudapi.cn\",\n        },\n        \"https://login.microsoftonline.us/common/\": {\n            token_endpoint: \"https://login.microsoftonline.us/common/oauth2/v2.0/token\",\n            token_endpoint_auth_methods_supported: [\n                \"client_secret_post\",\n                \"private_key_jwt\",\n                \"client_secret_basic\",\n            ],\n            jwks_uri: \"https://login.microsoftonline.us/common/discovery/v2.0/keys\",\n            response_modes_supported: [\"query\", \"fragment\", \"form_post\"],\n            subject_types_supported: [\"pairwise\"],\n            id_token_signing_alg_values_supported: [\"RS256\"],\n            response_types_supported: [\n                \"code\",\n                \"id_token\",\n                \"code id_token\",\n                \"id_token token\",\n            ],\n            scopes_supported: [\"openid\", \"profile\", \"email\", \"offline_access\"],\n            issuer: \"https://login.microsoftonline.us/{tenantid}/v2.0\",\n            request_uri_parameter_supported: false,\n            userinfo_endpoint: \"https://graph.microsoft.com/oidc/userinfo\",\n            authorization_endpoint: \"https://login.microsoftonline.us/common/oauth2/v2.0/authorize\",\n            device_authorization_endpoint: \"https://login.microsoftonline.us/common/oauth2/v2.0/devicecode\",\n            http_logout_supported: true,\n            frontchannel_logout_supported: true,\n            end_session_endpoint: \"https://login.microsoftonline.us/common/oauth2/v2.0/logout\",\n            claims_supported: [\n                \"sub\",\n                \"iss\",\n                \"cloud_instance_name\",\n                \"cloud_instance_host_name\",\n                \"cloud_graph_host_name\",\n                \"msgraph_host\",\n                \"aud\",\n                \"exp\",\n                \"iat\",\n                \"auth_time\",\n                \"acr\",\n                \"nonce\",\n                \"preferred_username\",\n                \"name\",\n                \"tid\",\n                \"ver\",\n                \"at_hash\",\n                \"c_hash\",\n                \"email\",\n            ],\n            kerberos_endpoint: \"https://login.microsoftonline.us/common/kerberos\",\n            tenant_region_scope: null,\n            cloud_instance_name: \"microsoftonline.us\",\n            cloud_graph_host_name: \"graph.windows.net\",\n            msgraph_host: \"graph.microsoft.com\",\n            rbac_url: \"https://pasff.usgovcloudapi.net\",\n        },\n        \"https://login.microsoftonline.com/consumers/\": {\n            token_endpoint: \"https://login.microsoftonline.com/consumers/oauth2/v2.0/token\",\n            token_endpoint_auth_methods_supported: [\n                \"client_secret_post\",\n                \"private_key_jwt\",\n                \"client_secret_basic\",\n            ],\n            jwks_uri: \"https://login.microsoftonline.com/consumers/discovery/v2.0/keys\",\n            response_modes_supported: [\"query\", \"fragment\", \"form_post\"],\n            subject_types_supported: [\"pairwise\"],\n            id_token_signing_alg_values_supported: [\"RS256\"],\n            response_types_supported: [\n                \"code\",\n                \"id_token\",\n                \"code id_token\",\n                \"id_token token\",\n            ],\n            scopes_supported: [\"openid\", \"profile\", \"email\", \"offline_access\"],\n            issuer: \"https://login.microsoftonline.com/9188040d-6c67-4c5b-b112-36a304b66dad/v2.0\",\n            request_uri_parameter_supported: false,\n            userinfo_endpoint: \"https://graph.microsoft.com/oidc/userinfo\",\n            authorization_endpoint: \"https://login.microsoftonline.com/consumers/oauth2/v2.0/authorize\",\n            device_authorization_endpoint: \"https://login.microsoftonline.com/consumers/oauth2/v2.0/devicecode\",\n            http_logout_supported: true,\n            frontchannel_logout_supported: true,\n            end_session_endpoint: \"https://login.microsoftonline.com/consumers/oauth2/v2.0/logout\",\n            claims_supported: [\n                \"sub\",\n                \"iss\",\n                \"cloud_instance_name\",\n                \"cloud_instance_host_name\",\n                \"cloud_graph_host_name\",\n                \"msgraph_host\",\n                \"aud\",\n                \"exp\",\n                \"iat\",\n                \"auth_time\",\n                \"acr\",\n                \"nonce\",\n                \"preferred_username\",\n                \"name\",\n                \"tid\",\n                \"ver\",\n                \"at_hash\",\n                \"c_hash\",\n                \"email\",\n            ],\n            kerberos_endpoint: \"https://login.microsoftonline.com/consumers/kerberos\",\n            tenant_region_scope: null,\n            cloud_instance_name: \"microsoftonline.com\",\n            cloud_graph_host_name: \"graph.windows.net\",\n            msgraph_host: \"graph.microsoft.com\",\n            rbac_url: \"https://pas.windows.net\",\n        },\n        \"https://login.chinacloudapi.cn/consumers/\": {\n            token_endpoint: \"https://login.chinacloudapi.cn/consumers/oauth2/v2.0/token\",\n            token_endpoint_auth_methods_supported: [\n                \"client_secret_post\",\n                \"private_key_jwt\",\n                \"client_secret_basic\",\n            ],\n            jwks_uri: \"https://login.chinacloudapi.cn/consumers/discovery/v2.0/keys\",\n            response_modes_supported: [\"query\", \"fragment\", \"form_post\"],\n            subject_types_supported: [\"pairwise\"],\n            id_token_signing_alg_values_supported: [\"RS256\"],\n            response_types_supported: [\n                \"code\",\n                \"id_token\",\n                \"code id_token\",\n                \"id_token token\",\n            ],\n            scopes_supported: [\"openid\", \"profile\", \"email\", \"offline_access\"],\n            issuer: \"https://login.partner.microsoftonline.cn/9188040d-6c67-4c5b-b112-36a304b66dad/v2.0\",\n            request_uri_parameter_supported: false,\n            userinfo_endpoint: \"https://microsoftgraph.chinacloudapi.cn/oidc/userinfo\",\n            authorization_endpoint: \"https://login.chinacloudapi.cn/consumers/oauth2/v2.0/authorize\",\n            device_authorization_endpoint: \"https://login.chinacloudapi.cn/consumers/oauth2/v2.0/devicecode\",\n            http_logout_supported: true,\n            frontchannel_logout_supported: true,\n            end_session_endpoint: \"https://login.chinacloudapi.cn/consumers/oauth2/v2.0/logout\",\n            claims_supported: [\n                \"sub\",\n                \"iss\",\n                \"cloud_instance_name\",\n                \"cloud_instance_host_name\",\n                \"cloud_graph_host_name\",\n                \"msgraph_host\",\n                \"aud\",\n                \"exp\",\n                \"iat\",\n                \"auth_time\",\n                \"acr\",\n                \"nonce\",\n                \"preferred_username\",\n                \"name\",\n                \"tid\",\n                \"ver\",\n                \"at_hash\",\n                \"c_hash\",\n                \"email\",\n            ],\n            kerberos_endpoint: \"https://login.chinacloudapi.cn/consumers/kerberos\",\n            tenant_region_scope: null,\n            cloud_instance_name: \"partner.microsoftonline.cn\",\n            cloud_graph_host_name: \"graph.chinacloudapi.cn\",\n            msgraph_host: \"microsoftgraph.chinacloudapi.cn\",\n            rbac_url: \"https://pas.chinacloudapi.cn\",\n        },\n        \"https://login.microsoftonline.us/consumers/\": {\n            token_endpoint: \"https://login.microsoftonline.us/consumers/oauth2/v2.0/token\",\n            token_endpoint_auth_methods_supported: [\n                \"client_secret_post\",\n                \"private_key_jwt\",\n                \"client_secret_basic\",\n            ],\n            jwks_uri: \"https://login.microsoftonline.us/consumers/discovery/v2.0/keys\",\n            response_modes_supported: [\"query\", \"fragment\", \"form_post\"],\n            subject_types_supported: [\"pairwise\"],\n            id_token_signing_alg_values_supported: [\"RS256\"],\n            response_types_supported: [\n                \"code\",\n                \"id_token\",\n                \"code id_token\",\n                \"id_token token\",\n            ],\n            scopes_supported: [\"openid\", \"profile\", \"email\", \"offline_access\"],\n            issuer: \"https://login.microsoftonline.us/9188040d-6c67-4c5b-b112-36a304b66dad/v2.0\",\n            request_uri_parameter_supported: false,\n            userinfo_endpoint: \"https://graph.microsoft.com/oidc/userinfo\",\n            authorization_endpoint: \"https://login.microsoftonline.us/consumers/oauth2/v2.0/authorize\",\n            device_authorization_endpoint: \"https://login.microsoftonline.us/consumers/oauth2/v2.0/devicecode\",\n            http_logout_supported: true,\n            frontchannel_logout_supported: true,\n            end_session_endpoint: \"https://login.microsoftonline.us/consumers/oauth2/v2.0/logout\",\n            claims_supported: [\n                \"sub\",\n                \"iss\",\n                \"cloud_instance_name\",\n                \"cloud_instance_host_name\",\n                \"cloud_graph_host_name\",\n                \"msgraph_host\",\n                \"aud\",\n                \"exp\",\n                \"iat\",\n                \"auth_time\",\n                \"acr\",\n                \"nonce\",\n                \"preferred_username\",\n                \"name\",\n                \"tid\",\n                \"ver\",\n                \"at_hash\",\n                \"c_hash\",\n                \"email\",\n            ],\n            kerberos_endpoint: \"https://login.microsoftonline.us/consumers/kerberos\",\n            tenant_region_scope: null,\n            cloud_instance_name: \"microsoftonline.us\",\n            cloud_graph_host_name: \"graph.windows.net\",\n            msgraph_host: \"graph.microsoft.com\",\n            rbac_url: \"https://pasff.usgovcloudapi.net\",\n        },\n        \"https://login.microsoftonline.com/organizations/\": {\n            token_endpoint: \"https://login.microsoftonline.com/organizations/oauth2/v2.0/token\",\n            token_endpoint_auth_methods_supported: [\n                \"client_secret_post\",\n                \"private_key_jwt\",\n                \"client_secret_basic\",\n            ],\n            jwks_uri: \"https://login.microsoftonline.com/organizations/discovery/v2.0/keys\",\n            response_modes_supported: [\"query\", \"fragment\", \"form_post\"],\n            subject_types_supported: [\"pairwise\"],\n            id_token_signing_alg_values_supported: [\"RS256\"],\n            response_types_supported: [\n                \"code\",\n                \"id_token\",\n                \"code id_token\",\n                \"id_token token\",\n            ],\n            scopes_supported: [\"openid\", \"profile\", \"email\", \"offline_access\"],\n            issuer: \"https://login.microsoftonline.com/{tenantid}/v2.0\",\n            request_uri_parameter_supported: false,\n            userinfo_endpoint: \"https://graph.microsoft.com/oidc/userinfo\",\n            authorization_endpoint: \"https://login.microsoftonline.com/organizations/oauth2/v2.0/authorize\",\n            device_authorization_endpoint: \"https://login.microsoftonline.com/organizations/oauth2/v2.0/devicecode\",\n            http_logout_supported: true,\n            frontchannel_logout_supported: true,\n            end_session_endpoint: \"https://login.microsoftonline.com/organizations/oauth2/v2.0/logout\",\n            claims_supported: [\n                \"sub\",\n                \"iss\",\n                \"cloud_instance_name\",\n                \"cloud_instance_host_name\",\n                \"cloud_graph_host_name\",\n                \"msgraph_host\",\n                \"aud\",\n                \"exp\",\n                \"iat\",\n                \"auth_time\",\n                \"acr\",\n                \"nonce\",\n                \"preferred_username\",\n                \"name\",\n                \"tid\",\n                \"ver\",\n                \"at_hash\",\n                \"c_hash\",\n                \"email\",\n            ],\n            kerberos_endpoint: \"https://login.microsoftonline.com/organizations/kerberos\",\n            tenant_region_scope: null,\n            cloud_instance_name: \"microsoftonline.com\",\n            cloud_graph_host_name: \"graph.windows.net\",\n            msgraph_host: \"graph.microsoft.com\",\n            rbac_url: \"https://pas.windows.net\",\n        },\n        \"https://login.chinacloudapi.cn/organizations/\": {\n            token_endpoint: \"https://login.chinacloudapi.cn/organizations/oauth2/v2.0/token\",\n            token_endpoint_auth_methods_supported: [\n                \"client_secret_post\",\n                \"private_key_jwt\",\n                \"client_secret_basic\",\n            ],\n            jwks_uri: \"https://login.chinacloudapi.cn/organizations/discovery/v2.0/keys\",\n            response_modes_supported: [\"query\", \"fragment\", \"form_post\"],\n            subject_types_supported: [\"pairwise\"],\n            id_token_signing_alg_values_supported: [\"RS256\"],\n            response_types_supported: [\n                \"code\",\n                \"id_token\",\n                \"code id_token\",\n                \"id_token token\",\n            ],\n            scopes_supported: [\"openid\", \"profile\", \"email\", \"offline_access\"],\n            issuer: \"https://login.partner.microsoftonline.cn/{tenantid}/v2.0\",\n            request_uri_parameter_supported: false,\n            userinfo_endpoint: \"https://microsoftgraph.chinacloudapi.cn/oidc/userinfo\",\n            authorization_endpoint: \"https://login.chinacloudapi.cn/organizations/oauth2/v2.0/authorize\",\n            device_authorization_endpoint: \"https://login.chinacloudapi.cn/organizations/oauth2/v2.0/devicecode\",\n            http_logout_supported: true,\n            frontchannel_logout_supported: true,\n            end_session_endpoint: \"https://login.chinacloudapi.cn/organizations/oauth2/v2.0/logout\",\n            claims_supported: [\n                \"sub\",\n                \"iss\",\n                \"cloud_instance_name\",\n                \"cloud_instance_host_name\",\n                \"cloud_graph_host_name\",\n                \"msgraph_host\",\n                \"aud\",\n                \"exp\",\n                \"iat\",\n                \"auth_time\",\n                \"acr\",\n                \"nonce\",\n                \"preferred_username\",\n                \"name\",\n                \"tid\",\n                \"ver\",\n                \"at_hash\",\n                \"c_hash\",\n                \"email\",\n            ],\n            kerberos_endpoint: \"https://login.chinacloudapi.cn/organizations/kerberos\",\n            tenant_region_scope: null,\n            cloud_instance_name: \"partner.microsoftonline.cn\",\n            cloud_graph_host_name: \"graph.chinacloudapi.cn\",\n            msgraph_host: \"microsoftgraph.chinacloudapi.cn\",\n            rbac_url: \"https://pas.chinacloudapi.cn\",\n        },\n        \"https://login.microsoftonline.us/organizations/\": {\n            token_endpoint: \"https://login.microsoftonline.us/organizations/oauth2/v2.0/token\",\n            token_endpoint_auth_methods_supported: [\n                \"client_secret_post\",\n                \"private_key_jwt\",\n                \"client_secret_basic\",\n            ],\n            jwks_uri: \"https://login.microsoftonline.us/organizations/discovery/v2.0/keys\",\n            response_modes_supported: [\"query\", \"fragment\", \"form_post\"],\n            subject_types_supported: [\"pairwise\"],\n            id_token_signing_alg_values_supported: [\"RS256\"],\n            response_types_supported: [\n                \"code\",\n                \"id_token\",\n                \"code id_token\",\n                \"id_token token\",\n            ],\n            scopes_supported: [\"openid\", \"profile\", \"email\", \"offline_access\"],\n            issuer: \"https://login.microsoftonline.us/{tenantid}/v2.0\",\n            request_uri_parameter_supported: false,\n            userinfo_endpoint: \"https://graph.microsoft.com/oidc/userinfo\",\n            authorization_endpoint: \"https://login.microsoftonline.us/organizations/oauth2/v2.0/authorize\",\n            device_authorization_endpoint: \"https://login.microsoftonline.us/organizations/oauth2/v2.0/devicecode\",\n            http_logout_supported: true,\n            frontchannel_logout_supported: true,\n            end_session_endpoint: \"https://login.microsoftonline.us/organizations/oauth2/v2.0/logout\",\n            claims_supported: [\n                \"sub\",\n                \"iss\",\n                \"cloud_instance_name\",\n                \"cloud_instance_host_name\",\n                \"cloud_graph_host_name\",\n                \"msgraph_host\",\n                \"aud\",\n                \"exp\",\n                \"iat\",\n                \"auth_time\",\n                \"acr\",\n                \"nonce\",\n                \"preferred_username\",\n                \"name\",\n                \"tid\",\n                \"ver\",\n                \"at_hash\",\n                \"c_hash\",\n                \"email\",\n            ],\n            kerberos_endpoint: \"https://login.microsoftonline.us/organizations/kerberos\",\n            tenant_region_scope: null,\n            cloud_instance_name: \"microsoftonline.us\",\n            cloud_graph_host_name: \"graph.windows.net\",\n            msgraph_host: \"graph.microsoft.com\",\n            rbac_url: \"https://pasff.usgovcloudapi.net\",\n        },\n    },\n    instanceDiscoveryMetadata: {\n        tenant_discovery_endpoint: \"https://{canonicalAuthority}/v2.0/.well-known/openid-configuration\",\n        \"api-version\": \"1.1\",\n        metadata: [\n            {\n                preferred_network: \"login.microsoftonline.com\",\n                preferred_cache: \"login.windows.net\",\n                aliases: [\n                    \"login.microsoftonline.com\",\n                    \"login.windows.net\",\n                    \"login.microsoft.com\",\n                    \"sts.windows.net\",\n                ],\n            },\n            {\n                preferred_network: \"login.partner.microsoftonline.cn\",\n                preferred_cache: \"login.partner.microsoftonline.cn\",\n                aliases: [\n                    \"login.partner.microsoftonline.cn\",\n                    \"login.chinacloudapi.cn\",\n                ],\n            },\n            {\n                preferred_network: \"login.microsoftonline.de\",\n                preferred_cache: \"login.microsoftonline.de\",\n                aliases: [\"login.microsoftonline.de\"],\n            },\n            {\n                preferred_network: \"login.microsoftonline.us\",\n                preferred_cache: \"login.microsoftonline.us\",\n                aliases: [\n                    \"login.microsoftonline.us\",\n                    \"login.usgovcloudapi.net\",\n                ],\n            },\n            {\n                preferred_network: \"login-us.microsoftonline.com\",\n                preferred_cache: \"login-us.microsoftonline.com\",\n                aliases: [\"login-us.microsoftonline.com\"],\n            },\n        ],\n    },\n};\nconst EndpointMetadata = rawMetdataJSON.endpointMetadata;\nconst InstanceDiscoveryMetadata = rawMetdataJSON.instanceDiscoveryMetadata;\nconst InstanceDiscoveryMetadataAliases = new Set();\nInstanceDiscoveryMetadata.metadata.forEach((metadataEntry) => {\n    metadataEntry.aliases.forEach((alias) => {\n        InstanceDiscoveryMetadataAliases.add(alias);\n    });\n});\n/**\n * Attempts to get an aliases array from the static authority metadata sources based on the canonical authority host\n * @param staticAuthorityOptions\n * @param logger\n * @returns\n */\nfunction getAliasesFromStaticSources(staticAuthorityOptions, logger) {\n    let staticAliases;\n    const canonicalAuthority = staticAuthorityOptions.canonicalAuthority;\n    if (canonicalAuthority) {\n        const authorityHost = new UrlString(canonicalAuthority).getUrlComponents().HostNameAndPort;\n        staticAliases =\n            getAliasesFromMetadata(authorityHost, staticAuthorityOptions.cloudDiscoveryMetadata?.metadata, AuthorityMetadataSource.CONFIG, logger) ||\n                getAliasesFromMetadata(authorityHost, InstanceDiscoveryMetadata.metadata, AuthorityMetadataSource.HARDCODED_VALUES, logger) ||\n                staticAuthorityOptions.knownAuthorities;\n    }\n    return staticAliases || [];\n}\n/**\n * Returns aliases for from the raw cloud discovery metadata passed in\n * @param authorityHost\n * @param rawCloudDiscoveryMetadata\n * @returns\n */\nfunction getAliasesFromMetadata(authorityHost, cloudDiscoveryMetadata, source, logger) {\n    logger?.trace(`getAliasesFromMetadata called with source: ${source}`);\n    if (authorityHost && cloudDiscoveryMetadata) {\n        const metadata = getCloudDiscoveryMetadataFromNetworkResponse(cloudDiscoveryMetadata, authorityHost);\n        if (metadata) {\n            logger?.trace(`getAliasesFromMetadata: found cloud discovery metadata in ${source}, returning aliases`);\n            return metadata.aliases;\n        }\n        else {\n            logger?.trace(`getAliasesFromMetadata: did not find cloud discovery metadata in ${source}`);\n        }\n    }\n    return null;\n}\n/**\n * Get cloud discovery metadata for common authorities\n */\nfunction getCloudDiscoveryMetadataFromHardcodedValues(authorityHost) {\n    const metadata = getCloudDiscoveryMetadataFromNetworkResponse(InstanceDiscoveryMetadata.metadata, authorityHost);\n    return metadata;\n}\n/**\n * Searches instance discovery network response for the entry that contains the host in the aliases list\n * @param response\n * @param authority\n */\nfunction getCloudDiscoveryMetadataFromNetworkResponse(response, authorityHost) {\n    for (let i = 0; i < response.length; i++) {\n        const metadata = response[i];\n        if (metadata.aliases.includes(authorityHost)) {\n            return metadata;\n        }\n    }\n    return null;\n}\n\nexport { EndpointMetadata, InstanceDiscoveryMetadata, InstanceDiscoveryMetadataAliases, getAliasesFromMetadata, getAliasesFromStaticSources, getCloudDiscoveryMetadataFromHardcodedValues, getCloudDiscoveryMetadataFromNetworkResponse, rawMetdataJSON };\n//# sourceMappingURL=AuthorityMetadata.mjs.map\n","/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\nimport { Separators, CredentialType, AuthenticationScheme, THE_FAMILY_ID, APP_METADATA, AUTHORITY_METADATA_CONSTANTS } from '../utils/Constants.mjs';\nimport { generateCredentialKey } from './utils/CacheHelpers.mjs';\nimport { ScopeSet } from '../request/ScopeSet.mjs';\nimport { AccountEntity } from './entities/AccountEntity.mjs';\nimport { createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { extractTokenClaims } from '../account/AuthToken.mjs';\nimport { name, version } from '../packageMetadata.mjs';\nimport { getAliasesFromStaticSources } from '../authority/AuthorityMetadata.mjs';\nimport { invalidCacheRecord, bindingKeyNotRemoved, multipleMatchingAppMetadata, methodNotImplemented } from '../error/ClientAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Interface class which implement cache storage functions used by MSAL to perform validity checks, and store tokens.\n * @internal\n */\nclass CacheManager {\n    constructor(clientId, cryptoImpl, logger, staticAuthorityOptions) {\n        this.clientId = clientId;\n        this.cryptoImpl = cryptoImpl;\n        this.commonLogger = logger.clone(name, version);\n        this.staticAuthorityOptions = staticAuthorityOptions;\n    }\n    /**\n     * Returns all the accounts in the cache that match the optional filter. If no filter is provided, all accounts are returned.\n     * @param accountFilter - (Optional) filter to narrow down the accounts returned\n     * @returns Array of AccountInfo objects in cache\n     */\n    getAllAccounts(accountFilter) {\n        const validAccounts = [];\n        this.getAccountsFilteredBy(accountFilter || {}).forEach((accountEntity) => {\n            const accountInfo = this.getAccountInfoFromEntity(accountEntity, accountFilter);\n            if (accountInfo) {\n                validAccounts.push(accountInfo);\n            }\n        });\n        return validAccounts;\n    }\n    /**\n     * Gets accountInfo object based on provided filters\n     */\n    getAccountInfoFilteredBy(accountFilter) {\n        const allAccounts = this.getAllAccounts(accountFilter);\n        if (allAccounts.length > 1) {\n            // If one or more accounts are found, further filter to the first account that has an ID token\n            return allAccounts.filter((account) => {\n                return !!account.idTokenClaims;\n            })[0];\n        }\n        else if (allAccounts.length === 1) {\n            // If only one account is found, return it regardless of whether a matching ID token was found\n            return allAccounts[0];\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * Returns a single matching\n     * @param accountFilter\n     * @returns\n     */\n    getBaseAccountInfo(accountFilter) {\n        const accountEntities = this.getAccountsFilteredBy(accountFilter);\n        if (accountEntities.length > 0) {\n            return accountEntities[0].getAccountInfo();\n        }\n        else {\n            return null;\n        }\n    }\n    getAccountInfoFromEntity(accountEntity, accountFilter) {\n        const accountInfo = accountEntity.getAccountInfo();\n        const idToken = this.getIdToken(accountInfo);\n        if (idToken) {\n            const idTokenClaims = extractTokenClaims(idToken.secret, this.cryptoImpl.base64Decode);\n            if (this.idTokenClaimsMatchAccountFilter(idTokenClaims, accountFilter)) {\n                accountInfo.idToken = idToken.secret;\n                accountInfo.idTokenClaims = idTokenClaims;\n                return accountInfo;\n            }\n        }\n        return accountInfo;\n    }\n    idTokenClaimsMatchAccountFilter(idTokenClaims, accountFilter) {\n        if (accountFilter) {\n            if (!!accountFilter.loginHint &&\n                !this.matchLoginHint(idTokenClaims, accountFilter.loginHint)) {\n                return false;\n            }\n            if (!!accountFilter.sid &&\n                !this.matchSid(idTokenClaims, accountFilter.sid)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * saves a cache record\n     * @param cacheRecord\n     */\n    async saveCacheRecord(cacheRecord, storeInCache) {\n        if (!cacheRecord) {\n            throw createClientAuthError(invalidCacheRecord);\n        }\n        if (!!cacheRecord.account) {\n            this.setAccount(cacheRecord.account);\n        }\n        if (!!cacheRecord.idToken && storeInCache?.idToken !== false) {\n            this.setIdTokenCredential(cacheRecord.idToken);\n        }\n        if (!!cacheRecord.accessToken && storeInCache?.accessToken !== false) {\n            await this.saveAccessToken(cacheRecord.accessToken);\n        }\n        if (!!cacheRecord.refreshToken &&\n            storeInCache?.refreshToken !== false) {\n            this.setRefreshTokenCredential(cacheRecord.refreshToken);\n        }\n        if (!!cacheRecord.appMetadata) {\n            this.setAppMetadata(cacheRecord.appMetadata);\n        }\n    }\n    /**\n     * saves access token credential\n     * @param credential\n     */\n    async saveAccessToken(credential) {\n        const accessTokenFilter = {\n            clientId: credential.clientId,\n            credentialType: credential.credentialType,\n            environment: credential.environment,\n            homeAccountId: credential.homeAccountId,\n            realm: credential.realm,\n            tokenType: credential.tokenType,\n            requestedClaimsHash: credential.requestedClaimsHash,\n        };\n        const tokenKeys = this.getTokenKeys();\n        const currentScopes = ScopeSet.fromString(credential.target);\n        const removedAccessTokens = [];\n        tokenKeys.accessToken.forEach((key) => {\n            if (!this.accessTokenKeyMatchesFilter(key, accessTokenFilter, false)) {\n                return;\n            }\n            const tokenEntity = this.getAccessTokenCredential(key);\n            if (tokenEntity &&\n                this.credentialMatchesFilter(tokenEntity, accessTokenFilter)) {\n                const tokenScopeSet = ScopeSet.fromString(tokenEntity.target);\n                if (tokenScopeSet.intersectingScopeSets(currentScopes)) {\n                    removedAccessTokens.push(this.removeAccessToken(key));\n                }\n            }\n        });\n        await Promise.all(removedAccessTokens);\n        this.setAccessTokenCredential(credential);\n    }\n    /**\n     * Retrieve accounts matching all provided filters; if no filter is set, get all accounts\n     * Not checking for casing as keys are all generated in lower case, remember to convert to lower case if object properties are compared\n     * @param accountFilter - An object containing Account properties to filter by\n     */\n    getAccountsFilteredBy(accountFilter) {\n        const allAccountKeys = this.getAccountKeys();\n        const matchingAccounts = [];\n        allAccountKeys.forEach((cacheKey) => {\n            if (!this.isAccountKey(cacheKey, accountFilter.homeAccountId, accountFilter.tenantId)) {\n                // Don't parse value if the key doesn't match the account filters\n                return;\n            }\n            const entity = this.getAccount(cacheKey);\n            if (!entity) {\n                return;\n            }\n            if (!!accountFilter.homeAccountId &&\n                !this.matchHomeAccountId(entity, accountFilter.homeAccountId)) {\n                return;\n            }\n            if (!!accountFilter.localAccountId &&\n                !this.matchLocalAccountId(entity, accountFilter.localAccountId)) {\n                return;\n            }\n            if (!!accountFilter.username &&\n                !this.matchUsername(entity, accountFilter.username)) {\n                return;\n            }\n            if (!!accountFilter.environment &&\n                !this.matchEnvironment(entity, accountFilter.environment)) {\n                return;\n            }\n            if (!!accountFilter.realm &&\n                !this.matchRealm(entity, accountFilter.realm)) {\n                return;\n            }\n            // tenantId is another name for realm\n            if (!!accountFilter.tenantId &&\n                !this.matchRealm(entity, accountFilter.tenantId)) {\n                return;\n            }\n            if (!!accountFilter.nativeAccountId &&\n                !this.matchNativeAccountId(entity, accountFilter.nativeAccountId)) {\n                return;\n            }\n            if (!!accountFilter.authorityType &&\n                !this.matchAuthorityType(entity, accountFilter.authorityType)) {\n                return;\n            }\n            if (!!accountFilter.name &&\n                !this.matchName(entity, accountFilter.name)) {\n                return;\n            }\n            matchingAccounts.push(entity);\n        });\n        return matchingAccounts;\n    }\n    /**\n     * Returns true if the given key matches our account key schema. Also matches homeAccountId and/or tenantId if provided\n     * @param key\n     * @param homeAccountId\n     * @param tenantId\n     * @returns\n     */\n    isAccountKey(key, homeAccountId, tenantId) {\n        if (key.split(Separators.CACHE_KEY_SEPARATOR).length < 3) {\n            // Account cache keys contain 3 items separated by '-' (each item may also contain '-')\n            return false;\n        }\n        if (homeAccountId &&\n            !key.toLowerCase().includes(homeAccountId.toLowerCase())) {\n            return false;\n        }\n        if (tenantId && !key.toLowerCase().includes(tenantId.toLowerCase())) {\n            return false;\n        }\n        // Do not check environment as aliasing can cause false negatives\n        return true;\n    }\n    /**\n     * Returns true if the given key matches our credential key schema.\n     * @param key\n     */\n    isCredentialKey(key) {\n        if (key.split(Separators.CACHE_KEY_SEPARATOR).length < 6) {\n            // Credential cache keys contain 6 items separated by '-' (each item may also contain '-')\n            return false;\n        }\n        const lowerCaseKey = key.toLowerCase();\n        // Credential keys must indicate what credential type they represent\n        if (lowerCaseKey.indexOf(CredentialType.ID_TOKEN.toLowerCase()) ===\n            -1 &&\n            lowerCaseKey.indexOf(CredentialType.ACCESS_TOKEN.toLowerCase()) ===\n                -1 &&\n            lowerCaseKey.indexOf(CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME.toLowerCase()) === -1 &&\n            lowerCaseKey.indexOf(CredentialType.REFRESH_TOKEN.toLowerCase()) ===\n                -1) {\n            return false;\n        }\n        if (lowerCaseKey.indexOf(CredentialType.REFRESH_TOKEN.toLowerCase()) >\n            -1) {\n            // Refresh tokens must contain the client id or family id\n            const clientIdValidation = `${CredentialType.REFRESH_TOKEN}${Separators.CACHE_KEY_SEPARATOR}${this.clientId}${Separators.CACHE_KEY_SEPARATOR}`;\n            const familyIdValidation = `${CredentialType.REFRESH_TOKEN}${Separators.CACHE_KEY_SEPARATOR}${THE_FAMILY_ID}${Separators.CACHE_KEY_SEPARATOR}`;\n            if (lowerCaseKey.indexOf(clientIdValidation.toLowerCase()) === -1 &&\n                lowerCaseKey.indexOf(familyIdValidation.toLowerCase()) === -1) {\n                return false;\n            }\n        }\n        else if (lowerCaseKey.indexOf(this.clientId.toLowerCase()) === -1) {\n            // Tokens must contain the clientId\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Returns whether or not the given credential entity matches the filter\n     * @param entity\n     * @param filter\n     * @returns\n     */\n    credentialMatchesFilter(entity, filter) {\n        if (!!filter.clientId && !this.matchClientId(entity, filter.clientId)) {\n            return false;\n        }\n        if (!!filter.userAssertionHash &&\n            !this.matchUserAssertionHash(entity, filter.userAssertionHash)) {\n            return false;\n        }\n        /*\n         * homeAccountId can be undefined, and we want to filter out cached items that have a homeAccountId of \"\"\n         * because we don't want a client_credential request to return a cached token that has a homeAccountId\n         */\n        if (typeof filter.homeAccountId === \"string\" &&\n            !this.matchHomeAccountId(entity, filter.homeAccountId)) {\n            return false;\n        }\n        if (!!filter.environment &&\n            !this.matchEnvironment(entity, filter.environment)) {\n            return false;\n        }\n        if (!!filter.realm && !this.matchRealm(entity, filter.realm)) {\n            return false;\n        }\n        if (!!filter.credentialType &&\n            !this.matchCredentialType(entity, filter.credentialType)) {\n            return false;\n        }\n        if (!!filter.familyId && !this.matchFamilyId(entity, filter.familyId)) {\n            return false;\n        }\n        /*\n         * idTokens do not have \"target\", target specific refreshTokens do exist for some types of authentication\n         * Resource specific refresh tokens case will be added when the support is deemed necessary\n         */\n        if (!!filter.target && !this.matchTarget(entity, filter.target)) {\n            return false;\n        }\n        // If request OR cached entity has requested Claims Hash, check if they match\n        if (filter.requestedClaimsHash || entity.requestedClaimsHash) {\n            // Don't match if either is undefined or they are different\n            if (entity.requestedClaimsHash !== filter.requestedClaimsHash) {\n                return false;\n            }\n        }\n        // Access Token with Auth Scheme specific matching\n        if (entity.credentialType ===\n            CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME) {\n            if (!!filter.tokenType &&\n                !this.matchTokenType(entity, filter.tokenType)) {\n                return false;\n            }\n            // KeyId (sshKid) in request must match cached SSH certificate keyId because SSH cert is bound to a specific key\n            if (filter.tokenType === AuthenticationScheme.SSH) {\n                if (filter.keyId && !this.matchKeyId(entity, filter.keyId)) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    /**\n     * retrieve appMetadata matching all provided filters; if no filter is set, get all appMetadata\n     * @param filter\n     */\n    getAppMetadataFilteredBy(filter) {\n        return this.getAppMetadataFilteredByInternal(filter.environment, filter.clientId);\n    }\n    /**\n     * Support function to help match appMetadata\n     * @param environment\n     * @param clientId\n     */\n    getAppMetadataFilteredByInternal(environment, clientId) {\n        const allCacheKeys = this.getKeys();\n        const matchingAppMetadata = {};\n        allCacheKeys.forEach((cacheKey) => {\n            // don't parse any non-appMetadata type cache entities\n            if (!this.isAppMetadata(cacheKey)) {\n                return;\n            }\n            // Attempt retrieval\n            const entity = this.getAppMetadata(cacheKey);\n            if (!entity) {\n                return;\n            }\n            if (!!environment && !this.matchEnvironment(entity, environment)) {\n                return;\n            }\n            if (!!clientId && !this.matchClientId(entity, clientId)) {\n                return;\n            }\n            matchingAppMetadata[cacheKey] = entity;\n        });\n        return matchingAppMetadata;\n    }\n    /**\n     * retrieve authorityMetadata that contains a matching alias\n     * @param filter\n     */\n    getAuthorityMetadataByAlias(host) {\n        const allCacheKeys = this.getAuthorityMetadataKeys();\n        let matchedEntity = null;\n        allCacheKeys.forEach((cacheKey) => {\n            // don't parse any non-authorityMetadata type cache entities\n            if (!this.isAuthorityMetadata(cacheKey) ||\n                cacheKey.indexOf(this.clientId) === -1) {\n                return;\n            }\n            // Attempt retrieval\n            const entity = this.getAuthorityMetadata(cacheKey);\n            if (!entity) {\n                return;\n            }\n            if (entity.aliases.indexOf(host) === -1) {\n                return;\n            }\n            matchedEntity = entity;\n        });\n        return matchedEntity;\n    }\n    /**\n     * Removes all accounts and related tokens from cache.\n     */\n    async removeAllAccounts() {\n        const allAccountKeys = this.getAccountKeys();\n        const removedAccounts = [];\n        allAccountKeys.forEach((cacheKey) => {\n            removedAccounts.push(this.removeAccount(cacheKey));\n        });\n        await Promise.all(removedAccounts);\n    }\n    /**\n     * Removes the account and related tokens for a given account key\n     * @param account\n     */\n    async removeAccount(accountKey) {\n        const account = this.getAccount(accountKey);\n        if (!account) {\n            return;\n        }\n        await this.removeAccountContext(account);\n        this.removeItem(accountKey);\n    }\n    /**\n     * Removes credentials associated with the provided account\n     * @param account\n     */\n    async removeAccountContext(account) {\n        const allTokenKeys = this.getTokenKeys();\n        const accountId = account.generateAccountId();\n        const removedCredentials = [];\n        allTokenKeys.idToken.forEach((key) => {\n            if (key.indexOf(accountId) === 0) {\n                this.removeIdToken(key);\n            }\n        });\n        allTokenKeys.accessToken.forEach((key) => {\n            if (key.indexOf(accountId) === 0) {\n                removedCredentials.push(this.removeAccessToken(key));\n            }\n        });\n        allTokenKeys.refreshToken.forEach((key) => {\n            if (key.indexOf(accountId) === 0) {\n                this.removeRefreshToken(key);\n            }\n        });\n        await Promise.all(removedCredentials);\n    }\n    /**\n     * returns a boolean if the given credential is removed\n     * @param credential\n     */\n    async removeAccessToken(key) {\n        const credential = this.getAccessTokenCredential(key);\n        if (!credential) {\n            return;\n        }\n        // Remove Token Binding Key from key store for PoP Tokens Credentials\n        if (credential.credentialType.toLowerCase() ===\n            CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME.toLowerCase()) {\n            if (credential.tokenType === AuthenticationScheme.POP) {\n                const accessTokenWithAuthSchemeEntity = credential;\n                const kid = accessTokenWithAuthSchemeEntity.keyId;\n                if (kid) {\n                    try {\n                        await this.cryptoImpl.removeTokenBindingKey(kid);\n                    }\n                    catch (error) {\n                        throw createClientAuthError(bindingKeyNotRemoved);\n                    }\n                }\n            }\n        }\n        return this.removeItem(key);\n    }\n    /**\n     * Removes all app metadata objects from cache.\n     */\n    removeAppMetadata() {\n        const allCacheKeys = this.getKeys();\n        allCacheKeys.forEach((cacheKey) => {\n            if (this.isAppMetadata(cacheKey)) {\n                this.removeItem(cacheKey);\n            }\n        });\n        return true;\n    }\n    /**\n     * Retrieve the cached credentials into a cacherecord\n     * @param account {AccountInfo}\n     * @param request {BaseAuthRequest}\n     * @param environment {string}\n     * @param performanceClient {?IPerformanceClient}\n     * @param correlationId {?string}\n     */\n    readCacheRecord(account, request, environment, performanceClient, correlationId) {\n        const tokenKeys = this.getTokenKeys();\n        const cachedAccount = this.readAccountFromCache(account);\n        const cachedIdToken = this.getIdToken(account, tokenKeys, performanceClient, correlationId);\n        const cachedAccessToken = this.getAccessToken(account, request, tokenKeys, performanceClient, correlationId);\n        const cachedRefreshToken = this.getRefreshToken(account, false, tokenKeys, performanceClient, correlationId);\n        const cachedAppMetadata = this.readAppMetadataFromCache(environment);\n        if (cachedAccount && cachedIdToken) {\n            cachedAccount.idTokenClaims = extractTokenClaims(cachedIdToken.secret, this.cryptoImpl.base64Decode);\n        }\n        return {\n            account: cachedAccount,\n            idToken: cachedIdToken,\n            accessToken: cachedAccessToken,\n            refreshToken: cachedRefreshToken,\n            appMetadata: cachedAppMetadata,\n        };\n    }\n    /**\n     * Retrieve AccountEntity from cache\n     * @param account\n     */\n    readAccountFromCache(account) {\n        const accountKey = AccountEntity.generateAccountCacheKey(account);\n        return this.getAccount(accountKey);\n    }\n    /**\n     * Retrieve IdTokenEntity from cache\n     * @param account {AccountInfo}\n     * @param tokenKeys {?TokenKeys}\n     * @param performanceClient {?IPerformanceClient}\n     * @param correlationId {?string}\n     */\n    getIdToken(account, tokenKeys, performanceClient, correlationId) {\n        this.commonLogger.trace(\"CacheManager - getIdToken called\");\n        const idTokenFilter = {\n            homeAccountId: account.homeAccountId,\n            environment: account.environment,\n            credentialType: CredentialType.ID_TOKEN,\n            clientId: this.clientId,\n            realm: account.tenantId,\n        };\n        const idTokens = this.getIdTokensByFilter(idTokenFilter, tokenKeys);\n        const numIdTokens = idTokens.length;\n        if (numIdTokens < 1) {\n            this.commonLogger.info(\"CacheManager:getIdToken - No token found\");\n            return null;\n        }\n        else if (numIdTokens > 1) {\n            this.commonLogger.info(\"CacheManager:getIdToken - Multiple id tokens found, clearing them\");\n            idTokens.forEach((idToken) => {\n                this.removeIdToken(generateCredentialKey(idToken));\n            });\n            if (performanceClient && correlationId) {\n                performanceClient.addFields({ multiMatchedID: idTokens.length }, correlationId);\n            }\n            return null;\n        }\n        this.commonLogger.info(\"CacheManager:getIdToken - Returning id token\");\n        return idTokens[0];\n    }\n    /**\n     * Gets all idTokens matching the given filter\n     * @param filter\n     * @returns\n     */\n    getIdTokensByFilter(filter, tokenKeys) {\n        const idTokenKeys = (tokenKeys && tokenKeys.idToken) || this.getTokenKeys().idToken;\n        const idTokens = [];\n        idTokenKeys.forEach((key) => {\n            if (!this.idTokenKeyMatchesFilter(key, {\n                clientId: this.clientId,\n                ...filter,\n            })) {\n                return;\n            }\n            const idToken = this.getIdTokenCredential(key);\n            if (idToken && this.credentialMatchesFilter(idToken, filter)) {\n                idTokens.push(idToken);\n            }\n        });\n        return idTokens;\n    }\n    /**\n     * Validate the cache key against filter before retrieving and parsing cache value\n     * @param key\n     * @param filter\n     * @returns\n     */\n    idTokenKeyMatchesFilter(inputKey, filter) {\n        const key = inputKey.toLowerCase();\n        if (filter.clientId &&\n            key.indexOf(filter.clientId.toLowerCase()) === -1) {\n            return false;\n        }\n        if (filter.homeAccountId &&\n            key.indexOf(filter.homeAccountId.toLowerCase()) === -1) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Removes idToken from the cache\n     * @param key\n     */\n    removeIdToken(key) {\n        this.removeItem(key);\n    }\n    /**\n     * Removes refresh token from the cache\n     * @param key\n     */\n    removeRefreshToken(key) {\n        this.removeItem(key);\n    }\n    /**\n     * Retrieve AccessTokenEntity from cache\n     * @param account {AccountInfo}\n     * @param request {BaseAuthRequest}\n     * @param tokenKeys {?TokenKeys}\n     * @param performanceClient {?IPerformanceClient}\n     * @param correlationId {?string}\n     */\n    getAccessToken(account, request, tokenKeys, performanceClient, correlationId) {\n        this.commonLogger.trace(\"CacheManager - getAccessToken called\");\n        const scopes = ScopeSet.createSearchScopes(request.scopes);\n        const authScheme = request.authenticationScheme || AuthenticationScheme.BEARER;\n        /*\n         * Distinguish between Bearer and PoP/SSH token cache types\n         * Cast to lowercase to handle \"bearer\" from ADFS\n         */\n        const credentialType = authScheme &&\n            authScheme.toLowerCase() !==\n                AuthenticationScheme.BEARER.toLowerCase()\n            ? CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME\n            : CredentialType.ACCESS_TOKEN;\n        const accessTokenFilter = {\n            homeAccountId: account.homeAccountId,\n            environment: account.environment,\n            credentialType: credentialType,\n            clientId: this.clientId,\n            realm: account.tenantId,\n            target: scopes,\n            tokenType: authScheme,\n            keyId: request.sshKid,\n            requestedClaimsHash: request.requestedClaimsHash,\n        };\n        const accessTokenKeys = (tokenKeys && tokenKeys.accessToken) ||\n            this.getTokenKeys().accessToken;\n        const accessTokens = [];\n        accessTokenKeys.forEach((key) => {\n            // Validate key\n            if (this.accessTokenKeyMatchesFilter(key, accessTokenFilter, true)) {\n                const accessToken = this.getAccessTokenCredential(key);\n                // Validate value\n                if (accessToken &&\n                    this.credentialMatchesFilter(accessToken, accessTokenFilter)) {\n                    accessTokens.push(accessToken);\n                }\n            }\n        });\n        const numAccessTokens = accessTokens.length;\n        if (numAccessTokens < 1) {\n            this.commonLogger.info(\"CacheManager:getAccessToken - No token found\");\n            return null;\n        }\n        else if (numAccessTokens > 1) {\n            this.commonLogger.info(\"CacheManager:getAccessToken - Multiple access tokens found, clearing them\");\n            accessTokens.forEach((accessToken) => {\n                void this.removeAccessToken(generateCredentialKey(accessToken));\n            });\n            if (performanceClient && correlationId) {\n                performanceClient.addFields({ multiMatchedAT: accessTokens.length }, correlationId);\n            }\n            return null;\n        }\n        this.commonLogger.info(\"CacheManager:getAccessToken - Returning access token\");\n        return accessTokens[0];\n    }\n    /**\n     * Validate the cache key against filter before retrieving and parsing cache value\n     * @param key\n     * @param filter\n     * @param keyMustContainAllScopes\n     * @returns\n     */\n    accessTokenKeyMatchesFilter(inputKey, filter, keyMustContainAllScopes) {\n        const key = inputKey.toLowerCase();\n        if (filter.clientId &&\n            key.indexOf(filter.clientId.toLowerCase()) === -1) {\n            return false;\n        }\n        if (filter.homeAccountId &&\n            key.indexOf(filter.homeAccountId.toLowerCase()) === -1) {\n            return false;\n        }\n        if (filter.realm && key.indexOf(filter.realm.toLowerCase()) === -1) {\n            return false;\n        }\n        if (filter.requestedClaimsHash &&\n            key.indexOf(filter.requestedClaimsHash.toLowerCase()) === -1) {\n            return false;\n        }\n        if (filter.target) {\n            const scopes = filter.target.asArray();\n            for (let i = 0; i < scopes.length; i++) {\n                if (keyMustContainAllScopes &&\n                    !key.includes(scopes[i].toLowerCase())) {\n                    // When performing a cache lookup a missing scope would be a cache miss\n                    return false;\n                }\n                else if (!keyMustContainAllScopes &&\n                    key.includes(scopes[i].toLowerCase())) {\n                    // When performing a cache write, any token with a subset of requested scopes should be replaced\n                    return true;\n                }\n            }\n        }\n        return true;\n    }\n    /**\n     * Gets all access tokens matching the filter\n     * @param filter\n     * @returns\n     */\n    getAccessTokensByFilter(filter) {\n        const tokenKeys = this.getTokenKeys();\n        const accessTokens = [];\n        tokenKeys.accessToken.forEach((key) => {\n            if (!this.accessTokenKeyMatchesFilter(key, filter, true)) {\n                return;\n            }\n            const accessToken = this.getAccessTokenCredential(key);\n            if (accessToken &&\n                this.credentialMatchesFilter(accessToken, filter)) {\n                accessTokens.push(accessToken);\n            }\n        });\n        return accessTokens;\n    }\n    /**\n     * Helper to retrieve the appropriate refresh token from cache\n     * @param account {AccountInfo}\n     * @param familyRT {boolean}\n     * @param tokenKeys {?TokenKeys}\n     * @param performanceClient {?IPerformanceClient}\n     * @param correlationId {?string}\n     */\n    getRefreshToken(account, familyRT, tokenKeys, performanceClient, correlationId) {\n        this.commonLogger.trace(\"CacheManager - getRefreshToken called\");\n        const id = familyRT ? THE_FAMILY_ID : undefined;\n        const refreshTokenFilter = {\n            homeAccountId: account.homeAccountId,\n            environment: account.environment,\n            credentialType: CredentialType.REFRESH_TOKEN,\n            clientId: this.clientId,\n            familyId: id,\n        };\n        const refreshTokenKeys = (tokenKeys && tokenKeys.refreshToken) ||\n            this.getTokenKeys().refreshToken;\n        const refreshTokens = [];\n        refreshTokenKeys.forEach((key) => {\n            // Validate key\n            if (this.refreshTokenKeyMatchesFilter(key, refreshTokenFilter)) {\n                const refreshToken = this.getRefreshTokenCredential(key);\n                // Validate value\n                if (refreshToken &&\n                    this.credentialMatchesFilter(refreshToken, refreshTokenFilter)) {\n                    refreshTokens.push(refreshToken);\n                }\n            }\n        });\n        const numRefreshTokens = refreshTokens.length;\n        if (numRefreshTokens < 1) {\n            this.commonLogger.info(\"CacheManager:getRefreshToken - No refresh token found.\");\n            return null;\n        }\n        // address the else case after remove functions address environment aliases\n        if (numRefreshTokens > 1 && performanceClient && correlationId) {\n            performanceClient.addFields({ multiMatchedRT: numRefreshTokens }, correlationId);\n        }\n        this.commonLogger.info(\"CacheManager:getRefreshToken - returning refresh token\");\n        return refreshTokens[0];\n    }\n    /**\n     * Validate the cache key against filter before retrieving and parsing cache value\n     * @param key\n     * @param filter\n     */\n    refreshTokenKeyMatchesFilter(inputKey, filter) {\n        const key = inputKey.toLowerCase();\n        if (filter.familyId &&\n            key.indexOf(filter.familyId.toLowerCase()) === -1) {\n            return false;\n        }\n        // If familyId is used, clientId is not in the key\n        if (!filter.familyId &&\n            filter.clientId &&\n            key.indexOf(filter.clientId.toLowerCase()) === -1) {\n            return false;\n        }\n        if (filter.homeAccountId &&\n            key.indexOf(filter.homeAccountId.toLowerCase()) === -1) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Retrieve AppMetadataEntity from cache\n     */\n    readAppMetadataFromCache(environment) {\n        const appMetadataFilter = {\n            environment,\n            clientId: this.clientId,\n        };\n        const appMetadata = this.getAppMetadataFilteredBy(appMetadataFilter);\n        const appMetadataEntries = Object.keys(appMetadata).map((key) => appMetadata[key]);\n        const numAppMetadata = appMetadataEntries.length;\n        if (numAppMetadata < 1) {\n            return null;\n        }\n        else if (numAppMetadata > 1) {\n            throw createClientAuthError(multipleMatchingAppMetadata);\n        }\n        return appMetadataEntries[0];\n    }\n    /**\n     * Return the family_id value associated  with FOCI\n     * @param environment\n     * @param clientId\n     */\n    isAppMetadataFOCI(environment) {\n        const appMetadata = this.readAppMetadataFromCache(environment);\n        return !!(appMetadata && appMetadata.familyId === THE_FAMILY_ID);\n    }\n    /**\n     * helper to match account ids\n     * @param value\n     * @param homeAccountId\n     */\n    matchHomeAccountId(entity, homeAccountId) {\n        return !!(typeof entity.homeAccountId === \"string\" &&\n            homeAccountId === entity.homeAccountId);\n    }\n    /**\n     * helper to match account ids\n     * @param entity\n     * @param localAccountId\n     * @returns\n     */\n    matchLocalAccountId(entity, localAccountId) {\n        return !!(typeof entity.localAccountId === \"string\" &&\n            localAccountId === entity.localAccountId);\n    }\n    /**\n     * helper to match usernames\n     * @param entity\n     * @param username\n     * @returns\n     */\n    matchUsername(entity, username) {\n        return !!(typeof entity.username === \"string\" &&\n            username.toLowerCase() === entity.username.toLowerCase());\n    }\n    /**\n     * helper to match names\n     * @param entity\n     * @param name\n     * @returns true if the downcased name properties are present and match in the filter and the entity\n     */\n    matchName(entity, name) {\n        return !!(name.toLowerCase() === entity.name?.toLowerCase());\n    }\n    /**\n     * helper to match assertion\n     * @param value\n     * @param oboAssertion\n     */\n    matchUserAssertionHash(entity, userAssertionHash) {\n        return !!(entity.userAssertionHash &&\n            userAssertionHash === entity.userAssertionHash);\n    }\n    /**\n     * helper to match environment\n     * @param value\n     * @param environment\n     */\n    matchEnvironment(entity, environment) {\n        // Check static authority options first for cases where authority metadata has not been resolved and cached yet\n        if (this.staticAuthorityOptions) {\n            const staticAliases = getAliasesFromStaticSources(this.staticAuthorityOptions, this.commonLogger);\n            if (staticAliases.includes(environment) &&\n                staticAliases.includes(entity.environment)) {\n                return true;\n            }\n        }\n        // Query metadata cache if no static authority configuration has aliases that match enviroment\n        const cloudMetadata = this.getAuthorityMetadataByAlias(environment);\n        if (cloudMetadata &&\n            cloudMetadata.aliases.indexOf(entity.environment) > -1) {\n            return true;\n        }\n        return false;\n    }\n    /**\n     * helper to match credential type\n     * @param entity\n     * @param credentialType\n     */\n    matchCredentialType(entity, credentialType) {\n        return (entity.credentialType &&\n            credentialType.toLowerCase() === entity.credentialType.toLowerCase());\n    }\n    /**\n     * helper to match client ids\n     * @param entity\n     * @param clientId\n     */\n    matchClientId(entity, clientId) {\n        return !!(entity.clientId && clientId === entity.clientId);\n    }\n    /**\n     * helper to match family ids\n     * @param entity\n     * @param familyId\n     */\n    matchFamilyId(entity, familyId) {\n        return !!(entity.familyId && familyId === entity.familyId);\n    }\n    /**\n     * helper to match realm\n     * @param entity\n     * @param realm\n     */\n    matchRealm(entity, realm) {\n        return !!(entity.realm && realm === entity.realm);\n    }\n    /**\n     * helper to match nativeAccountId\n     * @param entity\n     * @param nativeAccountId\n     * @returns boolean indicating the match result\n     */\n    matchNativeAccountId(entity, nativeAccountId) {\n        return !!(entity.nativeAccountId && nativeAccountId === entity.nativeAccountId);\n    }\n    /**\n     * helper to match loginHint which can be either:\n     * 1. login_hint ID token claim\n     * 2. username in cached account object\n     * 3. upn in ID token claims\n     * @param entity\n     * @param loginHint\n     * @returns\n     */\n    matchLoginHint(idTokenClaims, loginHint) {\n        if (idTokenClaims?.login_hint === loginHint) {\n            return true;\n        }\n        if (idTokenClaims.preferred_username === loginHint) {\n            return true;\n        }\n        if (idTokenClaims?.upn === loginHint) {\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Helper to match sid\n     * @param idTokenClaims\n     * @param sid\n     * @returns true if the sid claim is present and matches the filter\n     */\n    matchSid(idTokenClaims, sid) {\n        return !!(idTokenClaims?.sid && idTokenClaims.sid === sid);\n    }\n    matchAuthorityType(entity, authorityType) {\n        return !!(entity.authorityType &&\n            authorityType.toLowerCase() === entity.authorityType.toLowerCase());\n    }\n    /**\n     * Returns true if the target scopes are a subset of the current entity's scopes, false otherwise.\n     * @param entity\n     * @param target\n     */\n    matchTarget(entity, target) {\n        const isNotAccessTokenCredential = entity.credentialType !== CredentialType.ACCESS_TOKEN &&\n            entity.credentialType !==\n                CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME;\n        if (isNotAccessTokenCredential || !entity.target) {\n            return false;\n        }\n        const entityScopeSet = ScopeSet.fromString(entity.target);\n        return entityScopeSet.containsScopeSet(target);\n    }\n    /**\n     * Returns true if the credential's tokenType or Authentication Scheme matches the one in the request, false otherwise\n     * @param entity\n     * @param tokenType\n     */\n    matchTokenType(entity, tokenType) {\n        return !!(entity.tokenType && entity.tokenType === tokenType);\n    }\n    /**\n     * Returns true if the credential's keyId matches the one in the request, false otherwise\n     * @param entity\n     * @param tokenType\n     */\n    matchKeyId(entity, keyId) {\n        return !!(entity.keyId && entity.keyId === keyId);\n    }\n    /**\n     * returns if a given cache entity is of the type appmetadata\n     * @param key\n     */\n    isAppMetadata(key) {\n        return key.indexOf(APP_METADATA) !== -1;\n    }\n    /**\n     * returns if a given cache entity is of the type authoritymetadata\n     * @param key\n     */\n    isAuthorityMetadata(key) {\n        return key.indexOf(AUTHORITY_METADATA_CONSTANTS.CACHE_KEY) !== -1;\n    }\n    /**\n     * returns cache key used for cloud instance metadata\n     */\n    generateAuthorityMetadataCacheKey(authority) {\n        return `${AUTHORITY_METADATA_CONSTANTS.CACHE_KEY}-${this.clientId}-${authority}`;\n    }\n    /**\n     * Helper to convert serialized data to object\n     * @param obj\n     * @param json\n     */\n    static toObject(obj, json) {\n        for (const propertyName in json) {\n            obj[propertyName] = json[propertyName];\n        }\n        return obj;\n    }\n}\n/** @internal */\nclass DefaultStorageClass extends CacheManager {\n    setAccount() {\n        throw createClientAuthError(methodNotImplemented);\n    }\n    getAccount() {\n        throw createClientAuthError(methodNotImplemented);\n    }\n    setIdTokenCredential() {\n        throw createClientAuthError(methodNotImplemented);\n    }\n    getIdTokenCredential() {\n        throw createClientAuthError(methodNotImplemented);\n    }\n    setAccessTokenCredential() {\n        throw createClientAuthError(methodNotImplemented);\n    }\n    getAccessTokenCredential() {\n        throw createClientAuthError(methodNotImplemented);\n    }\n    setRefreshTokenCredential() {\n        throw createClientAuthError(methodNotImplemented);\n    }\n    getRefreshTokenCredential() {\n        throw createClientAuthError(methodNotImplemented);\n    }\n    setAppMetadata() {\n        throw createClientAuthError(methodNotImplemented);\n    }\n    getAppMetadata() {\n        throw createClientAuthError(methodNotImplemented);\n    }\n    setServerTelemetry() {\n        throw createClientAuthError(methodNotImplemented);\n    }\n    getServerTelemetry() {\n        throw createClientAuthError(methodNotImplemented);\n    }\n    setAuthorityMetadata() {\n        throw createClientAuthError(methodNotImplemented);\n    }\n    getAuthorityMetadata() {\n        throw createClientAuthError(methodNotImplemented);\n    }\n    getAuthorityMetadataKeys() {\n        throw createClientAuthError(methodNotImplemented);\n    }\n    setThrottlingCache() {\n        throw createClientAuthError(methodNotImplemented);\n    }\n    getThrottlingCache() {\n        throw createClientAuthError(methodNotImplemented);\n    }\n    removeItem() {\n        throw createClientAuthError(methodNotImplemented);\n    }\n    containsKey() {\n        throw createClientAuthError(methodNotImplemented);\n    }\n    getKeys() {\n        throw createClientAuthError(methodNotImplemented);\n    }\n    getAccountKeys() {\n        throw createClientAuthError(methodNotImplemented);\n    }\n    getTokenKeys() {\n        throw createClientAuthError(methodNotImplemented);\n    }\n    async clear() {\n        throw createClientAuthError(methodNotImplemented);\n    }\n    updateCredentialCacheKey() {\n        throw createClientAuthError(methodNotImplemented);\n    }\n}\n\nexport { CacheManager, DefaultStorageClass };\n//# sourceMappingURL=CacheManager.mjs.map\n","/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\nimport { DEFAULT_CRYPTO_IMPLEMENTATION } from '../crypto/ICrypto.mjs';\nimport { Logger, LogLevel } from '../logger/Logger.mjs';\nimport { Constants } from '../utils/Constants.mjs';\nimport { version } from '../packageMetadata.mjs';\nimport { AzureCloudInstance } from '../authority/AuthorityOptions.mjs';\nimport { DefaultStorageClass } from '../cache/CacheManager.mjs';\nimport { ProtocolMode } from '../authority/ProtocolMode.mjs';\nimport { createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { methodNotImplemented } from '../error/ClientAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n// Token renewal offset default in seconds\nconst DEFAULT_TOKEN_RENEWAL_OFFSET_SEC = 300;\nconst DEFAULT_SYSTEM_OPTIONS = {\n    tokenRenewalOffsetSeconds: DEFAULT_TOKEN_RENEWAL_OFFSET_SEC,\n    preventCorsPreflight: false,\n};\nconst DEFAULT_LOGGER_IMPLEMENTATION = {\n    loggerCallback: () => {\n        // allow users to not set loggerCallback\n    },\n    piiLoggingEnabled: false,\n    logLevel: LogLevel.Info,\n    correlationId: Constants.EMPTY_STRING,\n};\nconst DEFAULT_CACHE_OPTIONS = {\n    claimsBasedCachingEnabled: false,\n};\nconst DEFAULT_NETWORK_IMPLEMENTATION = {\n    async sendGetRequestAsync() {\n        throw createClientAuthError(methodNotImplemented);\n    },\n    async sendPostRequestAsync() {\n        throw createClientAuthError(methodNotImplemented);\n    },\n};\nconst DEFAULT_LIBRARY_INFO = {\n    sku: Constants.SKU,\n    version: version,\n    cpu: Constants.EMPTY_STRING,\n    os: Constants.EMPTY_STRING,\n};\nconst DEFAULT_CLIENT_CREDENTIALS = {\n    clientSecret: Constants.EMPTY_STRING,\n    clientAssertion: undefined,\n};\nconst DEFAULT_AZURE_CLOUD_OPTIONS = {\n    azureCloudInstance: AzureCloudInstance.None,\n    tenant: `${Constants.DEFAULT_COMMON_TENANT}`,\n};\nconst DEFAULT_TELEMETRY_OPTIONS = {\n    application: {\n        appName: \"\",\n        appVersion: \"\",\n    },\n};\n/**\n * Function that sets the default options when not explicitly configured from app developer\n *\n * @param Configuration\n *\n * @returns Configuration\n */\nfunction buildClientConfiguration({ authOptions: userAuthOptions, systemOptions: userSystemOptions, loggerOptions: userLoggerOption, cacheOptions: userCacheOptions, storageInterface: storageImplementation, networkInterface: networkImplementation, cryptoInterface: cryptoImplementation, clientCredentials: clientCredentials, libraryInfo: libraryInfo, telemetry: telemetry, serverTelemetryManager: serverTelemetryManager, persistencePlugin: persistencePlugin, serializableCache: serializableCache, }) {\n    const loggerOptions = {\n        ...DEFAULT_LOGGER_IMPLEMENTATION,\n        ...userLoggerOption,\n    };\n    return {\n        authOptions: buildAuthOptions(userAuthOptions),\n        systemOptions: { ...DEFAULT_SYSTEM_OPTIONS, ...userSystemOptions },\n        loggerOptions: loggerOptions,\n        cacheOptions: { ...DEFAULT_CACHE_OPTIONS, ...userCacheOptions },\n        storageInterface: storageImplementation ||\n            new DefaultStorageClass(userAuthOptions.clientId, DEFAULT_CRYPTO_IMPLEMENTATION, new Logger(loggerOptions)),\n        networkInterface: networkImplementation || DEFAULT_NETWORK_IMPLEMENTATION,\n        cryptoInterface: cryptoImplementation || DEFAULT_CRYPTO_IMPLEMENTATION,\n        clientCredentials: clientCredentials || DEFAULT_CLIENT_CREDENTIALS,\n        libraryInfo: { ...DEFAULT_LIBRARY_INFO, ...libraryInfo },\n        telemetry: { ...DEFAULT_TELEMETRY_OPTIONS, ...telemetry },\n        serverTelemetryManager: serverTelemetryManager || null,\n        persistencePlugin: persistencePlugin || null,\n        serializableCache: serializableCache || null,\n    };\n}\n/**\n * Construct authoptions from the client and platform passed values\n * @param authOptions\n */\nfunction buildAuthOptions(authOptions) {\n    return {\n        clientCapabilities: [],\n        azureCloudOptions: DEFAULT_AZURE_CLOUD_OPTIONS,\n        skipAuthorityMetadataCache: false,\n        ...authOptions,\n    };\n}\n/**\n * Returns true if config has protocolMode set to ProtocolMode.OIDC, false otherwise\n * @param ClientConfiguration\n */\nfunction isOidcProtocolMode(config) {\n    return (config.authOptions.authority.options.protocolMode === ProtocolMode.OIDC);\n}\n\nexport { DEFAULT_SYSTEM_OPTIONS, buildClientConfiguration, isOidcProtocolMode };\n//# sourceMappingURL=ClientConfiguration.mjs.map\n","/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\nimport { AuthError } from './AuthError.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Error thrown when there is an error with the server code, for example, unavailability.\n */\nclass ServerError extends AuthError {\n    constructor(errorCode, errorMessage, subError) {\n        super(errorCode, errorMessage, subError);\n        this.name = \"ServerError\";\n        Object.setPrototypeOf(this, ServerError.prototype);\n    }\n}\n\nexport { ServerError };\n//# sourceMappingURL=ServerError.mjs.map\n","/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\nimport { ThrottlingConstants, Constants, HeaderNames } from '../utils/Constants.mjs';\nimport { ServerError } from '../error/ServerError.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/** @internal */\nclass ThrottlingUtils {\n    /**\n     * Prepares a RequestThumbprint to be stored as a key.\n     * @param thumbprint\n     */\n    static generateThrottlingStorageKey(thumbprint) {\n        return `${ThrottlingConstants.THROTTLING_PREFIX}.${JSON.stringify(thumbprint)}`;\n    }\n    /**\n     * Performs necessary throttling checks before a network request.\n     * @param cacheManager\n     * @param thumbprint\n     */\n    static preProcess(cacheManager, thumbprint) {\n        const key = ThrottlingUtils.generateThrottlingStorageKey(thumbprint);\n        const value = cacheManager.getThrottlingCache(key);\n        if (value) {\n            if (value.throttleTime < Date.now()) {\n                cacheManager.removeItem(key);\n                return;\n            }\n            throw new ServerError(value.errorCodes?.join(\" \") || Constants.EMPTY_STRING, value.errorMessage, value.subError);\n        }\n    }\n    /**\n     * Performs necessary throttling checks after a network request.\n     * @param cacheManager\n     * @param thumbprint\n     * @param response\n     */\n    static postProcess(cacheManager, thumbprint, response) {\n        if (ThrottlingUtils.checkResponseStatus(response) ||\n            ThrottlingUtils.checkResponseForRetryAfter(response)) {\n            const thumbprintValue = {\n                throttleTime: ThrottlingUtils.calculateThrottleTime(parseInt(response.headers[HeaderNames.RETRY_AFTER])),\n                error: response.body.error,\n                errorCodes: response.body.error_codes,\n                errorMessage: response.body.error_description,\n                subError: response.body.suberror,\n            };\n            cacheManager.setThrottlingCache(ThrottlingUtils.generateThrottlingStorageKey(thumbprint), thumbprintValue);\n        }\n    }\n    /**\n     * Checks a NetworkResponse object's status codes against 429 or 5xx\n     * @param response\n     */\n    static checkResponseStatus(response) {\n        return (response.status === 429 ||\n            (response.status >= 500 && response.status < 600));\n    }\n    /**\n     * Checks a NetworkResponse object's RetryAfter header\n     * @param response\n     */\n    static checkResponseForRetryAfter(response) {\n        if (response.headers) {\n            return (response.headers.hasOwnProperty(HeaderNames.RETRY_AFTER) &&\n                (response.status < 200 || response.status >= 300));\n        }\n        return false;\n    }\n    /**\n     * Calculates the Unix-time value for a throttle to expire given throttleTime in seconds.\n     * @param throttleTime\n     */\n    static calculateThrottleTime(throttleTime) {\n        const time = throttleTime <= 0 ? 0 : throttleTime;\n        const currentSeconds = Date.now() / 1000;\n        return Math.floor(Math.min(currentSeconds +\n            (time || ThrottlingConstants.DEFAULT_THROTTLE_TIME_SECONDS), currentSeconds +\n            ThrottlingConstants.DEFAULT_MAX_THROTTLE_TIME_SECONDS) * 1000);\n    }\n    static removeThrottle(cacheManager, clientId, request, homeAccountIdentifier) {\n        const thumbprint = {\n            clientId: clientId,\n            authority: request.authority,\n            scopes: request.scopes,\n            homeAccountIdentifier: homeAccountIdentifier,\n            claims: request.claims,\n            authenticationScheme: request.authenticationScheme,\n            resourceRequestMethod: request.resourceRequestMethod,\n            resourceRequestUri: request.resourceRequestUri,\n            shrClaims: request.shrClaims,\n            sshKid: request.sshKid,\n        };\n        const key = this.generateThrottlingStorageKey(thumbprint);\n        cacheManager.removeItem(key);\n    }\n}\n\nexport { ThrottlingUtils };\n//# sourceMappingURL=ThrottlingUtils.mjs.map\n","/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\nimport { ThrottlingUtils } from './ThrottlingUtils.mjs';\nimport { AuthError } from '../error/AuthError.mjs';\nimport { createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { networkError } from '../error/ClientAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/** @internal */\nclass NetworkManager {\n    constructor(networkClient, cacheManager) {\n        this.networkClient = networkClient;\n        this.cacheManager = cacheManager;\n    }\n    /**\n     * Wraps sendPostRequestAsync with necessary preflight and postflight logic\n     * @param thumbprint\n     * @param tokenEndpoint\n     * @param options\n     */\n    async sendPostRequest(thumbprint, tokenEndpoint, options) {\n        ThrottlingUtils.preProcess(this.cacheManager, thumbprint);\n        let response;\n        try {\n            response = await this.networkClient.sendPostRequestAsync(tokenEndpoint, options);\n        }\n        catch (e) {\n            if (e instanceof AuthError) {\n                throw e;\n            }\n            else {\n                throw createClientAuthError(networkError);\n            }\n        }\n        ThrottlingUtils.postProcess(this.cacheManager, thumbprint, response);\n        return response;\n    }\n}\n\nexport { NetworkManager };\n//# sourceMappingURL=NetworkManager.mjs.map\n","/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nconst CcsCredentialType = {\n    HOME_ACCOUNT_ID: \"home_account_id\",\n    UPN: \"UPN\",\n};\n\nexport { CcsCredentialType };\n//# sourceMappingURL=CcsCredential.mjs.map\n","/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\nimport { createClientConfigurationError } from '../error/ClientConfigurationError.mjs';\nimport { CodeChallengeMethodValues, PromptValue } from '../utils/Constants.mjs';\nimport { redirectUriEmpty, invalidPromptValue, invalidClaims, pkceParamsMissing, invalidCodeChallengeMethod } from '../error/ClientConfigurationErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Validates server consumable params from the \"request\" objects\n */\nclass RequestValidator {\n    /**\n     * Utility to check if the `redirectUri` in the request is a non-null value\n     * @param redirectUri\n     */\n    static validateRedirectUri(redirectUri) {\n        if (!redirectUri) {\n            throw createClientConfigurationError(redirectUriEmpty);\n        }\n    }\n    /**\n     * Utility to validate prompt sent by the user in the request\n     * @param prompt\n     */\n    static validatePrompt(prompt) {\n        const promptValues = [];\n        for (const value in PromptValue) {\n            promptValues.push(PromptValue[value]);\n        }\n        if (promptValues.indexOf(prompt) < 0) {\n            throw createClientConfigurationError(invalidPromptValue);\n        }\n    }\n    static validateClaims(claims) {\n        try {\n            JSON.parse(claims);\n        }\n        catch (e) {\n            throw createClientConfigurationError(invalidClaims);\n        }\n    }\n    /**\n     * Utility to validate code_challenge and code_challenge_method\n     * @param codeChallenge\n     * @param codeChallengeMethod\n     */\n    static validateCodeChallengeParams(codeChallenge, codeChallengeMethod) {\n        if (!codeChallenge || !codeChallengeMethod) {\n            throw createClientConfigurationError(pkceParamsMissing);\n        }\n        else {\n            this.validateCodeChallengeMethod(codeChallengeMethod);\n        }\n    }\n    /**\n     * Utility to validate code_challenge_method\n     * @param codeChallengeMethod\n     */\n    static validateCodeChallengeMethod(codeChallengeMethod) {\n        if ([\n            CodeChallengeMethodValues.PLAIN,\n            CodeChallengeMethodValues.S256,\n        ].indexOf(codeChallengeMethod) < 0) {\n            throw createClientConfigurationError(invalidCodeChallengeMethod);\n        }\n    }\n    /**\n     * Removes unnecessary, duplicate, and empty string query parameters from extraQueryParameters\n     * @param request\n     */\n    static sanitizeEQParams(eQParams, queryParams) {\n        if (!eQParams) {\n            return {};\n        }\n        // Remove any query parameters already included in SSO params\n        queryParams.forEach((_value, key) => {\n            if (eQParams[key]) {\n                delete eQParams[key];\n            }\n        });\n        // remove empty string parameters\n        return Object.fromEntries(Object.entries(eQParams).filter((kv) => kv[1] !== \"\"));\n    }\n}\n\nexport { RequestValidator };\n//# sourceMappingURL=RequestValidator.mjs.map\n","/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\nimport { AADServerParamKeys, Constants, ResponseMode, OIDC_DEFAULT_SCOPES, SSOTypes, HeaderNames, CLIENT_INFO, ClaimsRequestKeys, PasswordGrantConstants, AuthenticationScheme, ThrottlingConstants } from '../utils/Constants.mjs';\nimport { ScopeSet } from './ScopeSet.mjs';\nimport { createClientConfigurationError } from '../error/ClientConfigurationError.mjs';\nimport { RequestValidator } from './RequestValidator.mjs';\nimport { pkceParamsMissing, invalidClaims } from '../error/ClientConfigurationErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/** @internal */\nclass RequestParameterBuilder {\n    constructor() {\n        this.parameters = new Map();\n    }\n    /**\n     * add response_type = code\n     */\n    addResponseTypeCode() {\n        this.parameters.set(AADServerParamKeys.RESPONSE_TYPE, encodeURIComponent(Constants.CODE_RESPONSE_TYPE));\n    }\n    /**\n     * add response_type = token id_token\n     */\n    addResponseTypeForTokenAndIdToken() {\n        this.parameters.set(AADServerParamKeys.RESPONSE_TYPE, encodeURIComponent(`${Constants.TOKEN_RESPONSE_TYPE} ${Constants.ID_TOKEN_RESPONSE_TYPE}`));\n    }\n    /**\n     * add response_mode. defaults to query.\n     * @param responseMode\n     */\n    addResponseMode(responseMode) {\n        this.parameters.set(AADServerParamKeys.RESPONSE_MODE, encodeURIComponent(responseMode ? responseMode : ResponseMode.QUERY));\n    }\n    /**\n     * Add flag to indicate STS should attempt to use WAM if available\n     */\n    addNativeBroker() {\n        this.parameters.set(AADServerParamKeys.NATIVE_BROKER, encodeURIComponent(\"1\"));\n    }\n    /**\n     * add scopes. set addOidcScopes to false to prevent default scopes in non-user scenarios\n     * @param scopeSet\n     * @param addOidcScopes\n     */\n    addScopes(scopes, addOidcScopes = true, defaultScopes = OIDC_DEFAULT_SCOPES) {\n        // Always add openid to the scopes when adding OIDC scopes\n        if (addOidcScopes &&\n            !defaultScopes.includes(\"openid\") &&\n            !scopes.includes(\"openid\")) {\n            defaultScopes.push(\"openid\");\n        }\n        const requestScopes = addOidcScopes\n            ? [...(scopes || []), ...defaultScopes]\n            : scopes || [];\n        const scopeSet = new ScopeSet(requestScopes);\n        this.parameters.set(AADServerParamKeys.SCOPE, encodeURIComponent(scopeSet.printScopes()));\n    }\n    /**\n     * add clientId\n     * @param clientId\n     */\n    addClientId(clientId) {\n        this.parameters.set(AADServerParamKeys.CLIENT_ID, encodeURIComponent(clientId));\n    }\n    /**\n     * add redirect_uri\n     * @param redirectUri\n     */\n    addRedirectUri(redirectUri) {\n        RequestValidator.validateRedirectUri(redirectUri);\n        this.parameters.set(AADServerParamKeys.REDIRECT_URI, encodeURIComponent(redirectUri));\n    }\n    /**\n     * add post logout redirectUri\n     * @param redirectUri\n     */\n    addPostLogoutRedirectUri(redirectUri) {\n        RequestValidator.validateRedirectUri(redirectUri);\n        this.parameters.set(AADServerParamKeys.POST_LOGOUT_URI, encodeURIComponent(redirectUri));\n    }\n    /**\n     * add id_token_hint to logout request\n     * @param idTokenHint\n     */\n    addIdTokenHint(idTokenHint) {\n        this.parameters.set(AADServerParamKeys.ID_TOKEN_HINT, encodeURIComponent(idTokenHint));\n    }\n    /**\n     * add domain_hint\n     * @param domainHint\n     */\n    addDomainHint(domainHint) {\n        this.parameters.set(SSOTypes.DOMAIN_HINT, encodeURIComponent(domainHint));\n    }\n    /**\n     * add login_hint\n     * @param loginHint\n     */\n    addLoginHint(loginHint) {\n        this.parameters.set(SSOTypes.LOGIN_HINT, encodeURIComponent(loginHint));\n    }\n    /**\n     * Adds the CCS (Cache Credential Service) query parameter for login_hint\n     * @param loginHint\n     */\n    addCcsUpn(loginHint) {\n        this.parameters.set(HeaderNames.CCS_HEADER, encodeURIComponent(`UPN:${loginHint}`));\n    }\n    /**\n     * Adds the CCS (Cache Credential Service) query parameter for account object\n     * @param loginHint\n     */\n    addCcsOid(clientInfo) {\n        this.parameters.set(HeaderNames.CCS_HEADER, encodeURIComponent(`Oid:${clientInfo.uid}@${clientInfo.utid}`));\n    }\n    /**\n     * add sid\n     * @param sid\n     */\n    addSid(sid) {\n        this.parameters.set(SSOTypes.SID, encodeURIComponent(sid));\n    }\n    /**\n     * add claims\n     * @param claims\n     */\n    addClaims(claims, clientCapabilities) {\n        const mergedClaims = this.addClientCapabilitiesToClaims(claims, clientCapabilities);\n        RequestValidator.validateClaims(mergedClaims);\n        this.parameters.set(AADServerParamKeys.CLAIMS, encodeURIComponent(mergedClaims));\n    }\n    /**\n     * add correlationId\n     * @param correlationId\n     */\n    addCorrelationId(correlationId) {\n        this.parameters.set(AADServerParamKeys.CLIENT_REQUEST_ID, encodeURIComponent(correlationId));\n    }\n    /**\n     * add library info query params\n     * @param libraryInfo\n     */\n    addLibraryInfo(libraryInfo) {\n        // Telemetry Info\n        this.parameters.set(AADServerParamKeys.X_CLIENT_SKU, libraryInfo.sku);\n        this.parameters.set(AADServerParamKeys.X_CLIENT_VER, libraryInfo.version);\n        if (libraryInfo.os) {\n            this.parameters.set(AADServerParamKeys.X_CLIENT_OS, libraryInfo.os);\n        }\n        if (libraryInfo.cpu) {\n            this.parameters.set(AADServerParamKeys.X_CLIENT_CPU, libraryInfo.cpu);\n        }\n    }\n    /**\n     * Add client telemetry parameters\n     * @param appTelemetry\n     */\n    addApplicationTelemetry(appTelemetry) {\n        if (appTelemetry?.appName) {\n            this.parameters.set(AADServerParamKeys.X_APP_NAME, appTelemetry.appName);\n        }\n        if (appTelemetry?.appVersion) {\n            this.parameters.set(AADServerParamKeys.X_APP_VER, appTelemetry.appVersion);\n        }\n    }\n    /**\n     * add prompt\n     * @param prompt\n     */\n    addPrompt(prompt) {\n        RequestValidator.validatePrompt(prompt);\n        this.parameters.set(`${AADServerParamKeys.PROMPT}`, encodeURIComponent(prompt));\n    }\n    /**\n     * add state\n     * @param state\n     */\n    addState(state) {\n        if (state) {\n            this.parameters.set(AADServerParamKeys.STATE, encodeURIComponent(state));\n        }\n    }\n    /**\n     * add nonce\n     * @param nonce\n     */\n    addNonce(nonce) {\n        this.parameters.set(AADServerParamKeys.NONCE, encodeURIComponent(nonce));\n    }\n    /**\n     * add code_challenge and code_challenge_method\n     * - throw if either of them are not passed\n     * @param codeChallenge\n     * @param codeChallengeMethod\n     */\n    addCodeChallengeParams(codeChallenge, codeChallengeMethod) {\n        RequestValidator.validateCodeChallengeParams(codeChallenge, codeChallengeMethod);\n        if (codeChallenge && codeChallengeMethod) {\n            this.parameters.set(AADServerParamKeys.CODE_CHALLENGE, encodeURIComponent(codeChallenge));\n            this.parameters.set(AADServerParamKeys.CODE_CHALLENGE_METHOD, encodeURIComponent(codeChallengeMethod));\n        }\n        else {\n            throw createClientConfigurationError(pkceParamsMissing);\n        }\n    }\n    /**\n     * add the `authorization_code` passed by the user to exchange for a token\n     * @param code\n     */\n    addAuthorizationCode(code) {\n        this.parameters.set(AADServerParamKeys.CODE, encodeURIComponent(code));\n    }\n    /**\n     * add the `authorization_code` passed by the user to exchange for a token\n     * @param code\n     */\n    addDeviceCode(code) {\n        this.parameters.set(AADServerParamKeys.DEVICE_CODE, encodeURIComponent(code));\n    }\n    /**\n     * add the `refreshToken` passed by the user\n     * @param refreshToken\n     */\n    addRefreshToken(refreshToken) {\n        this.parameters.set(AADServerParamKeys.REFRESH_TOKEN, encodeURIComponent(refreshToken));\n    }\n    /**\n     * add the `code_verifier` passed by the user to exchange for a token\n     * @param codeVerifier\n     */\n    addCodeVerifier(codeVerifier) {\n        this.parameters.set(AADServerParamKeys.CODE_VERIFIER, encodeURIComponent(codeVerifier));\n    }\n    /**\n     * add client_secret\n     * @param clientSecret\n     */\n    addClientSecret(clientSecret) {\n        this.parameters.set(AADServerParamKeys.CLIENT_SECRET, encodeURIComponent(clientSecret));\n    }\n    /**\n     * add clientAssertion for confidential client flows\n     * @param clientAssertion\n     */\n    addClientAssertion(clientAssertion) {\n        if (clientAssertion) {\n            this.parameters.set(AADServerParamKeys.CLIENT_ASSERTION, encodeURIComponent(clientAssertion));\n        }\n    }\n    /**\n     * add clientAssertionType for confidential client flows\n     * @param clientAssertionType\n     */\n    addClientAssertionType(clientAssertionType) {\n        if (clientAssertionType) {\n            this.parameters.set(AADServerParamKeys.CLIENT_ASSERTION_TYPE, encodeURIComponent(clientAssertionType));\n        }\n    }\n    /**\n     * add OBO assertion for confidential client flows\n     * @param clientAssertion\n     */\n    addOboAssertion(oboAssertion) {\n        this.parameters.set(AADServerParamKeys.OBO_ASSERTION, encodeURIComponent(oboAssertion));\n    }\n    /**\n     * add grant type\n     * @param grantType\n     */\n    addRequestTokenUse(tokenUse) {\n        this.parameters.set(AADServerParamKeys.REQUESTED_TOKEN_USE, encodeURIComponent(tokenUse));\n    }\n    /**\n     * add grant type\n     * @param grantType\n     */\n    addGrantType(grantType) {\n        this.parameters.set(AADServerParamKeys.GRANT_TYPE, encodeURIComponent(grantType));\n    }\n    /**\n     * add client info\n     *\n     */\n    addClientInfo() {\n        this.parameters.set(CLIENT_INFO, \"1\");\n    }\n    /**\n     * add extraQueryParams\n     * @param eQParams\n     */\n    addExtraQueryParameters(eQParams) {\n        const sanitizedEQParams = RequestValidator.sanitizeEQParams(eQParams, this.parameters);\n        Object.keys(sanitizedEQParams).forEach((key) => {\n            this.parameters.set(key, eQParams[key]);\n        });\n    }\n    addClientCapabilitiesToClaims(claims, clientCapabilities) {\n        let mergedClaims;\n        // Parse provided claims into JSON object or initialize empty object\n        if (!claims) {\n            mergedClaims = {};\n        }\n        else {\n            try {\n                mergedClaims = JSON.parse(claims);\n            }\n            catch (e) {\n                throw createClientConfigurationError(invalidClaims);\n            }\n        }\n        if (clientCapabilities && clientCapabilities.length > 0) {\n            if (!mergedClaims.hasOwnProperty(ClaimsRequestKeys.ACCESS_TOKEN)) {\n                // Add access_token key to claims object\n                mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN] = {};\n            }\n            // Add xms_cc claim with provided clientCapabilities to access_token key\n            mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN][ClaimsRequestKeys.XMS_CC] = {\n                values: clientCapabilities,\n            };\n        }\n        return JSON.stringify(mergedClaims);\n    }\n    /**\n     * adds `username` for Password Grant flow\n     * @param username\n     */\n    addUsername(username) {\n        this.parameters.set(PasswordGrantConstants.username, encodeURIComponent(username));\n    }\n    /**\n     * adds `password` for Password Grant flow\n     * @param password\n     */\n    addPassword(password) {\n        this.parameters.set(PasswordGrantConstants.password, encodeURIComponent(password));\n    }\n    /**\n     * add pop_jwk to query params\n     * @param cnfString\n     */\n    addPopToken(cnfString) {\n        if (cnfString) {\n            this.parameters.set(AADServerParamKeys.TOKEN_TYPE, AuthenticationScheme.POP);\n            this.parameters.set(AADServerParamKeys.REQ_CNF, encodeURIComponent(cnfString));\n        }\n    }\n    /**\n     * add SSH JWK and key ID to query params\n     */\n    addSshJwk(sshJwkString) {\n        if (sshJwkString) {\n            this.parameters.set(AADServerParamKeys.TOKEN_TYPE, AuthenticationScheme.SSH);\n            this.parameters.set(AADServerParamKeys.REQ_CNF, encodeURIComponent(sshJwkString));\n        }\n    }\n    /**\n     * add server telemetry fields\n     * @param serverTelemetryManager\n     */\n    addServerTelemetry(serverTelemetryManager) {\n        this.parameters.set(AADServerParamKeys.X_CLIENT_CURR_TELEM, serverTelemetryManager.generateCurrentRequestHeaderValue());\n        this.parameters.set(AADServerParamKeys.X_CLIENT_LAST_TELEM, serverTelemetryManager.generateLastRequestHeaderValue());\n    }\n    /**\n     * Adds parameter that indicates to the server that throttling is supported\n     */\n    addThrottling() {\n        this.parameters.set(AADServerParamKeys.X_MS_LIB_CAPABILITY, ThrottlingConstants.X_MS_LIB_CAPABILITY_VALUE);\n    }\n    /**\n     * Adds logout_hint parameter for \"silent\" logout which prevent server account picker\n     */\n    addLogoutHint(logoutHint) {\n        this.parameters.set(AADServerParamKeys.LOGOUT_HINT, encodeURIComponent(logoutHint));\n    }\n    /**\n     * Utility to create a URL from the params map\n     */\n    createQueryString() {\n        const queryParameterArray = new Array();\n        this.parameters.forEach((value, key) => {\n            queryParameterArray.push(`${key}=${value}`);\n        });\n        return queryParameterArray.join(\"&\");\n    }\n}\n\nexport { RequestParameterBuilder };\n//# sourceMappingURL=RequestParameterBuilder.mjs.map\n","/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nfunction isOpenIdConfigResponse(response) {\n    return (response.hasOwnProperty(\"authorization_endpoint\") &&\n        response.hasOwnProperty(\"token_endpoint\") &&\n        response.hasOwnProperty(\"issuer\") &&\n        response.hasOwnProperty(\"jwks_uri\"));\n}\n\nexport { isOpenIdConfigResponse };\n//# sourceMappingURL=OpenIdConfigResponse.mjs.map\n","/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\nimport { AUTHORITY_METADATA_CONSTANTS } from '../../utils/Constants.mjs';\nimport { TimeUtils } from '../../utils/TimeUtils.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/** @internal */\nclass AuthorityMetadataEntity {\n    constructor() {\n        this.expiresAt =\n            TimeUtils.nowSeconds() +\n                AUTHORITY_METADATA_CONSTANTS.REFRESH_TIME_SECONDS;\n    }\n    /**\n     * Update the entity with new aliases, preferred_cache and preferred_network values\n     * @param metadata\n     * @param fromNetwork\n     */\n    updateCloudDiscoveryMetadata(metadata, fromNetwork) {\n        this.aliases = metadata.aliases;\n        this.preferred_cache = metadata.preferred_cache;\n        this.preferred_network = metadata.preferred_network;\n        this.aliasesFromNetwork = fromNetwork;\n    }\n    /**\n     * Update the entity with new endpoints\n     * @param metadata\n     * @param fromNetwork\n     */\n    updateEndpointMetadata(metadata, fromNetwork) {\n        this.authorization_endpoint = metadata.authorization_endpoint;\n        this.token_endpoint = metadata.token_endpoint;\n        this.end_session_endpoint = metadata.end_session_endpoint;\n        this.issuer = metadata.issuer;\n        this.endpointsFromNetwork = fromNetwork;\n        this.jwks_uri = metadata.jwks_uri;\n    }\n    /**\n     * Save the authority that was used to create this cache entry\n     * @param authority\n     */\n    updateCanonicalAuthority(authority) {\n        this.canonical_authority = authority;\n    }\n    /**\n     * Reset the exiresAt value\n     */\n    resetExpiresAt() {\n        this.expiresAt =\n            TimeUtils.nowSeconds() +\n                AUTHORITY_METADATA_CONSTANTS.REFRESH_TIME_SECONDS;\n    }\n    /**\n     * Returns whether or not the data needs to be refreshed\n     */\n    isExpired() {\n        return this.expiresAt <= TimeUtils.nowSeconds();\n    }\n    /**\n     * Validates an entity: checks for all expected params\n     * @param entity\n     */\n    static isAuthorityMetadataEntity(key, entity) {\n        if (!entity) {\n            return false;\n        }\n        return (key.indexOf(AUTHORITY_METADATA_CONSTANTS.CACHE_KEY) === 0 &&\n            entity.hasOwnProperty(\"aliases\") &&\n            entity.hasOwnProperty(\"preferred_cache\") &&\n            entity.hasOwnProperty(\"preferred_network\") &&\n            entity.hasOwnProperty(\"canonical_authority\") &&\n            entity.hasOwnProperty(\"authorization_endpoint\") &&\n            entity.hasOwnProperty(\"token_endpoint\") &&\n            entity.hasOwnProperty(\"issuer\") &&\n            entity.hasOwnProperty(\"aliasesFromNetwork\") &&\n            entity.hasOwnProperty(\"endpointsFromNetwork\") &&\n            entity.hasOwnProperty(\"expiresAt\") &&\n            entity.hasOwnProperty(\"jwks_uri\"));\n    }\n}\n\nexport { AuthorityMetadataEntity };\n//# sourceMappingURL=AuthorityMetadataEntity.mjs.map\n","/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nfunction isCloudInstanceDiscoveryResponse(response) {\n    return (response.hasOwnProperty(\"tenant_discovery_endpoint\") &&\n        response.hasOwnProperty(\"metadata\"));\n}\n\nexport { isCloudInstanceDiscoveryResponse };\n//# sourceMappingURL=CloudInstanceDiscoveryResponse.mjs.map\n","/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nfunction isCloudInstanceDiscoveryErrorResponse(response) {\n    return (response.hasOwnProperty(\"error\") &&\n        response.hasOwnProperty(\"error_description\"));\n}\n\nexport { isCloudInstanceDiscoveryErrorResponse };\n//# sourceMappingURL=CloudInstanceDiscoveryErrorResponse.mjs.map\n","/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Enumeration of operations that are instrumented by have their performance measured by the PerformanceClient.\n *\n * @export\n * @enum {number}\n */\nconst PerformanceEvents = {\n    /**\n     * acquireTokenByCode API (msal-browser and msal-node).\n     * Used to acquire tokens by trading an authorization code against the token endpoint.\n     */\n    AcquireTokenByCode: \"acquireTokenByCode\",\n    /**\n     * acquireTokenByRefreshToken API (msal-browser and msal-node).\n     * Used to renew an access token using a refresh token against the token endpoint.\n     */\n    AcquireTokenByRefreshToken: \"acquireTokenByRefreshToken\",\n    /**\n     * acquireTokenSilent API (msal-browser and msal-node).\n     * Used to silently acquire a new access token (from the cache or the network).\n     */\n    AcquireTokenSilent: \"acquireTokenSilent\",\n    /**\n     * acquireTokenSilentAsync (msal-browser).\n     * Internal API for acquireTokenSilent.\n     */\n    AcquireTokenSilentAsync: \"acquireTokenSilentAsync\",\n    /**\n     * acquireTokenPopup (msal-browser).\n     * Used to acquire a new access token interactively through pop ups\n     */\n    AcquireTokenPopup: \"acquireTokenPopup\",\n    /**\n     * getPublicKeyThumbprint API in CryptoOpts class (msal-browser).\n     * Used to generate a public/private keypair and generate a public key thumbprint for pop requests.\n     */\n    CryptoOptsGetPublicKeyThumbprint: \"cryptoOptsGetPublicKeyThumbprint\",\n    /**\n     * signJwt API in CryptoOpts class (msal-browser).\n     * Used to signed a pop token.\n     */\n    CryptoOptsSignJwt: \"cryptoOptsSignJwt\",\n    /**\n     * acquireToken API in the SilentCacheClient class (msal-browser).\n     * Used to read access tokens from the cache.\n     */\n    SilentCacheClientAcquireToken: \"silentCacheClientAcquireToken\",\n    /**\n     * acquireToken API in the SilentIframeClient class (msal-browser).\n     * Used to acquire a new set of tokens from the authorize endpoint in a hidden iframe.\n     */\n    SilentIframeClientAcquireToken: \"silentIframeClientAcquireToken\",\n    /**\n     * acquireToken API in SilentRereshClient (msal-browser).\n     * Used to acquire a new set of tokens from the token endpoint using a refresh token.\n     */\n    SilentRefreshClientAcquireToken: \"silentRefreshClientAcquireToken\",\n    /**\n     * ssoSilent API (msal-browser).\n     * Used to silently acquire an authorization code and set of tokens using a hidden iframe.\n     */\n    SsoSilent: \"ssoSilent\",\n    /**\n     * getDiscoveredAuthority API in StandardInteractionClient class (msal-browser).\n     * Used to load authority metadata for a request.\n     */\n    StandardInteractionClientGetDiscoveredAuthority: \"standardInteractionClientGetDiscoveredAuthority\",\n    /**\n     * acquireToken APIs in msal-browser.\n     * Used to make an /authorize endpoint call with native brokering enabled.\n     */\n    FetchAccountIdWithNativeBroker: \"fetchAccountIdWithNativeBroker\",\n    /**\n     * acquireToken API in NativeInteractionClient class (msal-browser).\n     * Used to acquire a token from Native component when native brokering is enabled.\n     */\n    NativeInteractionClientAcquireToken: \"nativeInteractionClientAcquireToken\",\n    /**\n     * Time spent creating default headers for requests to token endpoint\n     */\n    BaseClientCreateTokenRequestHeaders: \"baseClientCreateTokenRequestHeaders\",\n    /**\n     * Time spent sending/waiting for the response of a request to the token endpoint\n     */\n    RefreshTokenClientExecutePostToTokenEndpoint: \"refreshTokenClientExecutePostToTokenEndpoint\",\n    AuthorizationCodeClientExecutePostToTokenEndpoint: \"authorizationCodeClientExecutePostToTokenEndpoint\",\n    /**\n     * Used to measure the time taken for completing embedded-broker handshake (PW-Broker).\n     */\n    BrokerHandhshake: \"brokerHandshake\",\n    /**\n     * acquireTokenByRefreshToken API in BrokerClientApplication (PW-Broker) .\n     */\n    AcquireTokenByRefreshTokenInBroker: \"acquireTokenByRefreshTokenInBroker\",\n    /**\n     * Time taken for token acquisition by broker\n     */\n    AcquireTokenByBroker: \"acquireTokenByBroker\",\n    /**\n     * Time spent on the network for refresh token acquisition\n     */\n    RefreshTokenClientExecuteTokenRequest: \"refreshTokenClientExecuteTokenRequest\",\n    /**\n     * Time taken for acquiring refresh token , records RT size\n     */\n    RefreshTokenClientAcquireToken: \"refreshTokenClientAcquireToken\",\n    /**\n     * Time taken for acquiring cached refresh token\n     */\n    RefreshTokenClientAcquireTokenWithCachedRefreshToken: \"refreshTokenClientAcquireTokenWithCachedRefreshToken\",\n    /**\n     * acquireTokenByRefreshToken API in RefreshTokenClient (msal-common).\n     */\n    RefreshTokenClientAcquireTokenByRefreshToken: \"refreshTokenClientAcquireTokenByRefreshToken\",\n    /**\n     * Helper function to create token request body in RefreshTokenClient (msal-common).\n     */\n    RefreshTokenClientCreateTokenRequestBody: \"refreshTokenClientCreateTokenRequestBody\",\n    /**\n     * acquireTokenFromCache (msal-browser).\n     * Internal API for acquiring token from cache\n     */\n    AcquireTokenFromCache: \"acquireTokenFromCache\",\n    SilentFlowClientAcquireCachedToken: \"silentFlowClientAcquireCachedToken\",\n    SilentFlowClientGenerateResultFromCacheRecord: \"silentFlowClientGenerateResultFromCacheRecord\",\n    /**\n     * acquireTokenBySilentIframe (msal-browser).\n     * Internal API for acquiring token by silent Iframe\n     */\n    AcquireTokenBySilentIframe: \"acquireTokenBySilentIframe\",\n    /**\n     * Internal API for initializing base request in BaseInteractionClient (msal-browser)\n     */\n    InitializeBaseRequest: \"initializeBaseRequest\",\n    /**\n     * Internal API for initializing silent request in SilentCacheClient (msal-browser)\n     */\n    InitializeSilentRequest: \"initializeSilentRequest\",\n    InitializeClientApplication: \"initializeClientApplication\",\n    /**\n     * Helper function in SilentIframeClient class (msal-browser).\n     */\n    SilentIframeClientTokenHelper: \"silentIframeClientTokenHelper\",\n    /**\n     * SilentHandler\n     */\n    SilentHandlerInitiateAuthRequest: \"silentHandlerInitiateAuthRequest\",\n    SilentHandlerMonitorIframeForHash: \"silentHandlerMonitorIframeForHash\",\n    SilentHandlerLoadFrame: \"silentHandlerLoadFrame\",\n    SilentHandlerLoadFrameSync: \"silentHandlerLoadFrameSync\",\n    /**\n     * Helper functions in StandardInteractionClient class (msal-browser)\n     */\n    StandardInteractionClientCreateAuthCodeClient: \"standardInteractionClientCreateAuthCodeClient\",\n    StandardInteractionClientGetClientConfiguration: \"standardInteractionClientGetClientConfiguration\",\n    StandardInteractionClientInitializeAuthorizationRequest: \"standardInteractionClientInitializeAuthorizationRequest\",\n    StandardInteractionClientInitializeAuthorizationCodeRequest: \"standardInteractionClientInitializeAuthorizationCodeRequest\",\n    /**\n     * getAuthCodeUrl API (msal-browser and msal-node).\n     */\n    GetAuthCodeUrl: \"getAuthCodeUrl\",\n    /**\n     * Functions from InteractionHandler (msal-browser)\n     */\n    HandleCodeResponseFromServer: \"handleCodeResponseFromServer\",\n    HandleCodeResponse: \"handleCodeResponse\",\n    UpdateTokenEndpointAuthority: \"updateTokenEndpointAuthority\",\n    /**\n     * APIs in Authorization Code Client (msal-common)\n     */\n    AuthClientAcquireToken: \"authClientAcquireToken\",\n    AuthClientExecuteTokenRequest: \"authClientExecuteTokenRequest\",\n    AuthClientCreateTokenRequestBody: \"authClientCreateTokenRequestBody\",\n    AuthClientCreateQueryString: \"authClientCreateQueryString\",\n    /**\n     * Generate functions in PopTokenGenerator (msal-common)\n     */\n    PopTokenGenerateCnf: \"popTokenGenerateCnf\",\n    PopTokenGenerateKid: \"popTokenGenerateKid\",\n    /**\n     * handleServerTokenResponse API in ResponseHandler (msal-common)\n     */\n    HandleServerTokenResponse: \"handleServerTokenResponse\",\n    DeserializeResponse: \"deserializeResponse\",\n    /**\n     * Authority functions\n     */\n    AuthorityFactoryCreateDiscoveredInstance: \"authorityFactoryCreateDiscoveredInstance\",\n    AuthorityResolveEndpointsAsync: \"authorityResolveEndpointsAsync\",\n    AuthorityResolveEndpointsFromLocalSources: \"authorityResolveEndpointsFromLocalSources\",\n    AuthorityGetCloudDiscoveryMetadataFromNetwork: \"authorityGetCloudDiscoveryMetadataFromNetwork\",\n    AuthorityUpdateCloudDiscoveryMetadata: \"authorityUpdateCloudDiscoveryMetadata\",\n    AuthorityGetEndpointMetadataFromNetwork: \"authorityGetEndpointMetadataFromNetwork\",\n    AuthorityUpdateEndpointMetadata: \"authorityUpdateEndpointMetadata\",\n    AuthorityUpdateMetadataWithRegionalInformation: \"authorityUpdateMetadataWithRegionalInformation\",\n    /**\n     * Region Discovery functions\n     */\n    RegionDiscoveryDetectRegion: \"regionDiscoveryDetectRegion\",\n    RegionDiscoveryGetRegionFromIMDS: \"regionDiscoveryGetRegionFromIMDS\",\n    RegionDiscoveryGetCurrentVersion: \"regionDiscoveryGetCurrentVersion\",\n    AcquireTokenByCodeAsync: \"acquireTokenByCodeAsync\",\n    GetEndpointMetadataFromNetwork: \"getEndpointMetadataFromNetwork\",\n    GetCloudDiscoveryMetadataFromNetworkMeasurement: \"getCloudDiscoveryMetadataFromNetworkMeasurement\",\n    HandleRedirectPromiseMeasurement: \"handleRedirectPromiseMeasurement\",\n    UpdateCloudDiscoveryMetadataMeasurement: \"updateCloudDiscoveryMetadataMeasurement\",\n    UsernamePasswordClientAcquireToken: \"usernamePasswordClientAcquireToken\",\n    NativeMessageHandlerHandshake: \"nativeMessageHandlerHandshake\",\n    NativeGenerateAuthResult: \"nativeGenerateAuthResult\",\n    RemoveHiddenIframe: \"removeHiddenIframe\",\n    /**\n     * Cache operations\n     */\n    ClearTokensAndKeysWithClaims: \"clearTokensAndKeysWithClaims\",\n    CacheManagerGetRefreshToken: \"cacheManagerGetRefreshToken\",\n    /**\n     * Crypto Operations\n     */\n    GeneratePkceCodes: \"generatePkceCodes\",\n    GenerateCodeVerifier: \"generateCodeVerifier\",\n    GenerateCodeChallengeFromVerifier: \"generateCodeChallengeFromVerifier\",\n    Sha256Digest: \"sha256Digest\",\n    GetRandomValues: \"getRandomValues\",\n};\n/**\n * State of the performance event.\n *\n * @export\n * @enum {number}\n */\nconst PerformanceEventStatus = {\n    NotStarted: 0,\n    InProgress: 1,\n    Completed: 2,\n};\nconst IntFields = new Set([\n    \"accessTokenSize\",\n    \"durationMs\",\n    \"idTokenSize\",\n    \"matsSilentStatus\",\n    \"matsHttpStatus\",\n    \"refreshTokenSize\",\n    \"queuedTimeMs\",\n    \"startTimeMs\",\n    \"status\",\n    \"multiMatchedAT\",\n    \"multiMatchedID\",\n    \"multiMatchedRT\",\n]);\n\nexport { IntFields, PerformanceEventStatus, PerformanceEvents };\n//# sourceMappingURL=PerformanceEvent.mjs.map\n","/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Wraps a function with a performance measurement.\n * Usage: invoke(functionToCall, performanceClient, \"EventName\", \"correlationId\")(...argsToPassToFunction)\n * @param callback\n * @param eventName\n * @param logger\n * @param telemetryClient\n * @param correlationId\n * @returns\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst invoke = (callback, eventName, logger, telemetryClient, correlationId) => {\n    return (...args) => {\n        logger.trace(`Executing function ${eventName}`);\n        const inProgressEvent = telemetryClient?.startMeasurement(eventName, correlationId);\n        try {\n            const result = callback(...args);\n            inProgressEvent?.end({\n                success: true,\n            });\n            logger.trace(`Returning result from ${eventName}`);\n            return result;\n        }\n        catch (e) {\n            logger.trace(`Error occurred in ${eventName}`);\n            try {\n                logger.trace(JSON.stringify(e));\n            }\n            catch (e) {\n                logger.trace(\"Unable to print error message.\");\n            }\n            inProgressEvent?.end({\n                success: false,\n            });\n            throw e;\n        }\n    };\n};\n/**\n * Wraps an async function with a performance measurement.\n * Usage: invokeAsync(functionToCall, performanceClient, \"EventName\", \"correlationId\")(...argsToPassToFunction)\n * @param callback\n * @param eventName\n * @param logger\n * @param telemetryClient\n * @param correlationId\n * @returns\n * @internal\n *\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst invokeAsync = (callback, eventName, logger, telemetryClient, correlationId) => {\n    return (...args) => {\n        logger.trace(`Executing function ${eventName}`);\n        const inProgressEvent = telemetryClient?.startMeasurement(eventName, correlationId);\n        telemetryClient?.setPreQueueTime(eventName, correlationId);\n        return callback(...args)\n            .then((response) => {\n            logger.trace(`Returning result from ${eventName}`);\n            inProgressEvent?.end({\n                success: true,\n            });\n            return response;\n        })\n            .catch((e) => {\n            logger.trace(`Error occurred in ${eventName}`);\n            try {\n                logger.trace(JSON.stringify(e));\n            }\n            catch (e) {\n                logger.trace(\"Unable to print error message.\");\n            }\n            inProgressEvent?.end({\n                success: false,\n            });\n            throw e;\n        });\n    };\n};\n\nexport { invoke, invokeAsync };\n//# sourceMappingURL=FunctionWrappers.mjs.map\n","/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\nimport { Constants, ResponseCodes, RegionDiscoverySources } from '../utils/Constants.mjs';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.mjs';\nimport { invokeAsync } from '../utils/FunctionWrappers.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nclass RegionDiscovery {\n    constructor(networkInterface, logger, performanceClient, correlationId) {\n        this.networkInterface = networkInterface;\n        this.logger = logger;\n        this.performanceClient = performanceClient;\n        this.correlationId = correlationId;\n    }\n    /**\n     * Detect the region from the application's environment.\n     *\n     * @returns Promise<string | null>\n     */\n    async detectRegion(environmentRegion, regionDiscoveryMetadata) {\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.RegionDiscoveryDetectRegion, this.correlationId);\n        // Initialize auto detected region with the region from the envrionment\n        let autodetectedRegionName = environmentRegion;\n        // Check if a region was detected from the environment, if not, attempt to get the region from IMDS\n        if (!autodetectedRegionName) {\n            const options = RegionDiscovery.IMDS_OPTIONS;\n            try {\n                const localIMDSVersionResponse = await invokeAsync(this.getRegionFromIMDS.bind(this), PerformanceEvents.RegionDiscoveryGetRegionFromIMDS, this.logger, this.performanceClient, this.correlationId)(Constants.IMDS_VERSION, options);\n                if (localIMDSVersionResponse.status ===\n                    ResponseCodes.httpSuccess) {\n                    autodetectedRegionName = localIMDSVersionResponse.body;\n                    regionDiscoveryMetadata.region_source =\n                        RegionDiscoverySources.IMDS;\n                }\n                // If the response using the local IMDS version failed, try to fetch the current version of IMDS and retry.\n                if (localIMDSVersionResponse.status ===\n                    ResponseCodes.httpBadRequest) {\n                    const currentIMDSVersion = await invokeAsync(this.getCurrentVersion.bind(this), PerformanceEvents.RegionDiscoveryGetCurrentVersion, this.logger, this.performanceClient, this.correlationId)(options);\n                    if (!currentIMDSVersion) {\n                        regionDiscoveryMetadata.region_source =\n                            RegionDiscoverySources.FAILED_AUTO_DETECTION;\n                        return null;\n                    }\n                    const currentIMDSVersionResponse = await invokeAsync(this.getRegionFromIMDS.bind(this), PerformanceEvents.RegionDiscoveryGetRegionFromIMDS, this.logger, this.performanceClient, this.correlationId)(currentIMDSVersion, options);\n                    if (currentIMDSVersionResponse.status ===\n                        ResponseCodes.httpSuccess) {\n                        autodetectedRegionName =\n                            currentIMDSVersionResponse.body;\n                        regionDiscoveryMetadata.region_source =\n                            RegionDiscoverySources.IMDS;\n                    }\n                }\n            }\n            catch (e) {\n                regionDiscoveryMetadata.region_source =\n                    RegionDiscoverySources.FAILED_AUTO_DETECTION;\n                return null;\n            }\n        }\n        else {\n            regionDiscoveryMetadata.region_source =\n                RegionDiscoverySources.ENVIRONMENT_VARIABLE;\n        }\n        // If no region was auto detected from the environment or from the IMDS endpoint, mark the attempt as a FAILED_AUTO_DETECTION\n        if (!autodetectedRegionName) {\n            regionDiscoveryMetadata.region_source =\n                RegionDiscoverySources.FAILED_AUTO_DETECTION;\n        }\n        return autodetectedRegionName || null;\n    }\n    /**\n     * Make the call to the IMDS endpoint\n     *\n     * @param imdsEndpointUrl\n     * @returns Promise<NetworkResponse<string>>\n     */\n    async getRegionFromIMDS(version, options) {\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.RegionDiscoveryGetRegionFromIMDS, this.correlationId);\n        return this.networkInterface.sendGetRequestAsync(`${Constants.IMDS_ENDPOINT}?api-version=${version}&format=text`, options, Constants.IMDS_TIMEOUT);\n    }\n    /**\n     * Get the most recent version of the IMDS endpoint available\n     *\n     * @returns Promise<string | null>\n     */\n    async getCurrentVersion(options) {\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.RegionDiscoveryGetCurrentVersion, this.correlationId);\n        try {\n            const response = await this.networkInterface.sendGetRequestAsync(`${Constants.IMDS_ENDPOINT}?format=json`, options);\n            // When IMDS endpoint is called without the api version query param, bad request response comes back with latest version.\n            if (response.status === ResponseCodes.httpBadRequest &&\n                response.body &&\n                response.body[\"newest-versions\"] &&\n                response.body[\"newest-versions\"].length > 0) {\n                return response.body[\"newest-versions\"][0];\n            }\n            return null;\n        }\n        catch (e) {\n            return null;\n        }\n    }\n}\n// Options for the IMDS endpoint request\nRegionDiscovery.IMDS_OPTIONS = {\n    headers: {\n        Metadata: \"true\",\n    },\n};\n\nexport { RegionDiscovery };\n//# sourceMappingURL=RegionDiscovery.mjs.map\n","/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\nimport { AuthorityType } from './AuthorityType.mjs';\nimport { isOpenIdConfigResponse } from './OpenIdConfigResponse.mjs';\nimport { UrlString } from '../url/UrlString.mjs';\nimport { createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { Constants, AuthorityMetadataSource, RegionDiscoveryOutcomes, AADAuthorityConstants } from '../utils/Constants.mjs';\nimport { EndpointMetadata, getCloudDiscoveryMetadataFromHardcodedValues, getCloudDiscoveryMetadataFromNetworkResponse, InstanceDiscoveryMetadataAliases } from './AuthorityMetadata.mjs';\nimport { createClientConfigurationError } from '../error/ClientConfigurationError.mjs';\nimport { ProtocolMode } from './ProtocolMode.mjs';\nimport { AuthorityMetadataEntity } from '../cache/entities/AuthorityMetadataEntity.mjs';\nimport { AzureCloudInstance } from './AuthorityOptions.mjs';\nimport { isCloudInstanceDiscoveryResponse } from './CloudInstanceDiscoveryResponse.mjs';\nimport { isCloudInstanceDiscoveryErrorResponse } from './CloudInstanceDiscoveryErrorResponse.mjs';\nimport { RegionDiscovery } from './RegionDiscovery.mjs';\nimport { AuthError } from '../error/AuthError.mjs';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.mjs';\nimport { invokeAsync } from '../utils/FunctionWrappers.mjs';\nimport { endpointResolutionError, endSessionEndpointNotSupported, openIdConfigError } from '../error/ClientAuthErrorCodes.mjs';\nimport { invalidAuthorityMetadata, untrustedAuthority, invalidCloudDiscoveryMetadata } from '../error/ClientConfigurationErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * The authority class validates the authority URIs used by the user, and retrieves the OpenID Configuration Data from the\n * endpoint. It will store the pertinent config data in this object for use during token calls.\n * @internal\n */\nclass Authority {\n    constructor(authority, networkInterface, cacheManager, authorityOptions, logger, performanceClient, correlationId) {\n        this.canonicalAuthority = authority;\n        this._canonicalAuthority.validateAsUri();\n        this.networkInterface = networkInterface;\n        this.cacheManager = cacheManager;\n        this.authorityOptions = authorityOptions;\n        this.regionDiscoveryMetadata = {\n            region_used: undefined,\n            region_source: undefined,\n            region_outcome: undefined,\n        };\n        this.logger = logger;\n        this.performanceClient = performanceClient;\n        this.correlationId = correlationId;\n        this.regionDiscovery = new RegionDiscovery(networkInterface, this.logger, this.performanceClient, this.correlationId);\n    }\n    /**\n     * Get {@link AuthorityType}\n     * @param authorityUri {@link IUri}\n     * @private\n     */\n    getAuthorityType(authorityUri) {\n        // CIAM auth url pattern is being standardized as: <tenant>.ciamlogin.com\n        if (authorityUri.HostNameAndPort.endsWith(Constants.CIAM_AUTH_URL)) {\n            return AuthorityType.Ciam;\n        }\n        const pathSegments = authorityUri.PathSegments;\n        if (pathSegments.length) {\n            switch (pathSegments[0].toLowerCase()) {\n                case Constants.ADFS:\n                    return AuthorityType.Adfs;\n                case Constants.DSTS:\n                    return AuthorityType.Dsts;\n            }\n        }\n        return AuthorityType.Default;\n    }\n    // See above for AuthorityType\n    get authorityType() {\n        return this.getAuthorityType(this.canonicalAuthorityUrlComponents);\n    }\n    /**\n     * ProtocolMode enum representing the way endpoints are constructed.\n     */\n    get protocolMode() {\n        return this.authorityOptions.protocolMode;\n    }\n    /**\n     * Returns authorityOptions which can be used to reinstantiate a new authority instance\n     */\n    get options() {\n        return this.authorityOptions;\n    }\n    /**\n     * A URL that is the authority set by the developer\n     */\n    get canonicalAuthority() {\n        return this._canonicalAuthority.urlString;\n    }\n    /**\n     * Sets canonical authority.\n     */\n    set canonicalAuthority(url) {\n        this._canonicalAuthority = new UrlString(url);\n        this._canonicalAuthority.validateAsUri();\n        this._canonicalAuthorityUrlComponents = null;\n    }\n    /**\n     * Get authority components.\n     */\n    get canonicalAuthorityUrlComponents() {\n        if (!this._canonicalAuthorityUrlComponents) {\n            this._canonicalAuthorityUrlComponents =\n                this._canonicalAuthority.getUrlComponents();\n        }\n        return this._canonicalAuthorityUrlComponents;\n    }\n    /**\n     * Get hostname and port i.e. login.microsoftonline.com\n     */\n    get hostnameAndPort() {\n        return this.canonicalAuthorityUrlComponents.HostNameAndPort.toLowerCase();\n    }\n    /**\n     * Get tenant for authority.\n     */\n    get tenant() {\n        return this.canonicalAuthorityUrlComponents.PathSegments[0];\n    }\n    /**\n     * OAuth /authorize endpoint for requests\n     */\n    get authorizationEndpoint() {\n        if (this.discoveryComplete()) {\n            return this.replacePath(this.metadata.authorization_endpoint);\n        }\n        else {\n            throw createClientAuthError(endpointResolutionError);\n        }\n    }\n    /**\n     * OAuth /token endpoint for requests\n     */\n    get tokenEndpoint() {\n        if (this.discoveryComplete()) {\n            return this.replacePath(this.metadata.token_endpoint);\n        }\n        else {\n            throw createClientAuthError(endpointResolutionError);\n        }\n    }\n    get deviceCodeEndpoint() {\n        if (this.discoveryComplete()) {\n            return this.replacePath(this.metadata.token_endpoint.replace(\"/token\", \"/devicecode\"));\n        }\n        else {\n            throw createClientAuthError(endpointResolutionError);\n        }\n    }\n    /**\n     * OAuth logout endpoint for requests\n     */\n    get endSessionEndpoint() {\n        if (this.discoveryComplete()) {\n            // ROPC policies may not have end_session_endpoint set\n            if (!this.metadata.end_session_endpoint) {\n                throw createClientAuthError(endSessionEndpointNotSupported);\n            }\n            return this.replacePath(this.metadata.end_session_endpoint);\n        }\n        else {\n            throw createClientAuthError(endpointResolutionError);\n        }\n    }\n    /**\n     * OAuth issuer for requests\n     */\n    get selfSignedJwtAudience() {\n        if (this.discoveryComplete()) {\n            return this.replacePath(this.metadata.issuer);\n        }\n        else {\n            throw createClientAuthError(endpointResolutionError);\n        }\n    }\n    /**\n     * Jwks_uri for token signing keys\n     */\n    get jwksUri() {\n        if (this.discoveryComplete()) {\n            return this.replacePath(this.metadata.jwks_uri);\n        }\n        else {\n            throw createClientAuthError(endpointResolutionError);\n        }\n    }\n    /**\n     * Returns a flag indicating that tenant name can be replaced in authority {@link IUri}\n     * @param authorityUri {@link IUri}\n     * @private\n     */\n    canReplaceTenant(authorityUri) {\n        return (authorityUri.PathSegments.length === 1 &&\n            !Authority.reservedTenantDomains.has(authorityUri.PathSegments[0]) &&\n            this.getAuthorityType(authorityUri) === AuthorityType.Default &&\n            this.protocolMode === ProtocolMode.AAD);\n    }\n    /**\n     * Replaces tenant in url path with current tenant. Defaults to common.\n     * @param urlString\n     */\n    replaceTenant(urlString) {\n        return urlString.replace(/{tenant}|{tenantid}/g, this.tenant);\n    }\n    /**\n     * Replaces path such as tenant or policy with the current tenant or policy.\n     * @param urlString\n     */\n    replacePath(urlString) {\n        let endpoint = urlString;\n        const cachedAuthorityUrl = new UrlString(this.metadata.canonical_authority);\n        const cachedAuthorityUrlComponents = cachedAuthorityUrl.getUrlComponents();\n        const cachedAuthorityParts = cachedAuthorityUrlComponents.PathSegments;\n        const currentAuthorityParts = this.canonicalAuthorityUrlComponents.PathSegments;\n        currentAuthorityParts.forEach((currentPart, index) => {\n            let cachedPart = cachedAuthorityParts[index];\n            if (index === 0 &&\n                this.canReplaceTenant(cachedAuthorityUrlComponents)) {\n                const tenantId = new UrlString(this.metadata.authorization_endpoint).getUrlComponents().PathSegments[0];\n                /**\n                 * Check if AAD canonical authority contains tenant domain name, for example \"testdomain.onmicrosoft.com\",\n                 * by comparing its first path segment to the corresponding authorization endpoint path segment, which is\n                 * always resolved with tenant id by OIDC.\n                 */\n                if (cachedPart !== tenantId) {\n                    this.logger.verbose(`Replacing tenant domain name ${cachedPart} with id ${tenantId}`);\n                    cachedPart = tenantId;\n                }\n            }\n            if (currentPart !== cachedPart) {\n                endpoint = endpoint.replace(`/${cachedPart}/`, `/${currentPart}/`);\n            }\n        });\n        return this.replaceTenant(endpoint);\n    }\n    /**\n     * The default open id configuration endpoint for any canonical authority.\n     */\n    get defaultOpenIdConfigurationEndpoint() {\n        const canonicalAuthorityHost = this.hostnameAndPort;\n        if (this.canonicalAuthority.endsWith(\"v2.0/\") ||\n            this.authorityType === AuthorityType.Adfs ||\n            (this.protocolMode !== ProtocolMode.AAD &&\n                !this.isAliasOfKnownMicrosoftAuthority(canonicalAuthorityHost))) {\n            return `${this.canonicalAuthority}.well-known/openid-configuration`;\n        }\n        return `${this.canonicalAuthority}v2.0/.well-known/openid-configuration`;\n    }\n    /**\n     * Boolean that returns whethr or not tenant discovery has been completed.\n     */\n    discoveryComplete() {\n        return !!this.metadata;\n    }\n    /**\n     * Perform endpoint discovery to discover aliases, preferred_cache, preferred_network\n     * and the /authorize, /token and logout endpoints.\n     */\n    async resolveEndpointsAsync() {\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthorityResolveEndpointsAsync, this.correlationId);\n        const metadataEntity = this.getCurrentMetadataEntity();\n        const cloudDiscoverySource = await invokeAsync(this.updateCloudDiscoveryMetadata.bind(this), PerformanceEvents.AuthorityUpdateCloudDiscoveryMetadata, this.logger, this.performanceClient, this.correlationId)(metadataEntity);\n        this.canonicalAuthority = this.canonicalAuthority.replace(this.hostnameAndPort, metadataEntity.preferred_network);\n        const endpointSource = await invokeAsync(this.updateEndpointMetadata.bind(this), PerformanceEvents.AuthorityUpdateEndpointMetadata, this.logger, this.performanceClient, this.correlationId)(metadataEntity);\n        this.updateCachedMetadata(metadataEntity, cloudDiscoverySource, {\n            source: endpointSource,\n        });\n    }\n    /**\n     * Returns metadata entity from cache if it exists, otherwiser returns a new metadata entity built\n     * from the configured canonical authority\n     * @returns\n     */\n    getCurrentMetadataEntity() {\n        let metadataEntity = this.cacheManager.getAuthorityMetadataByAlias(this.hostnameAndPort);\n        if (!metadataEntity) {\n            metadataEntity = new AuthorityMetadataEntity();\n            metadataEntity.updateCanonicalAuthority(this.canonicalAuthority);\n        }\n        return metadataEntity;\n    }\n    /**\n     * Updates cached metadata based on metadata source and sets the instance's metadata\n     * property to the same value\n     * @param metadataEntity\n     * @param cloudDiscoverySource\n     * @param endpointMetadataResult\n     */\n    updateCachedMetadata(metadataEntity, cloudDiscoverySource, endpointMetadataResult) {\n        if (cloudDiscoverySource !== AuthorityMetadataSource.CACHE &&\n            endpointMetadataResult?.source !== AuthorityMetadataSource.CACHE) {\n            // Reset the expiration time unless both values came from a successful cache lookup\n            metadataEntity.resetExpiresAt();\n            metadataEntity.updateCanonicalAuthority(this.canonicalAuthority);\n        }\n        const cacheKey = this.cacheManager.generateAuthorityMetadataCacheKey(metadataEntity.preferred_cache);\n        this.cacheManager.setAuthorityMetadata(cacheKey, metadataEntity);\n        this.metadata = metadataEntity;\n    }\n    /**\n     * Update AuthorityMetadataEntity with new endpoints and return where the information came from\n     * @param metadataEntity\n     */\n    async updateEndpointMetadata(metadataEntity) {\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthorityUpdateEndpointMetadata, this.correlationId);\n        const localMetadata = this.updateEndpointMetadataFromLocalSources(metadataEntity);\n        // Further update may be required for hardcoded metadata if regional metadata is preferred\n        if (localMetadata) {\n            if (localMetadata.source ===\n                AuthorityMetadataSource.HARDCODED_VALUES) {\n                // If the user prefers to use an azure region replace the global endpoints with regional information.\n                if (this.authorityOptions.azureRegionConfiguration?.azureRegion) {\n                    if (localMetadata.metadata) {\n                        const hardcodedMetadata = await invokeAsync(this.updateMetadataWithRegionalInformation.bind(this), PerformanceEvents.AuthorityUpdateMetadataWithRegionalInformation, this.logger, this.performanceClient, this.correlationId)(localMetadata.metadata);\n                        metadataEntity.updateEndpointMetadata(hardcodedMetadata, false);\n                    }\n                }\n            }\n            return localMetadata.source;\n        }\n        // Get metadata from network if local sources aren't available\n        let metadata = await invokeAsync(this.getEndpointMetadataFromNetwork.bind(this), PerformanceEvents.AuthorityGetEndpointMetadataFromNetwork, this.logger, this.performanceClient, this.correlationId)();\n        if (metadata) {\n            // If the user prefers to use an azure region replace the global endpoints with regional information.\n            if (this.authorityOptions.azureRegionConfiguration?.azureRegion) {\n                metadata = await invokeAsync(this.updateMetadataWithRegionalInformation.bind(this), PerformanceEvents.AuthorityUpdateMetadataWithRegionalInformation, this.logger, this.performanceClient, this.correlationId)(metadata);\n            }\n            metadataEntity.updateEndpointMetadata(metadata, true);\n            return AuthorityMetadataSource.NETWORK;\n        }\n        else {\n            // Metadata could not be obtained from the config, cache, network or hardcoded values\n            throw createClientAuthError(openIdConfigError, this.defaultOpenIdConfigurationEndpoint);\n        }\n    }\n    /**\n     * Updates endpoint metadata from local sources and returns where the information was retrieved from and the metadata config\n     * response if the source is hardcoded metadata\n     * @param metadataEntity\n     * @returns\n     */\n    updateEndpointMetadataFromLocalSources(metadataEntity) {\n        this.logger.verbose(\"Attempting to get endpoint metadata from authority configuration\");\n        const configMetadata = this.getEndpointMetadataFromConfig();\n        if (configMetadata) {\n            this.logger.verbose(\"Found endpoint metadata in authority configuration\");\n            metadataEntity.updateEndpointMetadata(configMetadata, false);\n            return {\n                source: AuthorityMetadataSource.CONFIG,\n            };\n        }\n        this.logger.verbose(\"Did not find endpoint metadata in the config... Attempting to get endpoint metadata from the hardcoded values.\");\n        // skipAuthorityMetadataCache is used to bypass hardcoded authority metadata and force a network metadata cache lookup and network metadata request if no cached response is available.\n        if (this.authorityOptions.skipAuthorityMetadataCache) {\n            this.logger.verbose(\"Skipping hardcoded metadata cache since skipAuthorityMetadataCache is set to true. Attempting to get endpoint metadata from the network metadata cache.\");\n        }\n        else {\n            const hardcodedMetadata = this.getEndpointMetadataFromHardcodedValues();\n            if (hardcodedMetadata) {\n                metadataEntity.updateEndpointMetadata(hardcodedMetadata, false);\n                return {\n                    source: AuthorityMetadataSource.HARDCODED_VALUES,\n                    metadata: hardcodedMetadata,\n                };\n            }\n            else {\n                this.logger.verbose(\"Did not find endpoint metadata in hardcoded values... Attempting to get endpoint metadata from the network metadata cache.\");\n            }\n        }\n        // Check cached metadata entity expiration status\n        const metadataEntityExpired = metadataEntity.isExpired();\n        if (this.isAuthoritySameType(metadataEntity) &&\n            metadataEntity.endpointsFromNetwork &&\n            !metadataEntityExpired) {\n            // No need to update\n            this.logger.verbose(\"Found endpoint metadata in the cache.\");\n            return { source: AuthorityMetadataSource.CACHE };\n        }\n        else if (metadataEntityExpired) {\n            this.logger.verbose(\"The metadata entity is expired.\");\n        }\n        return null;\n    }\n    /**\n     * Compares the number of url components after the domain to determine if the cached\n     * authority metadata can be used for the requested authority. Protects against same domain different\n     * authority such as login.microsoftonline.com/tenant and login.microsoftonline.com/tfp/tenant/policy\n     * @param metadataEntity\n     */\n    isAuthoritySameType(metadataEntity) {\n        const cachedAuthorityUrl = new UrlString(metadataEntity.canonical_authority);\n        const cachedParts = cachedAuthorityUrl.getUrlComponents().PathSegments;\n        return (cachedParts.length ===\n            this.canonicalAuthorityUrlComponents.PathSegments.length);\n    }\n    /**\n     * Parse authorityMetadata config option\n     */\n    getEndpointMetadataFromConfig() {\n        if (this.authorityOptions.authorityMetadata) {\n            try {\n                return JSON.parse(this.authorityOptions.authorityMetadata);\n            }\n            catch (e) {\n                throw createClientConfigurationError(invalidAuthorityMetadata);\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets OAuth endpoints from the given OpenID configuration endpoint.\n     *\n     * @param hasHardcodedMetadata boolean\n     */\n    async getEndpointMetadataFromNetwork() {\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthorityGetEndpointMetadataFromNetwork, this.correlationId);\n        const options = {};\n        /*\n         * TODO: Add a timeout if the authority exists in our library's\n         * hardcoded list of metadata\n         */\n        const openIdConfigurationEndpoint = this.defaultOpenIdConfigurationEndpoint;\n        this.logger.verbose(`Authority.getEndpointMetadataFromNetwork: attempting to retrieve OAuth endpoints from ${openIdConfigurationEndpoint}`);\n        try {\n            const response = await this.networkInterface.sendGetRequestAsync(openIdConfigurationEndpoint, options);\n            const isValidResponse = isOpenIdConfigResponse(response.body);\n            if (isValidResponse) {\n                return response.body;\n            }\n            else {\n                this.logger.verbose(`Authority.getEndpointMetadataFromNetwork: could not parse response as OpenID configuration`);\n                return null;\n            }\n        }\n        catch (e) {\n            this.logger.verbose(`Authority.getEndpointMetadataFromNetwork: ${e}`);\n            return null;\n        }\n    }\n    /**\n     * Get OAuth endpoints for common authorities.\n     */\n    getEndpointMetadataFromHardcodedValues() {\n        if (this.canonicalAuthority in EndpointMetadata) {\n            return EndpointMetadata[this.canonicalAuthority];\n        }\n        return null;\n    }\n    /**\n     * Update the retrieved metadata with regional information.\n     * User selected Azure region will be used if configured.\n     */\n    async updateMetadataWithRegionalInformation(metadata) {\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthorityUpdateMetadataWithRegionalInformation, this.correlationId);\n        const userConfiguredAzureRegion = this.authorityOptions.azureRegionConfiguration?.azureRegion;\n        if (userConfiguredAzureRegion) {\n            if (userConfiguredAzureRegion !==\n                Constants.AZURE_REGION_AUTO_DISCOVER_FLAG) {\n                this.regionDiscoveryMetadata.region_outcome =\n                    RegionDiscoveryOutcomes.CONFIGURED_NO_AUTO_DETECTION;\n                this.regionDiscoveryMetadata.region_used =\n                    userConfiguredAzureRegion;\n                return Authority.replaceWithRegionalInformation(metadata, userConfiguredAzureRegion);\n            }\n            const autodetectedRegionName = await invokeAsync(this.regionDiscovery.detectRegion.bind(this.regionDiscovery), PerformanceEvents.RegionDiscoveryDetectRegion, this.logger, this.performanceClient, this.correlationId)(this.authorityOptions.azureRegionConfiguration\n                ?.environmentRegion, this.regionDiscoveryMetadata);\n            if (autodetectedRegionName) {\n                this.regionDiscoveryMetadata.region_outcome =\n                    RegionDiscoveryOutcomes.AUTO_DETECTION_REQUESTED_SUCCESSFUL;\n                this.regionDiscoveryMetadata.region_used =\n                    autodetectedRegionName;\n                return Authority.replaceWithRegionalInformation(metadata, autodetectedRegionName);\n            }\n            this.regionDiscoveryMetadata.region_outcome =\n                RegionDiscoveryOutcomes.AUTO_DETECTION_REQUESTED_FAILED;\n        }\n        return metadata;\n    }\n    /**\n     * Updates the AuthorityMetadataEntity with new aliases, preferred_network and preferred_cache\n     * and returns where the information was retrieved from\n     * @param metadataEntity\n     * @returns AuthorityMetadataSource\n     */\n    async updateCloudDiscoveryMetadata(metadataEntity) {\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthorityUpdateCloudDiscoveryMetadata, this.correlationId);\n        const localMetadataSource = this.updateCloudDiscoveryMetadataFromLocalSources(metadataEntity);\n        if (localMetadataSource) {\n            return localMetadataSource;\n        }\n        // Fallback to network as metadata source\n        const metadata = await invokeAsync(this.getCloudDiscoveryMetadataFromNetwork.bind(this), PerformanceEvents.AuthorityGetCloudDiscoveryMetadataFromNetwork, this.logger, this.performanceClient, this.correlationId)();\n        if (metadata) {\n            metadataEntity.updateCloudDiscoveryMetadata(metadata, true);\n            return AuthorityMetadataSource.NETWORK;\n        }\n        // Metadata could not be obtained from the config, cache, network or hardcoded values\n        throw createClientConfigurationError(untrustedAuthority);\n    }\n    updateCloudDiscoveryMetadataFromLocalSources(metadataEntity) {\n        this.logger.verbose(\"Attempting to get cloud discovery metadata  from authority configuration\");\n        this.logger.verbosePii(`Known Authorities: ${this.authorityOptions.knownAuthorities ||\n            Constants.NOT_APPLICABLE}`);\n        this.logger.verbosePii(`Authority Metadata: ${this.authorityOptions.authorityMetadata ||\n            Constants.NOT_APPLICABLE}`);\n        this.logger.verbosePii(`Canonical Authority: ${metadataEntity.canonical_authority || Constants.NOT_APPLICABLE}`);\n        const metadata = this.getCloudDiscoveryMetadataFromConfig();\n        if (metadata) {\n            this.logger.verbose(\"Found cloud discovery metadata in authority configuration\");\n            metadataEntity.updateCloudDiscoveryMetadata(metadata, false);\n            return AuthorityMetadataSource.CONFIG;\n        }\n        // If the cached metadata came from config but that config was not passed to this instance, we must go to hardcoded values\n        this.logger.verbose(\"Did not find cloud discovery metadata in the config... Attempting to get cloud discovery metadata from the hardcoded values.\");\n        if (this.options.skipAuthorityMetadataCache) {\n            this.logger.verbose(\"Skipping hardcoded cloud discovery metadata cache since skipAuthorityMetadataCache is set to true. Attempting to get cloud discovery metadata from the network metadata cache.\");\n        }\n        else {\n            const hardcodedMetadata = getCloudDiscoveryMetadataFromHardcodedValues(this.hostnameAndPort);\n            if (hardcodedMetadata) {\n                this.logger.verbose(\"Found cloud discovery metadata from hardcoded values.\");\n                metadataEntity.updateCloudDiscoveryMetadata(hardcodedMetadata, false);\n                return AuthorityMetadataSource.HARDCODED_VALUES;\n            }\n            this.logger.verbose(\"Did not find cloud discovery metadata in hardcoded values... Attempting to get cloud discovery metadata from the network metadata cache.\");\n        }\n        const metadataEntityExpired = metadataEntity.isExpired();\n        if (this.isAuthoritySameType(metadataEntity) &&\n            metadataEntity.aliasesFromNetwork &&\n            !metadataEntityExpired) {\n            this.logger.verbose(\"Found cloud discovery metadata in the cache.\");\n            // No need to update\n            return AuthorityMetadataSource.CACHE;\n        }\n        else if (metadataEntityExpired) {\n            this.logger.verbose(\"The metadata entity is expired.\");\n        }\n        return null;\n    }\n    /**\n     * Parse cloudDiscoveryMetadata config or check knownAuthorities\n     */\n    getCloudDiscoveryMetadataFromConfig() {\n        // CIAM does not support cloud discovery metadata\n        if (this.authorityType === AuthorityType.Ciam) {\n            this.logger.verbose(\"CIAM authorities do not support cloud discovery metadata, generate the aliases from authority host.\");\n            return Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);\n        }\n        // Check if network response was provided in config\n        if (this.authorityOptions.cloudDiscoveryMetadata) {\n            this.logger.verbose(\"The cloud discovery metadata has been provided as a network response, in the config.\");\n            try {\n                this.logger.verbose(\"Attempting to parse the cloud discovery metadata.\");\n                const parsedResponse = JSON.parse(this.authorityOptions.cloudDiscoveryMetadata);\n                const metadata = getCloudDiscoveryMetadataFromNetworkResponse(parsedResponse.metadata, this.hostnameAndPort);\n                this.logger.verbose(\"Parsed the cloud discovery metadata.\");\n                if (metadata) {\n                    this.logger.verbose(\"There is returnable metadata attached to the parsed cloud discovery metadata.\");\n                    return metadata;\n                }\n                else {\n                    this.logger.verbose(\"There is no metadata attached to the parsed cloud discovery metadata.\");\n                }\n            }\n            catch (e) {\n                this.logger.verbose(\"Unable to parse the cloud discovery metadata. Throwing Invalid Cloud Discovery Metadata Error.\");\n                throw createClientConfigurationError(invalidCloudDiscoveryMetadata);\n            }\n        }\n        // If cloudDiscoveryMetadata is empty or does not contain the host, check knownAuthorities\n        if (this.isInKnownAuthorities()) {\n            this.logger.verbose(\"The host is included in knownAuthorities. Creating new cloud discovery metadata from the host.\");\n            return Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);\n        }\n        return null;\n    }\n    /**\n     * Called to get metadata from network if CloudDiscoveryMetadata was not populated by config\n     *\n     * @param hasHardcodedMetadata boolean\n     */\n    async getCloudDiscoveryMetadataFromNetwork() {\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthorityGetCloudDiscoveryMetadataFromNetwork, this.correlationId);\n        const instanceDiscoveryEndpoint = `${Constants.AAD_INSTANCE_DISCOVERY_ENDPT}${this.canonicalAuthority}oauth2/v2.0/authorize`;\n        const options = {};\n        /*\n         * TODO: Add a timeout if the authority exists in our library's\n         * hardcoded list of metadata\n         */\n        let match = null;\n        try {\n            const response = await this.networkInterface.sendGetRequestAsync(instanceDiscoveryEndpoint, options);\n            let typedResponseBody;\n            let metadata;\n            if (isCloudInstanceDiscoveryResponse(response.body)) {\n                typedResponseBody =\n                    response.body;\n                metadata = typedResponseBody.metadata;\n                this.logger.verbosePii(`tenant_discovery_endpoint is: ${typedResponseBody.tenant_discovery_endpoint}`);\n            }\n            else if (isCloudInstanceDiscoveryErrorResponse(response.body)) {\n                this.logger.warning(`A CloudInstanceDiscoveryErrorResponse was returned. The cloud instance discovery network request's status code is: ${response.status}`);\n                typedResponseBody =\n                    response.body;\n                if (typedResponseBody.error === Constants.INVALID_INSTANCE) {\n                    this.logger.error(\"The CloudInstanceDiscoveryErrorResponse error is invalid_instance.\");\n                    return null;\n                }\n                this.logger.warning(`The CloudInstanceDiscoveryErrorResponse error is ${typedResponseBody.error}`);\n                this.logger.warning(`The CloudInstanceDiscoveryErrorResponse error description is ${typedResponseBody.error_description}`);\n                this.logger.warning(\"Setting the value of the CloudInstanceDiscoveryMetadata (returned from the network) to []\");\n                metadata = [];\n            }\n            else {\n                this.logger.error(\"AAD did not return a CloudInstanceDiscoveryResponse or CloudInstanceDiscoveryErrorResponse\");\n                return null;\n            }\n            this.logger.verbose(\"Attempting to find a match between the developer's authority and the CloudInstanceDiscoveryMetadata returned from the network request.\");\n            match = getCloudDiscoveryMetadataFromNetworkResponse(metadata, this.hostnameAndPort);\n        }\n        catch (error) {\n            if (error instanceof AuthError) {\n                this.logger.error(`There was a network error while attempting to get the cloud discovery instance metadata.\\nError: ${error.errorCode}\\nError Description: ${error.errorMessage}`);\n            }\n            else {\n                const typedError = error;\n                this.logger.error(`A non-MSALJS error was thrown while attempting to get the cloud instance discovery metadata.\\nError: ${typedError.name}\\nError Description: ${typedError.message}`);\n            }\n            return null;\n        }\n        // Custom Domain scenario, host is trusted because Instance Discovery call succeeded\n        if (!match) {\n            this.logger.warning(\"The developer's authority was not found within the CloudInstanceDiscoveryMetadata returned from the network request.\");\n            this.logger.verbose(\"Creating custom Authority for custom domain scenario.\");\n            match = Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);\n        }\n        return match;\n    }\n    /**\n     * Helper function to determine if this host is included in the knownAuthorities config option\n     */\n    isInKnownAuthorities() {\n        const matches = this.authorityOptions.knownAuthorities.filter((authority) => {\n            return (UrlString.getDomainFromUrl(authority).toLowerCase() ===\n                this.hostnameAndPort);\n        });\n        return matches.length > 0;\n    }\n    /**\n     * helper function to populate the authority based on azureCloudOptions\n     * @param authorityString\n     * @param azureCloudOptions\n     */\n    static generateAuthority(authorityString, azureCloudOptions) {\n        let authorityAzureCloudInstance;\n        if (azureCloudOptions &&\n            azureCloudOptions.azureCloudInstance !== AzureCloudInstance.None) {\n            const tenant = azureCloudOptions.tenant\n                ? azureCloudOptions.tenant\n                : Constants.DEFAULT_COMMON_TENANT;\n            authorityAzureCloudInstance = `${azureCloudOptions.azureCloudInstance}/${tenant}/`;\n        }\n        return authorityAzureCloudInstance\n            ? authorityAzureCloudInstance\n            : authorityString;\n    }\n    /**\n     * Creates cloud discovery metadata object from a given host\n     * @param host\n     */\n    static createCloudDiscoveryMetadataFromHost(host) {\n        return {\n            preferred_network: host,\n            preferred_cache: host,\n            aliases: [host],\n        };\n    }\n    /**\n     * helper function to generate environment from authority object\n     */\n    getPreferredCache() {\n        if (this.discoveryComplete()) {\n            return this.metadata.preferred_cache;\n        }\n        else {\n            throw createClientAuthError(endpointResolutionError);\n        }\n    }\n    /**\n     * Returns whether or not the provided host is an alias of this authority instance\n     * @param host\n     */\n    isAlias(host) {\n        return this.metadata.aliases.indexOf(host) > -1;\n    }\n    /**\n     * Returns whether or not the provided host is an alias of a known Microsoft authority for purposes of endpoint discovery\n     * @param host\n     */\n    isAliasOfKnownMicrosoftAuthority(host) {\n        return InstanceDiscoveryMetadataAliases.has(host);\n    }\n    /**\n     * Checks whether the provided host is that of a public cloud authority\n     *\n     * @param authority string\n     * @returns bool\n     */\n    static isPublicCloudAuthority(host) {\n        return Constants.KNOWN_PUBLIC_CLOUDS.indexOf(host) >= 0;\n    }\n    /**\n     * Rebuild the authority string with the region\n     *\n     * @param host string\n     * @param region string\n     */\n    static buildRegionalAuthorityString(host, region, queryString) {\n        // Create and validate a Url string object with the initial authority string\n        const authorityUrlInstance = new UrlString(host);\n        authorityUrlInstance.validateAsUri();\n        const authorityUrlParts = authorityUrlInstance.getUrlComponents();\n        let hostNameAndPort = `${region}.${authorityUrlParts.HostNameAndPort}`;\n        if (this.isPublicCloudAuthority(authorityUrlParts.HostNameAndPort)) {\n            hostNameAndPort = `${region}.${Constants.REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX}`;\n        }\n        // Include the query string portion of the url\n        const url = UrlString.constructAuthorityUriFromObject({\n            ...authorityUrlInstance.getUrlComponents(),\n            HostNameAndPort: hostNameAndPort,\n        }).urlString;\n        // Add the query string if a query string was provided\n        if (queryString)\n            return `${url}?${queryString}`;\n        return url;\n    }\n    /**\n     * Replace the endpoints in the metadata object with their regional equivalents.\n     *\n     * @param metadata OpenIdConfigResponse\n     * @param azureRegion string\n     */\n    static replaceWithRegionalInformation(metadata, azureRegion) {\n        const regionalMetadata = { ...metadata };\n        regionalMetadata.authorization_endpoint =\n            Authority.buildRegionalAuthorityString(regionalMetadata.authorization_endpoint, azureRegion);\n        regionalMetadata.token_endpoint =\n            Authority.buildRegionalAuthorityString(regionalMetadata.token_endpoint, azureRegion);\n        if (regionalMetadata.end_session_endpoint) {\n            regionalMetadata.end_session_endpoint =\n                Authority.buildRegionalAuthorityString(regionalMetadata.end_session_endpoint, azureRegion);\n        }\n        return regionalMetadata;\n    }\n    /**\n     * Transform CIAM_AUTHORIY as per the below rules:\n     * If no path segments found and it is a CIAM authority (hostname ends with .ciamlogin.com), then transform it\n     *\n     * NOTE: The transformation path should go away once STS supports CIAM with the format: `tenantIdorDomain.ciamlogin.com`\n     * `ciamlogin.com` can also change in the future and we should accommodate the same\n     *\n     * @param authority\n     */\n    static transformCIAMAuthority(authority) {\n        let ciamAuthority = authority;\n        const authorityUrl = new UrlString(authority);\n        const authorityUrlComponents = authorityUrl.getUrlComponents();\n        // check if transformation is needed\n        if (authorityUrlComponents.PathSegments.length === 0 &&\n            authorityUrlComponents.HostNameAndPort.endsWith(Constants.CIAM_AUTH_URL)) {\n            const tenantIdOrDomain = authorityUrlComponents.HostNameAndPort.split(\".\")[0];\n            ciamAuthority = `${ciamAuthority}${tenantIdOrDomain}${Constants.AAD_TENANT_DOMAIN_SUFFIX}`;\n        }\n        return ciamAuthority;\n    }\n}\n// Reserved tenant domain names that will not be replaced with tenant id\nAuthority.reservedTenantDomains = new Set([\n    \"{tenant}\",\n    \"{tenantid}\",\n    AADAuthorityConstants.COMMON,\n    AADAuthorityConstants.CONSUMERS,\n    AADAuthorityConstants.ORGANIZATIONS,\n]);\nfunction formatAuthorityUri(authorityUri) {\n    return authorityUri.endsWith(Constants.FORWARD_SLASH)\n        ? authorityUri\n        : `${authorityUri}${Constants.FORWARD_SLASH}`;\n}\nfunction buildStaticAuthorityOptions(authOptions) {\n    const rawCloudDiscoveryMetadata = authOptions.cloudDiscoveryMetadata;\n    let cloudDiscoveryMetadata = undefined;\n    if (rawCloudDiscoveryMetadata) {\n        try {\n            cloudDiscoveryMetadata = JSON.parse(rawCloudDiscoveryMetadata);\n        }\n        catch (e) {\n            throw createClientConfigurationError(invalidCloudDiscoveryMetadata);\n        }\n    }\n    return {\n        canonicalAuthority: authOptions.authority\n            ? formatAuthorityUri(authOptions.authority)\n            : undefined,\n        knownAuthorities: authOptions.knownAuthorities,\n        cloudDiscoveryMetadata: cloudDiscoveryMetadata,\n    };\n}\n\nexport { Authority, buildStaticAuthorityOptions, formatAuthorityUri };\n//# sourceMappingURL=Authority.mjs.map\n","/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\nimport { Authority, formatAuthorityUri } from './Authority.mjs';\nimport { createClientConfigurationError } from '../error/ClientConfigurationError.mjs';\nimport { createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.mjs';\nimport { invokeAsync } from '../utils/FunctionWrappers.mjs';\nimport { endpointResolutionError } from '../error/ClientAuthErrorCodes.mjs';\nimport { urlEmptyError } from '../error/ClientConfigurationErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/** @internal */\nclass AuthorityFactory {\n    /**\n     * Create an authority object of the correct type based on the url\n     * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)\n     *\n     * Also performs endpoint discovery.\n     *\n     * @param authorityUri\n     * @param networkClient\n     * @param protocolMode\n     */\n    static async createDiscoveredInstance(authorityUri, networkClient, cacheManager, authorityOptions, logger, performanceClient, correlationId) {\n        performanceClient?.addQueueMeasurement(PerformanceEvents.AuthorityFactoryCreateDiscoveredInstance, correlationId);\n        const authorityUriFinal = Authority.transformCIAMAuthority(formatAuthorityUri(authorityUri));\n        // Initialize authority and perform discovery endpoint check.\n        const acquireTokenAuthority = AuthorityFactory.createInstance(authorityUriFinal, networkClient, cacheManager, authorityOptions, logger, performanceClient, correlationId);\n        try {\n            await invokeAsync(acquireTokenAuthority.resolveEndpointsAsync.bind(acquireTokenAuthority), PerformanceEvents.AuthorityResolveEndpointsAsync, logger, performanceClient, correlationId)();\n            return acquireTokenAuthority;\n        }\n        catch (e) {\n            throw createClientAuthError(endpointResolutionError);\n        }\n    }\n    /**\n     * Create an authority object of the correct type based on the url\n     * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)\n     *\n     * Does not perform endpoint discovery.\n     *\n     * @param authorityUrl\n     * @param networkInterface\n     * @param protocolMode\n     */\n    static createInstance(authorityUrl, networkInterface, cacheManager, authorityOptions, logger, performanceClient, correlationId) {\n        // Throw error if authority url is empty\n        if (!authorityUrl) {\n            throw createClientConfigurationError(urlEmptyError);\n        }\n        return new Authority(authorityUrl, networkInterface, cacheManager, authorityOptions, logger, performanceClient, correlationId);\n    }\n}\n\nexport { AuthorityFactory };\n//# sourceMappingURL=AuthorityFactory.mjs.map\n","/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\nimport { buildClientConfiguration } from '../config/ClientConfiguration.mjs';\nimport { NetworkManager } from '../network/NetworkManager.mjs';\nimport { Logger } from '../logger/Logger.mjs';\nimport { HeaderNames, Constants } from '../utils/Constants.mjs';\nimport { name, version } from '../packageMetadata.mjs';\nimport { CcsCredentialType } from '../account/CcsCredential.mjs';\nimport { buildClientInfoFromHomeAccountId } from '../account/ClientInfo.mjs';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.mjs';\nimport { AuthorityFactory } from '../authority/AuthorityFactory.mjs';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Base application class which will construct requests to send to and handle responses from the Microsoft STS using the authorization code flow.\n * @internal\n */\nclass BaseClient {\n    constructor(configuration, performanceClient) {\n        // Set the configuration\n        this.config = buildClientConfiguration(configuration);\n        // Initialize the logger\n        this.logger = new Logger(this.config.loggerOptions, name, version);\n        // Initialize crypto\n        this.cryptoUtils = this.config.cryptoInterface;\n        // Initialize storage interface\n        this.cacheManager = this.config.storageInterface;\n        // Set the network interface\n        this.networkClient = this.config.networkInterface;\n        // Set the NetworkManager\n        this.networkManager = new NetworkManager(this.networkClient, this.cacheManager);\n        // Set TelemetryManager\n        this.serverTelemetryManager = this.config.serverTelemetryManager;\n        // set Authority\n        this.authority = this.config.authOptions.authority;\n        // set performance telemetry client\n        this.performanceClient = performanceClient;\n    }\n    /**\n     * Creates default headers for requests to token endpoint\n     */\n    createTokenRequestHeaders(ccsCred) {\n        const headers = {};\n        headers[HeaderNames.CONTENT_TYPE] = Constants.URL_FORM_CONTENT_TYPE;\n        if (!this.config.systemOptions.preventCorsPreflight && ccsCred) {\n            switch (ccsCred.type) {\n                case CcsCredentialType.HOME_ACCOUNT_ID:\n                    try {\n                        const clientInfo = buildClientInfoFromHomeAccountId(ccsCred.credential);\n                        headers[HeaderNames.CCS_HEADER] = `Oid:${clientInfo.uid}@${clientInfo.utid}`;\n                    }\n                    catch (e) {\n                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" +\n                            e);\n                    }\n                    break;\n                case CcsCredentialType.UPN:\n                    headers[HeaderNames.CCS_HEADER] = `UPN: ${ccsCred.credential}`;\n                    break;\n            }\n        }\n        return headers;\n    }\n    /**\n     * Http post to token endpoint\n     * @param tokenEndpoint\n     * @param queryString\n     * @param headers\n     * @param thumbprint\n     */\n    async executePostToTokenEndpoint(tokenEndpoint, queryString, headers, thumbprint, correlationId, queuedEvent) {\n        if (queuedEvent) {\n            this.performanceClient?.addQueueMeasurement(queuedEvent, correlationId);\n        }\n        const response = await this.networkManager.sendPostRequest(thumbprint, tokenEndpoint, { body: queryString, headers: headers });\n        this.performanceClient?.addFields({\n            refreshTokenSize: response.body.refresh_token?.length || 0,\n            httpVerToken: response.headers?.[HeaderNames.X_MS_HTTP_VERSION] || \"\",\n        }, correlationId);\n        if (this.config.serverTelemetryManager &&\n            response.status < 500 &&\n            response.status !== 429) {\n            // Telemetry data successfully logged by server, clear Telemetry cache\n            this.config.serverTelemetryManager.clearTelemetryCache();\n        }\n        return response;\n    }\n    /**\n     * Updates the authority object of the client. Endpoint discovery must be completed.\n     * @param updatedAuthority\n     */\n    async updateAuthority(cloudInstanceHostname, correlationId) {\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.UpdateTokenEndpointAuthority, correlationId);\n        const cloudInstanceAuthorityUri = `https://${cloudInstanceHostname}/${this.authority.tenant}/`;\n        const cloudInstanceAuthority = await AuthorityFactory.createDiscoveredInstance(cloudInstanceAuthorityUri, this.networkClient, this.cacheManager, this.authority.options, this.logger, this.performanceClient, correlationId);\n        this.authority = cloudInstanceAuthority;\n    }\n    /**\n     * Creates query string for the /token request\n     * @param request\n     */\n    createTokenQueryParameters(request) {\n        const parameterBuilder = new RequestParameterBuilder();\n        if (request.tokenQueryParameters) {\n            parameterBuilder.addExtraQueryParameters(request.tokenQueryParameters);\n        }\n        return parameterBuilder.createQueryString();\n    }\n}\n\nexport { BaseClient };\n//# sourceMappingURL=BaseClient.mjs.map\n","/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n// Codes defined by MSAL\nconst noTokensFound = \"no_tokens_found\";\nconst nativeAccountUnavailable = \"native_account_unavailable\";\n// Codes potentially returned by server\nconst interactionRequired = \"interaction_required\";\nconst consentRequired = \"consent_required\";\nconst loginRequired = \"login_required\";\n\nexport { consentRequired, interactionRequired, loginRequired, nativeAccountUnavailable, noTokensFound };\n//# sourceMappingURL=InteractionRequiredAuthErrorCodes.mjs.map\n","/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\nimport { Constants } from '../utils/Constants.mjs';\nimport { AuthError } from './AuthError.mjs';\nimport { noTokensFound, nativeAccountUnavailable, interactionRequired, consentRequired, loginRequired } from './InteractionRequiredAuthErrorCodes.mjs';\nimport * as InteractionRequiredAuthErrorCodes from './InteractionRequiredAuthErrorCodes.mjs';\nexport { InteractionRequiredAuthErrorCodes };\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * InteractionRequiredServerErrorMessage contains string constants used by error codes and messages returned by the server indicating interaction is required\n */\nconst InteractionRequiredServerErrorMessage = [\n    interactionRequired,\n    consentRequired,\n    loginRequired,\n];\nconst InteractionRequiredAuthSubErrorMessage = [\n    \"message_only\",\n    \"additional_action\",\n    \"basic_action\",\n    \"user_password_expired\",\n    \"consent_required\",\n];\nconst InteractionRequiredAuthErrorMessages = {\n    [noTokensFound]: \"No refresh token found in the cache. Please sign-in.\",\n    [nativeAccountUnavailable]: \"The requested account is not available in the native broker. It may have been deleted or logged out. Please sign-in again using an interactive API.\",\n};\n/**\n * Interaction required errors defined by the SDK\n * @deprecated Use InteractionRequiredAuthErrorCodes instead\n */\nconst InteractionRequiredAuthErrorMessage = {\n    noTokensFoundError: {\n        code: noTokensFound,\n        desc: InteractionRequiredAuthErrorMessages[noTokensFound],\n    },\n    native_account_unavailable: {\n        code: nativeAccountUnavailable,\n        desc: InteractionRequiredAuthErrorMessages[nativeAccountUnavailable],\n    },\n};\n/**\n * Error thrown when user interaction is required.\n */\nclass InteractionRequiredAuthError extends AuthError {\n    constructor(errorCode, errorMessage, subError, timestamp, traceId, correlationId, claims) {\n        super(errorCode, errorMessage, subError);\n        Object.setPrototypeOf(this, InteractionRequiredAuthError.prototype);\n        this.timestamp = timestamp || Constants.EMPTY_STRING;\n        this.traceId = traceId || Constants.EMPTY_STRING;\n        this.correlationId = correlationId || Constants.EMPTY_STRING;\n        this.claims = claims || Constants.EMPTY_STRING;\n        this.name = \"InteractionRequiredAuthError\";\n    }\n}\n/**\n * Helper function used to determine if an error thrown by the server requires interaction to resolve\n * @param errorCode\n * @param errorString\n * @param subError\n */\nfunction isInteractionRequiredError(errorCode, errorString, subError) {\n    const isInteractionRequiredErrorCode = !!errorCode &&\n        InteractionRequiredServerErrorMessage.indexOf(errorCode) > -1;\n    const isInteractionRequiredSubError = !!subError &&\n        InteractionRequiredAuthSubErrorMessage.indexOf(subError) > -1;\n    const isInteractionRequiredErrorDesc = !!errorString &&\n        InteractionRequiredServerErrorMessage.some((irErrorCode) => {\n            return errorString.indexOf(irErrorCode) > -1;\n        });\n    return (isInteractionRequiredErrorCode ||\n        isInteractionRequiredErrorDesc ||\n        isInteractionRequiredSubError);\n}\n/**\n * Creates an InteractionRequiredAuthError\n */\nfunction createInteractionRequiredAuthError(errorCode) {\n    return new InteractionRequiredAuthError(errorCode, InteractionRequiredAuthErrorMessages[errorCode]);\n}\n\nexport { InteractionRequiredAuthError, InteractionRequiredAuthErrorMessage, InteractionRequiredAuthSubErrorMessage, InteractionRequiredServerErrorMessage, createInteractionRequiredAuthError, isInteractionRequiredError };\n//# sourceMappingURL=InteractionRequiredAuthError.mjs.map\n","/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/** @internal */\nclass CacheRecord {\n    constructor(accountEntity, idTokenEntity, accessTokenEntity, refreshTokenEntity, appMetadataEntity) {\n        this.account = accountEntity || null;\n        this.idToken = idTokenEntity || null;\n        this.accessToken = accessTokenEntity || null;\n        this.refreshToken = refreshTokenEntity || null;\n        this.appMetadata = appMetadataEntity || null;\n    }\n}\n\nexport { CacheRecord };\n//# sourceMappingURL=CacheRecord.mjs.map\n","/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\nimport { Constants } from './Constants.mjs';\nimport { createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { noCryptoObject, invalidState } from '../error/ClientAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Class which provides helpers for OAuth 2.0 protocol specific values\n */\nclass ProtocolUtils {\n    /**\n     * Appends user state with random guid, or returns random guid.\n     * @param userState\n     * @param randomGuid\n     */\n    static setRequestState(cryptoObj, userState, meta) {\n        const libraryState = ProtocolUtils.generateLibraryState(cryptoObj, meta);\n        return userState\n            ? `${libraryState}${Constants.RESOURCE_DELIM}${userState}`\n            : libraryState;\n    }\n    /**\n     * Generates the state value used by the common library.\n     * @param randomGuid\n     * @param cryptoObj\n     */\n    static generateLibraryState(cryptoObj, meta) {\n        if (!cryptoObj) {\n            throw createClientAuthError(noCryptoObject);\n        }\n        // Create a state object containing a unique id and the timestamp of the request creation\n        const stateObj = {\n            id: cryptoObj.createNewGuid(),\n        };\n        if (meta) {\n            stateObj.meta = meta;\n        }\n        const stateString = JSON.stringify(stateObj);\n        return cryptoObj.base64Encode(stateString);\n    }\n    /**\n     * Parses the state into the RequestStateObject, which contains the LibraryState info and the state passed by the user.\n     * @param state\n     * @param cryptoObj\n     */\n    static parseRequestState(cryptoObj, state) {\n        if (!cryptoObj) {\n            throw createClientAuthError(noCryptoObject);\n        }\n        if (!state) {\n            throw createClientAuthError(invalidState);\n        }\n        try {\n            // Split the state between library state and user passed state and decode them separately\n            const splitState = state.split(Constants.RESOURCE_DELIM);\n            const libraryState = splitState[0];\n            const userState = splitState.length > 1\n                ? splitState.slice(1).join(Constants.RESOURCE_DELIM)\n                : Constants.EMPTY_STRING;\n            const libraryStateString = cryptoObj.base64Decode(libraryState);\n            const libraryStateObj = JSON.parse(libraryStateString);\n            return {\n                userRequestState: userState || Constants.EMPTY_STRING,\n                libraryState: libraryStateObj,\n            };\n        }\n        catch (e) {\n            throw createClientAuthError(invalidState);\n        }\n    }\n}\n\nexport { ProtocolUtils };\n//# sourceMappingURL=ProtocolUtils.mjs.map\n","/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\nimport { TimeUtils } from '../utils/TimeUtils.mjs';\nimport { UrlString } from '../url/UrlString.mjs';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.mjs';\nimport { invokeAsync } from '../utils/FunctionWrappers.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nconst KeyLocation = {\n    SW: \"sw\",\n    UHW: \"uhw\",\n};\n/** @internal */\nclass PopTokenGenerator {\n    constructor(cryptoUtils, performanceClient) {\n        this.cryptoUtils = cryptoUtils;\n        this.performanceClient = performanceClient;\n    }\n    /**\n     * Generates the req_cnf validated at the RP in the POP protocol for SHR parameters\n     * and returns an object containing the keyid, the full req_cnf string and the req_cnf string hash\n     * @param request\n     * @returns\n     */\n    async generateCnf(request, logger) {\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.PopTokenGenerateCnf, request.correlationId);\n        const reqCnf = await invokeAsync(this.generateKid.bind(this), PerformanceEvents.PopTokenGenerateCnf, logger, this.performanceClient, request.correlationId)(request);\n        const reqCnfString = this.cryptoUtils.base64Encode(JSON.stringify(reqCnf));\n        return {\n            kid: reqCnf.kid,\n            reqCnfString,\n            reqCnfHash: await this.cryptoUtils.hashString(reqCnfString),\n        };\n    }\n    /**\n     * Generates key_id for a SHR token request\n     * @param request\n     * @returns\n     */\n    async generateKid(request) {\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.PopTokenGenerateKid, request.correlationId);\n        const kidThumbprint = await this.cryptoUtils.getPublicKeyThumbprint(request);\n        return {\n            kid: kidThumbprint,\n            xms_ksl: KeyLocation.SW,\n        };\n    }\n    /**\n     * Signs the POP access_token with the local generated key-pair\n     * @param accessToken\n     * @param request\n     * @returns\n     */\n    async signPopToken(accessToken, keyId, request) {\n        return this.signPayload(accessToken, keyId, request);\n    }\n    /**\n     * Utility function to generate the signed JWT for an access_token\n     * @param payload\n     * @param kid\n     * @param request\n     * @param claims\n     * @returns\n     */\n    async signPayload(payload, keyId, request, claims) {\n        // Deconstruct request to extract SHR parameters\n        const { resourceRequestMethod, resourceRequestUri, shrClaims, shrNonce, shrOptions, } = request;\n        const resourceUrlString = resourceRequestUri\n            ? new UrlString(resourceRequestUri)\n            : undefined;\n        const resourceUrlComponents = resourceUrlString?.getUrlComponents();\n        return await this.cryptoUtils.signJwt({\n            at: payload,\n            ts: TimeUtils.nowSeconds(),\n            m: resourceRequestMethod?.toUpperCase(),\n            u: resourceUrlComponents?.HostNameAndPort,\n            nonce: shrNonce || this.cryptoUtils.createNewGuid(),\n            p: resourceUrlComponents?.AbsolutePath,\n            q: resourceUrlComponents?.QueryString\n                ? [[], resourceUrlComponents.QueryString]\n                : undefined,\n            client_claims: shrClaims || undefined,\n            ...claims,\n        }, keyId, shrOptions, request.correlationId);\n    }\n}\n\nexport { PopTokenGenerator };\n//# sourceMappingURL=PopTokenGenerator.mjs.map\n","/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\nimport { Separators, APP_METADATA } from '../../utils/Constants.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * APP_METADATA Cache\n *\n * Key:Value Schema:\n *\n * Key: appmetadata-<environment>-<client_id>\n *\n * Value:\n * {\n *      clientId: client ID of the application\n *      environment: entity that issued the token, represented as a full host\n *      familyId: Family ID identifier, '1' represents Microsoft Family\n * }\n */\nclass AppMetadataEntity {\n    /**\n     * Generate AppMetadata Cache Key as per the schema: appmetadata-<environment>-<client_id>\n     */\n    generateAppMetadataKey() {\n        return AppMetadataEntity.generateAppMetadataCacheKey(this.environment, this.clientId);\n    }\n    /**\n     * Generate AppMetadata Cache Key\n     */\n    static generateAppMetadataCacheKey(environment, clientId) {\n        const appMetaDataKeyArray = [\n            APP_METADATA,\n            environment,\n            clientId,\n        ];\n        return appMetaDataKeyArray\n            .join(Separators.CACHE_KEY_SEPARATOR)\n            .toLowerCase();\n    }\n    /**\n     * Creates AppMetadataEntity\n     * @param clientId\n     * @param environment\n     * @param familyId\n     */\n    static createAppMetadataEntity(clientId, environment, familyId) {\n        const appMetadata = new AppMetadataEntity();\n        appMetadata.clientId = clientId;\n        appMetadata.environment = environment;\n        if (familyId) {\n            appMetadata.familyId = familyId;\n        }\n        return appMetadata;\n    }\n    /**\n     * Validates an entity: checks for all expected params\n     * @param entity\n     */\n    static isAppMetadataEntity(key, entity) {\n        if (!entity) {\n            return false;\n        }\n        return (key.indexOf(APP_METADATA) === 0 &&\n            entity.hasOwnProperty(\"clientId\") &&\n            entity.hasOwnProperty(\"environment\"));\n    }\n}\n\nexport { AppMetadataEntity };\n//# sourceMappingURL=AppMetadataEntity.mjs.map\n","/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * This class instance helps track the memory changes facilitating\n * decisions to read from and write to the persistent cache\n */ class TokenCacheContext {\n    constructor(tokenCache, hasChanged) {\n        this.cache = tokenCache;\n        this.hasChanged = hasChanged;\n    }\n    /**\n     * boolean which indicates the changes in cache\n     */\n    get cacheHasChanged() {\n        return this.hasChanged;\n    }\n    /**\n     * function to retrieve the token cache\n     */\n    get tokenCache() {\n        return this.cache;\n    }\n}\n\nexport { TokenCacheContext };\n//# sourceMappingURL=TokenCacheContext.mjs.map\n","/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\nimport { createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { ServerError } from '../error/ServerError.mjs';\nimport { ScopeSet } from '../request/ScopeSet.mjs';\nimport { AccountEntity } from '../cache/entities/AccountEntity.mjs';\nimport { isInteractionRequiredError, InteractionRequiredAuthError } from '../error/InteractionRequiredAuthError.mjs';\nimport { CacheRecord } from '../cache/entities/CacheRecord.mjs';\nimport { ProtocolUtils } from '../utils/ProtocolUtils.mjs';\nimport { HttpStatus, Constants, AuthenticationScheme, THE_FAMILY_ID } from '../utils/Constants.mjs';\nimport { PopTokenGenerator } from '../crypto/PopTokenGenerator.mjs';\nimport { AppMetadataEntity } from '../cache/entities/AppMetadataEntity.mjs';\nimport { TokenCacheContext } from '../cache/persistence/TokenCacheContext.mjs';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.mjs';\nimport { extractTokenClaims, checkMaxAge } from '../account/AuthToken.mjs';\nimport { createAccessTokenEntity, createRefreshTokenEntity, createIdTokenEntity } from '../cache/utils/CacheHelpers.mjs';\nimport { stateNotFound, invalidState, stateMismatch, nonceMismatch, authTimeNotFound, invalidCacheEnvironment, keyIdMissing } from '../error/ClientAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Class that handles response parsing.\n * @internal\n */\nclass ResponseHandler {\n    constructor(clientId, cacheStorage, cryptoObj, logger, serializableCache, persistencePlugin, performanceClient) {\n        this.clientId = clientId;\n        this.cacheStorage = cacheStorage;\n        this.cryptoObj = cryptoObj;\n        this.logger = logger;\n        this.serializableCache = serializableCache;\n        this.persistencePlugin = persistencePlugin;\n        this.performanceClient = performanceClient;\n    }\n    /**\n     * Function which validates server authorization code response.\n     * @param serverResponseHash\n     * @param requestState\n     * @param cryptoObj\n     */\n    validateServerAuthorizationCodeResponse(serverResponse, requestState) {\n        if (!serverResponse.state || !requestState) {\n            throw serverResponse.state\n                ? createClientAuthError(stateNotFound, \"Cached State\")\n                : createClientAuthError(stateNotFound, \"Server State\");\n        }\n        let decodedServerResponseState;\n        let decodedRequestState;\n        try {\n            decodedServerResponseState = decodeURIComponent(serverResponse.state);\n        }\n        catch (e) {\n            throw createClientAuthError(invalidState, serverResponse.state);\n        }\n        try {\n            decodedRequestState = decodeURIComponent(requestState);\n        }\n        catch (e) {\n            throw createClientAuthError(invalidState, serverResponse.state);\n        }\n        if (decodedServerResponseState !== decodedRequestState) {\n            throw createClientAuthError(stateMismatch);\n        }\n        // Check for error\n        if (serverResponse.error ||\n            serverResponse.error_description ||\n            serverResponse.suberror) {\n            if (isInteractionRequiredError(serverResponse.error, serverResponse.error_description, serverResponse.suberror)) {\n                throw new InteractionRequiredAuthError(serverResponse.error || \"\", serverResponse.error_description, serverResponse.suberror, serverResponse.timestamp || \"\", serverResponse.trace_id || \"\", serverResponse.correlation_id || \"\", serverResponse.claims || \"\");\n            }\n            throw new ServerError(serverResponse.error || \"\", serverResponse.error_description, serverResponse.suberror);\n        }\n    }\n    /**\n     * Function which validates server authorization token response.\n     * @param serverResponse\n     * @param refreshAccessToken\n     */\n    validateTokenResponse(serverResponse, refreshAccessToken) {\n        // Check for error\n        if (serverResponse.error ||\n            serverResponse.error_description ||\n            serverResponse.suberror) {\n            const errString = `${serverResponse.error_codes} - [${serverResponse.timestamp}]: ${serverResponse.error_description} - Correlation ID: ${serverResponse.correlation_id} - Trace ID: ${serverResponse.trace_id}`;\n            const serverError = new ServerError(serverResponse.error, errString, serverResponse.suberror);\n            // check if 500 error\n            if (refreshAccessToken &&\n                serverResponse.status &&\n                serverResponse.status >= HttpStatus.SERVER_ERROR_RANGE_START &&\n                serverResponse.status <= HttpStatus.SERVER_ERROR_RANGE_END) {\n                this.logger.warning(`executeTokenRequest:validateTokenResponse - AAD is currently unavailable and the access token is unable to be refreshed.\\n${serverError}`);\n                // don't throw an exception, but alert the user via a log that the token was unable to be refreshed\n                return;\n                // check if 400 error\n            }\n            else if (refreshAccessToken &&\n                serverResponse.status &&\n                serverResponse.status >= HttpStatus.CLIENT_ERROR_RANGE_START &&\n                serverResponse.status <= HttpStatus.CLIENT_ERROR_RANGE_END) {\n                this.logger.warning(`executeTokenRequest:validateTokenResponse - AAD is currently available but is unable to refresh the access token.\\n${serverError}`);\n                // don't throw an exception, but alert the user via a log that the token was unable to be refreshed\n                return;\n            }\n            if (isInteractionRequiredError(serverResponse.error, serverResponse.error_description, serverResponse.suberror)) {\n                throw new InteractionRequiredAuthError(serverResponse.error, serverResponse.error_description, serverResponse.suberror, serverResponse.timestamp || Constants.EMPTY_STRING, serverResponse.trace_id || Constants.EMPTY_STRING, serverResponse.correlation_id || Constants.EMPTY_STRING, serverResponse.claims || Constants.EMPTY_STRING);\n            }\n            throw serverError;\n        }\n    }\n    /**\n     * Returns a constructed token response based on given string. Also manages the cache updates and cleanups.\n     * @param serverTokenResponse\n     * @param authority\n     */\n    async handleServerTokenResponse(serverTokenResponse, authority, reqTimestamp, request, authCodePayload, userAssertionHash, handlingRefreshTokenResponse, forceCacheRefreshTokenResponse, serverRequestId) {\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.HandleServerTokenResponse, serverTokenResponse.correlation_id);\n        // create an idToken object (not entity)\n        let idTokenClaims;\n        if (serverTokenResponse.id_token) {\n            idTokenClaims = extractTokenClaims(serverTokenResponse.id_token || Constants.EMPTY_STRING, this.cryptoObj.base64Decode);\n            // token nonce check (TODO: Add a warning if no nonce is given?)\n            if (authCodePayload && authCodePayload.nonce) {\n                if (idTokenClaims.nonce !== authCodePayload.nonce) {\n                    throw createClientAuthError(nonceMismatch);\n                }\n            }\n            // token max_age check\n            if (request.maxAge || request.maxAge === 0) {\n                const authTime = idTokenClaims.auth_time;\n                if (!authTime) {\n                    throw createClientAuthError(authTimeNotFound);\n                }\n                checkMaxAge(authTime, request.maxAge);\n            }\n        }\n        // generate homeAccountId\n        this.homeAccountIdentifier = AccountEntity.generateHomeAccountId(serverTokenResponse.client_info || Constants.EMPTY_STRING, authority.authorityType, this.logger, this.cryptoObj, idTokenClaims);\n        // save the response tokens\n        let requestStateObj;\n        if (!!authCodePayload && !!authCodePayload.state) {\n            requestStateObj = ProtocolUtils.parseRequestState(this.cryptoObj, authCodePayload.state);\n        }\n        // Add keyId from request to serverTokenResponse if defined\n        serverTokenResponse.key_id =\n            serverTokenResponse.key_id || request.sshKid || undefined;\n        const cacheRecord = this.generateCacheRecord(serverTokenResponse, authority, reqTimestamp, request, idTokenClaims, userAssertionHash, authCodePayload);\n        let cacheContext;\n        try {\n            if (this.persistencePlugin && this.serializableCache) {\n                this.logger.verbose(\"Persistence enabled, calling beforeCacheAccess\");\n                cacheContext = new TokenCacheContext(this.serializableCache, true);\n                await this.persistencePlugin.beforeCacheAccess(cacheContext);\n            }\n            /*\n             * When saving a refreshed tokens to the cache, it is expected that the account that was used is present in the cache.\n             * If not present, we should return null, as it's the case that another application called removeAccount in between\n             * the calls to getAllAccounts and acquireTokenSilent. We should not overwrite that removal, unless explicitly flagged by\n             * the developer, as in the case of refresh token flow used in ADAL Node to MSAL Node migration.\n             */\n            if (handlingRefreshTokenResponse &&\n                !forceCacheRefreshTokenResponse &&\n                cacheRecord.account) {\n                const key = cacheRecord.account.generateAccountKey();\n                const account = this.cacheStorage.getAccount(key);\n                if (!account) {\n                    this.logger.warning(\"Account used to refresh tokens not in persistence, refreshed tokens will not be stored in the cache\");\n                    return ResponseHandler.generateAuthenticationResult(this.cryptoObj, authority, cacheRecord, false, request, idTokenClaims, requestStateObj, undefined, serverRequestId);\n                }\n            }\n            await this.cacheStorage.saveCacheRecord(cacheRecord, request.storeInCache);\n        }\n        finally {\n            if (this.persistencePlugin &&\n                this.serializableCache &&\n                cacheContext) {\n                this.logger.verbose(\"Persistence enabled, calling afterCacheAccess\");\n                await this.persistencePlugin.afterCacheAccess(cacheContext);\n            }\n        }\n        return ResponseHandler.generateAuthenticationResult(this.cryptoObj, authority, cacheRecord, false, request, idTokenClaims, requestStateObj, serverTokenResponse, serverRequestId);\n    }\n    /**\n     * Generates CacheRecord\n     * @param serverTokenResponse\n     * @param idTokenObj\n     * @param authority\n     */\n    generateCacheRecord(serverTokenResponse, authority, reqTimestamp, request, idTokenClaims, userAssertionHash, authCodePayload) {\n        const env = authority.getPreferredCache();\n        if (!env) {\n            throw createClientAuthError(invalidCacheEnvironment);\n        }\n        // IdToken: non AAD scenarios can have empty realm\n        let cachedIdToken;\n        let cachedAccount;\n        if (serverTokenResponse.id_token && !!idTokenClaims) {\n            cachedIdToken = createIdTokenEntity(this.homeAccountIdentifier, env, serverTokenResponse.id_token, this.clientId, idTokenClaims.tid || \"\");\n            cachedAccount = AccountEntity.createAccount({\n                homeAccountId: this.homeAccountIdentifier,\n                idTokenClaims: idTokenClaims,\n                clientInfo: serverTokenResponse.client_info,\n                cloudGraphHostName: authCodePayload?.cloud_graph_host_name,\n                msGraphHost: authCodePayload?.msgraph_host,\n            }, authority);\n        }\n        // AccessToken\n        let cachedAccessToken = null;\n        if (serverTokenResponse.access_token) {\n            // If scopes not returned in server response, use request scopes\n            const responseScopes = serverTokenResponse.scope\n                ? ScopeSet.fromString(serverTokenResponse.scope)\n                : new ScopeSet(request.scopes || []);\n            /*\n             * Use timestamp calculated before request\n             * Server may return timestamps as strings, parse to numbers if so.\n             */\n            const expiresIn = (typeof serverTokenResponse.expires_in === \"string\"\n                ? parseInt(serverTokenResponse.expires_in, 10)\n                : serverTokenResponse.expires_in) || 0;\n            const extExpiresIn = (typeof serverTokenResponse.ext_expires_in === \"string\"\n                ? parseInt(serverTokenResponse.ext_expires_in, 10)\n                : serverTokenResponse.ext_expires_in) || 0;\n            const refreshIn = (typeof serverTokenResponse.refresh_in === \"string\"\n                ? parseInt(serverTokenResponse.refresh_in, 10)\n                : serverTokenResponse.refresh_in) || undefined;\n            const tokenExpirationSeconds = reqTimestamp + expiresIn;\n            const extendedTokenExpirationSeconds = tokenExpirationSeconds + extExpiresIn;\n            const refreshOnSeconds = refreshIn && refreshIn > 0\n                ? reqTimestamp + refreshIn\n                : undefined;\n            // non AAD scenarios can have empty realm\n            cachedAccessToken = createAccessTokenEntity(this.homeAccountIdentifier, env, serverTokenResponse.access_token, this.clientId, idTokenClaims?.tid || authority.tenant, responseScopes.printScopes(), tokenExpirationSeconds, extendedTokenExpirationSeconds, this.cryptoObj.base64Decode, refreshOnSeconds, serverTokenResponse.token_type, userAssertionHash, serverTokenResponse.key_id, request.claims, request.requestedClaimsHash);\n        }\n        // refreshToken\n        let cachedRefreshToken = null;\n        if (serverTokenResponse.refresh_token) {\n            cachedRefreshToken = createRefreshTokenEntity(this.homeAccountIdentifier, env, serverTokenResponse.refresh_token, this.clientId, serverTokenResponse.foci, userAssertionHash);\n        }\n        // appMetadata\n        let cachedAppMetadata = null;\n        if (serverTokenResponse.foci) {\n            cachedAppMetadata = AppMetadataEntity.createAppMetadataEntity(this.clientId, env, serverTokenResponse.foci);\n        }\n        return new CacheRecord(cachedAccount, cachedIdToken, cachedAccessToken, cachedRefreshToken, cachedAppMetadata);\n    }\n    /**\n     * Creates an @AuthenticationResult from @CacheRecord , @IdToken , and a boolean that states whether or not the result is from cache.\n     *\n     * Optionally takes a state string that is set as-is in the response.\n     *\n     * @param cacheRecord\n     * @param idTokenObj\n     * @param fromTokenCache\n     * @param stateString\n     */\n    static async generateAuthenticationResult(cryptoObj, authority, cacheRecord, fromTokenCache, request, idTokenClaims, requestState, serverTokenResponse, requestId) {\n        let accessToken = Constants.EMPTY_STRING;\n        let responseScopes = [];\n        let expiresOn = null;\n        let extExpiresOn;\n        let refreshOn;\n        let familyId = Constants.EMPTY_STRING;\n        if (cacheRecord.accessToken) {\n            if (cacheRecord.accessToken.tokenType === AuthenticationScheme.POP) {\n                const popTokenGenerator = new PopTokenGenerator(cryptoObj);\n                const { secret, keyId } = cacheRecord.accessToken;\n                if (!keyId) {\n                    throw createClientAuthError(keyIdMissing);\n                }\n                accessToken = await popTokenGenerator.signPopToken(secret, keyId, request);\n            }\n            else {\n                accessToken = cacheRecord.accessToken.secret;\n            }\n            responseScopes = ScopeSet.fromString(cacheRecord.accessToken.target).asArray();\n            expiresOn = new Date(Number(cacheRecord.accessToken.expiresOn) * 1000);\n            extExpiresOn = new Date(Number(cacheRecord.accessToken.extendedExpiresOn) * 1000);\n            if (cacheRecord.accessToken.refreshOn) {\n                refreshOn = new Date(Number(cacheRecord.accessToken.refreshOn) * 1000);\n            }\n        }\n        if (cacheRecord.appMetadata) {\n            familyId =\n                cacheRecord.appMetadata.familyId === THE_FAMILY_ID\n                    ? THE_FAMILY_ID\n                    : \"\";\n        }\n        const uid = idTokenClaims?.oid || idTokenClaims?.sub || \"\";\n        const tid = idTokenClaims?.tid || \"\";\n        // for hybrid + native bridge enablement, send back the native account Id\n        if (serverTokenResponse?.spa_accountid && !!cacheRecord.account) {\n            cacheRecord.account.nativeAccountId =\n                serverTokenResponse?.spa_accountid;\n        }\n        const accountInfo = cacheRecord.account\n            ? {\n                ...cacheRecord.account.getAccountInfo(),\n                idTokenClaims,\n            }\n            : null;\n        return {\n            authority: authority.canonicalAuthority,\n            uniqueId: uid,\n            tenantId: tid,\n            scopes: responseScopes,\n            account: accountInfo,\n            idToken: cacheRecord?.idToken?.secret || \"\",\n            idTokenClaims: idTokenClaims || {},\n            accessToken: accessToken,\n            fromCache: fromTokenCache,\n            expiresOn: expiresOn,\n            extExpiresOn: extExpiresOn,\n            refreshOn: refreshOn,\n            correlationId: request.correlationId,\n            requestId: requestId || Constants.EMPTY_STRING,\n            familyId: familyId,\n            tokenType: cacheRecord.accessToken?.tokenType || Constants.EMPTY_STRING,\n            state: requestState\n                ? requestState.userRequestState\n                : Constants.EMPTY_STRING,\n            cloudGraphHostName: cacheRecord.account?.cloudGraphHostName ||\n                Constants.EMPTY_STRING,\n            msGraphHost: cacheRecord.account?.msGraphHost || Constants.EMPTY_STRING,\n            code: serverTokenResponse?.spa_code,\n            fromNativeBroker: false,\n        };\n    }\n}\n\nexport { ResponseHandler };\n//# sourceMappingURL=ResponseHandler.mjs.map\n","/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\nimport { BaseClient } from './BaseClient.mjs';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.mjs';\nimport { Separators, AADServerParamKeys, GrantType, AuthenticationScheme, PromptValue, HeaderNames } from '../utils/Constants.mjs';\nimport { isOidcProtocolMode } from '../config/ClientConfiguration.mjs';\nimport { ResponseHandler } from '../response/ResponseHandler.mjs';\nimport { StringUtils } from '../utils/StringUtils.mjs';\nimport { createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { UrlString } from '../url/UrlString.mjs';\nimport { PopTokenGenerator } from '../crypto/PopTokenGenerator.mjs';\nimport { TimeUtils } from '../utils/TimeUtils.mjs';\nimport { buildClientInfo, buildClientInfoFromHomeAccountId } from '../account/ClientInfo.mjs';\nimport { CcsCredentialType } from '../account/CcsCredential.mjs';\nimport { createClientConfigurationError } from '../error/ClientConfigurationError.mjs';\nimport { RequestValidator } from '../request/RequestValidator.mjs';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.mjs';\nimport { invokeAsync } from '../utils/FunctionWrappers.mjs';\nimport { requestCannotBeMade, authorizationCodeMissingFromServerResponse } from '../error/ClientAuthErrorCodes.mjs';\nimport { logoutRequestEmpty, missingSshJwk } from '../error/ClientConfigurationErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Oauth2.0 Authorization Code client\n * @internal\n */\nclass AuthorizationCodeClient extends BaseClient {\n    constructor(configuration, performanceClient) {\n        super(configuration, performanceClient);\n        // Flag to indicate if client is for hybrid spa auth code redemption\n        this.includeRedirectUri = true;\n        this.oidcDefaultScopes =\n            this.config.authOptions.authority.options.OIDCOptions?.defaultScopes;\n    }\n    /**\n     * Creates the URL of the authorization request letting the user input credentials and consent to the\n     * application. The URL target the /authorize endpoint of the authority configured in the\n     * application object.\n     *\n     * Once the user inputs their credentials and consents, the authority will send a response to the redirect URI\n     * sent in the request and should contain an authorization code, which can then be used to acquire tokens via\n     * acquireToken(AuthorizationCodeRequest)\n     * @param request\n     */\n    async getAuthCodeUrl(request) {\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.GetAuthCodeUrl, request.correlationId);\n        const queryString = await invokeAsync(this.createAuthCodeUrlQueryString.bind(this), PerformanceEvents.AuthClientCreateQueryString, this.logger, this.performanceClient, request.correlationId)(request);\n        return UrlString.appendQueryString(this.authority.authorizationEndpoint, queryString);\n    }\n    /**\n     * API to acquire a token in exchange of 'authorization_code` acquired by the user in the first leg of the\n     * authorization_code_grant\n     * @param request\n     */\n    async acquireToken(request, authCodePayload) {\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthClientAcquireToken, request.correlationId);\n        if (!request.code) {\n            throw createClientAuthError(requestCannotBeMade);\n        }\n        const reqTimestamp = TimeUtils.nowSeconds();\n        const response = await invokeAsync(this.executeTokenRequest.bind(this), PerformanceEvents.AuthClientExecuteTokenRequest, this.logger, this.performanceClient, request.correlationId)(this.authority, request);\n        // Retrieve requestId from response headers\n        const requestId = response.headers?.[HeaderNames.X_MS_REQUEST_ID];\n        const responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin, this.performanceClient);\n        // Validate response. This function throws a server error if an error is returned by the server.\n        responseHandler.validateTokenResponse(response.body);\n        return invokeAsync(responseHandler.handleServerTokenResponse.bind(responseHandler), PerformanceEvents.HandleServerTokenResponse, this.logger, this.performanceClient, request.correlationId)(response.body, this.authority, reqTimestamp, request, authCodePayload, undefined, undefined, undefined, requestId);\n    }\n    /**\n     * Handles the hash fragment response from public client code request. Returns a code response used by\n     * the client to exchange for a token in acquireToken.\n     * @param hashFragment\n     */\n    handleFragmentResponse(serverParams, cachedState) {\n        // Handle responses.\n        const responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, null, null);\n        // Get code response\n        responseHandler.validateServerAuthorizationCodeResponse(serverParams, cachedState);\n        // throw when there is no auth code in the response\n        if (!serverParams.code) {\n            throw createClientAuthError(authorizationCodeMissingFromServerResponse);\n        }\n        return serverParams;\n    }\n    /**\n     * Used to log out the current user, and redirect the user to the postLogoutRedirectUri.\n     * Default behaviour is to redirect the user to `window.location.href`.\n     * @param authorityUri\n     */\n    getLogoutUri(logoutRequest) {\n        // Throw error if logoutRequest is null/undefined\n        if (!logoutRequest) {\n            throw createClientConfigurationError(logoutRequestEmpty);\n        }\n        const queryString = this.createLogoutUrlQueryString(logoutRequest);\n        // Construct logout URI\n        return UrlString.appendQueryString(this.authority.endSessionEndpoint, queryString);\n    }\n    /**\n     * Executes POST request to token endpoint\n     * @param authority\n     * @param request\n     */\n    async executeTokenRequest(authority, request) {\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthClientExecuteTokenRequest, request.correlationId);\n        const queryParametersString = this.createTokenQueryParameters(request);\n        const endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\n        const requestBody = await invokeAsync(this.createTokenRequestBody.bind(this), PerformanceEvents.AuthClientCreateTokenRequestBody, this.logger, this.performanceClient, request.correlationId)(request);\n        let ccsCredential = undefined;\n        if (request.clientInfo) {\n            try {\n                const clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils);\n                ccsCredential = {\n                    credential: `${clientInfo.uid}${Separators.CLIENT_INFO_SEPARATOR}${clientInfo.utid}`,\n                    type: CcsCredentialType.HOME_ACCOUNT_ID,\n                };\n            }\n            catch (e) {\n                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\n            }\n        }\n        const headers = this.createTokenRequestHeaders(ccsCredential || request.ccsCredential);\n        const thumbprint = {\n            clientId: request.tokenBodyParameters?.clientId ||\n                this.config.authOptions.clientId,\n            authority: authority.canonicalAuthority,\n            scopes: request.scopes,\n            claims: request.claims,\n            authenticationScheme: request.authenticationScheme,\n            resourceRequestMethod: request.resourceRequestMethod,\n            resourceRequestUri: request.resourceRequestUri,\n            shrClaims: request.shrClaims,\n            sshKid: request.sshKid,\n        };\n        return invokeAsync(this.executePostToTokenEndpoint.bind(this), PerformanceEvents.AuthorizationCodeClientExecutePostToTokenEndpoint, this.logger, this.performanceClient, request.correlationId)(endpoint, requestBody, headers, thumbprint, request.correlationId, PerformanceEvents.AuthorizationCodeClientExecutePostToTokenEndpoint);\n    }\n    /**\n     * Generates a map for all the params to be sent to the service\n     * @param request\n     */\n    async createTokenRequestBody(request) {\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthClientCreateTokenRequestBody, request.correlationId);\n        const parameterBuilder = new RequestParameterBuilder();\n        parameterBuilder.addClientId(request.tokenBodyParameters?.[AADServerParamKeys.CLIENT_ID] ||\n            this.config.authOptions.clientId);\n        /*\n         * For hybrid spa flow, there will be a code but no verifier\n         * In this scenario, don't include redirect uri as auth code will not be bound to redirect URI\n         */\n        if (!this.includeRedirectUri) {\n            // Just validate\n            RequestValidator.validateRedirectUri(request.redirectUri);\n        }\n        else {\n            // Validate and include redirect uri\n            parameterBuilder.addRedirectUri(request.redirectUri);\n        }\n        // Add scope array, parameter builder will add default scopes and dedupe\n        parameterBuilder.addScopes(request.scopes, true, this.oidcDefaultScopes);\n        // add code: user set, not validated\n        parameterBuilder.addAuthorizationCode(request.code);\n        // Add library metadata\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n        parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n        parameterBuilder.addThrottling();\n        if (this.serverTelemetryManager && !isOidcProtocolMode(this.config)) {\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n        }\n        // add code_verifier if passed\n        if (request.codeVerifier) {\n            parameterBuilder.addCodeVerifier(request.codeVerifier);\n        }\n        if (this.config.clientCredentials.clientSecret) {\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n        }\n        if (this.config.clientCredentials.clientAssertion) {\n            const clientAssertion = this.config.clientCredentials.clientAssertion;\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n        }\n        parameterBuilder.addGrantType(GrantType.AUTHORIZATION_CODE_GRANT);\n        parameterBuilder.addClientInfo();\n        if (request.authenticationScheme === AuthenticationScheme.POP) {\n            const popTokenGenerator = new PopTokenGenerator(this.cryptoUtils, this.performanceClient);\n            const reqCnfData = await invokeAsync(popTokenGenerator.generateCnf.bind(popTokenGenerator), PerformanceEvents.PopTokenGenerateCnf, this.logger, this.performanceClient, request.correlationId)(request, this.logger);\n            // SPA PoP requires full Base64Url encoded req_cnf string (unhashed)\n            parameterBuilder.addPopToken(reqCnfData.reqCnfString);\n        }\n        else if (request.authenticationScheme === AuthenticationScheme.SSH) {\n            if (request.sshJwk) {\n                parameterBuilder.addSshJwk(request.sshJwk);\n            }\n            else {\n                throw createClientConfigurationError(missingSshJwk);\n            }\n        }\n        const correlationId = request.correlationId ||\n            this.config.cryptoInterface.createNewGuid();\n        parameterBuilder.addCorrelationId(correlationId);\n        if (!StringUtils.isEmptyObj(request.claims) ||\n            (this.config.authOptions.clientCapabilities &&\n                this.config.authOptions.clientCapabilities.length > 0)) {\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n        }\n        let ccsCred = undefined;\n        if (request.clientInfo) {\n            try {\n                const clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils);\n                ccsCred = {\n                    credential: `${clientInfo.uid}${Separators.CLIENT_INFO_SEPARATOR}${clientInfo.utid}`,\n                    type: CcsCredentialType.HOME_ACCOUNT_ID,\n                };\n            }\n            catch (e) {\n                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\n            }\n        }\n        else {\n            ccsCred = request.ccsCredential;\n        }\n        // Adds these as parameters in the request instead of headers to prevent CORS preflight request\n        if (this.config.systemOptions.preventCorsPreflight && ccsCred) {\n            switch (ccsCred.type) {\n                case CcsCredentialType.HOME_ACCOUNT_ID:\n                    try {\n                        const clientInfo = buildClientInfoFromHomeAccountId(ccsCred.credential);\n                        parameterBuilder.addCcsOid(clientInfo);\n                    }\n                    catch (e) {\n                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" +\n                            e);\n                    }\n                    break;\n                case CcsCredentialType.UPN:\n                    parameterBuilder.addCcsUpn(ccsCred.credential);\n                    break;\n            }\n        }\n        if (request.tokenBodyParameters) {\n            parameterBuilder.addExtraQueryParameters(request.tokenBodyParameters);\n        }\n        // Add hybrid spa parameters if not already provided\n        if (request.enableSpaAuthorizationCode &&\n            (!request.tokenBodyParameters ||\n                !request.tokenBodyParameters[AADServerParamKeys.RETURN_SPA_CODE])) {\n            parameterBuilder.addExtraQueryParameters({\n                [AADServerParamKeys.RETURN_SPA_CODE]: \"1\",\n            });\n        }\n        return parameterBuilder.createQueryString();\n    }\n    /**\n     * This API validates the `AuthorizationCodeUrlRequest` and creates a URL\n     * @param request\n     */\n    async createAuthCodeUrlQueryString(request) {\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthClientCreateQueryString, request.correlationId);\n        const parameterBuilder = new RequestParameterBuilder();\n        parameterBuilder.addClientId(request.extraQueryParameters?.[AADServerParamKeys.CLIENT_ID] ||\n            this.config.authOptions.clientId);\n        const requestScopes = [\n            ...(request.scopes || []),\n            ...(request.extraScopesToConsent || []),\n        ];\n        parameterBuilder.addScopes(requestScopes, true, this.oidcDefaultScopes);\n        // validate the redirectUri (to be a non null value)\n        parameterBuilder.addRedirectUri(request.redirectUri);\n        // generate the correlationId if not set by the user and add\n        const correlationId = request.correlationId ||\n            this.config.cryptoInterface.createNewGuid();\n        parameterBuilder.addCorrelationId(correlationId);\n        // add response_mode. If not passed in it defaults to query.\n        parameterBuilder.addResponseMode(request.responseMode);\n        // add response_type = code\n        parameterBuilder.addResponseTypeCode();\n        // add library info parameters\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n        if (!isOidcProtocolMode(this.config)) {\n            parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n        }\n        // add client_info=1\n        parameterBuilder.addClientInfo();\n        if (request.codeChallenge && request.codeChallengeMethod) {\n            parameterBuilder.addCodeChallengeParams(request.codeChallenge, request.codeChallengeMethod);\n        }\n        if (request.prompt) {\n            parameterBuilder.addPrompt(request.prompt);\n        }\n        if (request.domainHint) {\n            parameterBuilder.addDomainHint(request.domainHint);\n        }\n        // Add sid or loginHint with preference for login_hint claim (in request) -> sid -> loginHint (upn/email) -> username of AccountInfo object\n        if (request.prompt !== PromptValue.SELECT_ACCOUNT) {\n            // AAD will throw if prompt=select_account is passed with an account hint\n            if (request.sid && request.prompt === PromptValue.NONE) {\n                // SessionID is only used in silent calls\n                this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from request\");\n                parameterBuilder.addSid(request.sid);\n            }\n            else if (request.account) {\n                const accountSid = this.extractAccountSid(request.account);\n                const accountLoginHintClaim = this.extractLoginHint(request.account);\n                // If login_hint claim is present, use it over sid/username\n                if (accountLoginHintClaim) {\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: login_hint claim present on account\");\n                    parameterBuilder.addLoginHint(accountLoginHintClaim);\n                    try {\n                        const clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\n                        parameterBuilder.addCcsOid(clientInfo);\n                    }\n                    catch (e) {\n                        this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\n                    }\n                }\n                else if (accountSid && request.prompt === PromptValue.NONE) {\n                    /*\n                     * If account and loginHint are provided, we will check account first for sid before adding loginHint\n                     * SessionId is only used in silent calls\n                     */\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from account\");\n                    parameterBuilder.addSid(accountSid);\n                    try {\n                        const clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\n                        parameterBuilder.addCcsOid(clientInfo);\n                    }\n                    catch (e) {\n                        this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\n                    }\n                }\n                else if (request.loginHint) {\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from request\");\n                    parameterBuilder.addLoginHint(request.loginHint);\n                    parameterBuilder.addCcsUpn(request.loginHint);\n                }\n                else if (request.account.username) {\n                    // Fallback to account username if provided\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from account\");\n                    parameterBuilder.addLoginHint(request.account.username);\n                    try {\n                        const clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\n                        parameterBuilder.addCcsOid(clientInfo);\n                    }\n                    catch (e) {\n                        this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\n                    }\n                }\n            }\n            else if (request.loginHint) {\n                this.logger.verbose(\"createAuthCodeUrlQueryString: No account, adding login_hint from request\");\n                parameterBuilder.addLoginHint(request.loginHint);\n                parameterBuilder.addCcsUpn(request.loginHint);\n            }\n        }\n        else {\n            this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is select_account, ignoring account hints\");\n        }\n        if (request.nonce) {\n            parameterBuilder.addNonce(request.nonce);\n        }\n        if (request.state) {\n            parameterBuilder.addState(request.state);\n        }\n        if (request.claims ||\n            (this.config.authOptions.clientCapabilities &&\n                this.config.authOptions.clientCapabilities.length > 0)) {\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n        }\n        if (request.extraQueryParameters) {\n            parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\n        }\n        if (request.nativeBroker) {\n            // signal ests that this is a WAM call\n            parameterBuilder.addNativeBroker();\n            // pass the req_cnf for POP\n            if (request.authenticationScheme === AuthenticationScheme.POP) {\n                const popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);\n                // to reduce the URL length, it is recommended to send the hash of the req_cnf instead of the whole string\n                const reqCnfData = await invokeAsync(popTokenGenerator.generateCnf.bind(popTokenGenerator), PerformanceEvents.PopTokenGenerateCnf, this.logger, this.performanceClient, request.correlationId)(request, this.logger);\n                parameterBuilder.addPopToken(reqCnfData.reqCnfHash);\n            }\n        }\n        return parameterBuilder.createQueryString();\n    }\n    /**\n     * This API validates the `EndSessionRequest` and creates a URL\n     * @param request\n     */\n    createLogoutUrlQueryString(request) {\n        const parameterBuilder = new RequestParameterBuilder();\n        if (request.postLogoutRedirectUri) {\n            parameterBuilder.addPostLogoutRedirectUri(request.postLogoutRedirectUri);\n        }\n        if (request.correlationId) {\n            parameterBuilder.addCorrelationId(request.correlationId);\n        }\n        if (request.idTokenHint) {\n            parameterBuilder.addIdTokenHint(request.idTokenHint);\n        }\n        if (request.state) {\n            parameterBuilder.addState(request.state);\n        }\n        if (request.logoutHint) {\n            parameterBuilder.addLogoutHint(request.logoutHint);\n        }\n        if (request.extraQueryParameters) {\n            parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\n        }\n        return parameterBuilder.createQueryString();\n    }\n    /**\n     * Helper to get sid from account. Returns null if idTokenClaims are not present or sid is not present.\n     * @param account\n     */\n    extractAccountSid(account) {\n        return account.idTokenClaims?.sid || null;\n    }\n    extractLoginHint(account) {\n        return account.idTokenClaims?.login_hint || null;\n    }\n}\n\nexport { AuthorizationCodeClient };\n//# sourceMappingURL=AuthorizationCodeClient.mjs.map\n","/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\nimport { isOidcProtocolMode } from '../config/ClientConfiguration.mjs';\nimport { BaseClient } from './BaseClient.mjs';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.mjs';\nimport { AADServerParamKeys, GrantType, AuthenticationScheme, HeaderNames, Errors } from '../utils/Constants.mjs';\nimport { ResponseHandler } from '../response/ResponseHandler.mjs';\nimport { PopTokenGenerator } from '../crypto/PopTokenGenerator.mjs';\nimport { StringUtils } from '../utils/StringUtils.mjs';\nimport { createClientConfigurationError } from '../error/ClientConfigurationError.mjs';\nimport { createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { ServerError } from '../error/ServerError.mjs';\nimport { TimeUtils } from '../utils/TimeUtils.mjs';\nimport { UrlString } from '../url/UrlString.mjs';\nimport { CcsCredentialType } from '../account/CcsCredential.mjs';\nimport { buildClientInfoFromHomeAccountId } from '../account/ClientInfo.mjs';\nimport { createInteractionRequiredAuthError, InteractionRequiredAuthError } from '../error/InteractionRequiredAuthError.mjs';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.mjs';\nimport { invokeAsync, invoke } from '../utils/FunctionWrappers.mjs';\nimport { tokenRequestEmpty, missingSshJwk } from '../error/ClientConfigurationErrorCodes.mjs';\nimport { noAccountInSilentRequest } from '../error/ClientAuthErrorCodes.mjs';\nimport { noTokensFound } from '../error/InteractionRequiredAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * OAuth2.0 refresh token client\n * @internal\n */\nclass RefreshTokenClient extends BaseClient {\n    constructor(configuration, performanceClient) {\n        super(configuration, performanceClient);\n    }\n    async acquireToken(request) {\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.RefreshTokenClientAcquireToken, request.correlationId);\n        const reqTimestamp = TimeUtils.nowSeconds();\n        const response = await invokeAsync(this.executeTokenRequest.bind(this), PerformanceEvents.RefreshTokenClientExecuteTokenRequest, this.logger, this.performanceClient, request.correlationId)(request, this.authority);\n        // Retrieve requestId from response headers\n        const requestId = response.headers?.[HeaderNames.X_MS_REQUEST_ID];\n        const responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\n        responseHandler.validateTokenResponse(response.body);\n        return invokeAsync(responseHandler.handleServerTokenResponse.bind(responseHandler), PerformanceEvents.HandleServerTokenResponse, this.logger, this.performanceClient, request.correlationId)(response.body, this.authority, reqTimestamp, request, undefined, undefined, true, request.forceCache, requestId);\n    }\n    /**\n     * Gets cached refresh token and attaches to request, then calls acquireToken API\n     * @param request\n     */\n    async acquireTokenByRefreshToken(request) {\n        // Cannot renew token if no request object is given.\n        if (!request) {\n            throw createClientConfigurationError(tokenRequestEmpty);\n        }\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.RefreshTokenClientAcquireTokenByRefreshToken, request.correlationId);\n        // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\n        if (!request.account) {\n            throw createClientAuthError(noAccountInSilentRequest);\n        }\n        // try checking if FOCI is enabled for the given application\n        const isFOCI = this.cacheManager.isAppMetadataFOCI(request.account.environment);\n        // if the app is part of the family, retrive a Family refresh token if present and make a refreshTokenRequest\n        if (isFOCI) {\n            try {\n                return invokeAsync(this.acquireTokenWithCachedRefreshToken.bind(this), PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, this.logger, this.performanceClient, request.correlationId)(request, true);\n            }\n            catch (e) {\n                const noFamilyRTInCache = e instanceof InteractionRequiredAuthError &&\n                    e.errorCode ===\n                        noTokensFound;\n                const clientMismatchErrorWithFamilyRT = e instanceof ServerError &&\n                    e.errorCode === Errors.INVALID_GRANT_ERROR &&\n                    e.subError === Errors.CLIENT_MISMATCH_ERROR;\n                // if family Refresh Token (FRT) cache acquisition fails or if client_mismatch error is seen with FRT, reattempt with application Refresh Token (ART)\n                if (noFamilyRTInCache || clientMismatchErrorWithFamilyRT) {\n                    return invokeAsync(this.acquireTokenWithCachedRefreshToken.bind(this), PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, this.logger, this.performanceClient, request.correlationId)(request, false);\n                    // throw in all other cases\n                }\n                else {\n                    throw e;\n                }\n            }\n        }\n        // fall back to application refresh token acquisition\n        return invokeAsync(this.acquireTokenWithCachedRefreshToken.bind(this), PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, this.logger, this.performanceClient, request.correlationId)(request, false);\n    }\n    /**\n     * makes a network call to acquire tokens by exchanging RefreshToken available in userCache; throws if refresh token is not cached\n     * @param request\n     */\n    async acquireTokenWithCachedRefreshToken(request, foci) {\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);\n        // fetches family RT or application RT based on FOCI value\n        const refreshToken = invoke(this.cacheManager.getRefreshToken.bind(this.cacheManager), PerformanceEvents.CacheManagerGetRefreshToken, this.logger, this.performanceClient, request.correlationId)(request.account, foci, undefined, this.performanceClient, request.correlationId);\n        if (!refreshToken) {\n            throw createInteractionRequiredAuthError(noTokensFound);\n        }\n        // attach cached RT size to the current measurement\n        const refreshTokenRequest = {\n            ...request,\n            refreshToken: refreshToken.secret,\n            authenticationScheme: request.authenticationScheme || AuthenticationScheme.BEARER,\n            ccsCredential: {\n                credential: request.account.homeAccountId,\n                type: CcsCredentialType.HOME_ACCOUNT_ID,\n            },\n        };\n        return invokeAsync(this.acquireToken.bind(this), PerformanceEvents.RefreshTokenClientAcquireToken, this.logger, this.performanceClient, request.correlationId)(refreshTokenRequest);\n    }\n    /**\n     * Constructs the network message and makes a NW call to the underlying secure token service\n     * @param request\n     * @param authority\n     */\n    async executeTokenRequest(request, authority) {\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.RefreshTokenClientExecuteTokenRequest, request.correlationId);\n        const queryParametersString = this.createTokenQueryParameters(request);\n        const endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\n        const requestBody = await invokeAsync(this.createTokenRequestBody.bind(this), PerformanceEvents.RefreshTokenClientCreateTokenRequestBody, this.logger, this.performanceClient, request.correlationId)(request);\n        const headers = this.createTokenRequestHeaders(request.ccsCredential);\n        const thumbprint = {\n            clientId: request.tokenBodyParameters?.clientId ||\n                this.config.authOptions.clientId,\n            authority: authority.canonicalAuthority,\n            scopes: request.scopes,\n            claims: request.claims,\n            authenticationScheme: request.authenticationScheme,\n            resourceRequestMethod: request.resourceRequestMethod,\n            resourceRequestUri: request.resourceRequestUri,\n            shrClaims: request.shrClaims,\n            sshKid: request.sshKid,\n        };\n        return invokeAsync(this.executePostToTokenEndpoint.bind(this), PerformanceEvents.RefreshTokenClientExecutePostToTokenEndpoint, this.logger, this.performanceClient, request.correlationId)(endpoint, requestBody, headers, thumbprint, request.correlationId, PerformanceEvents.RefreshTokenClientExecutePostToTokenEndpoint);\n    }\n    /**\n     * Helper function to create the token request body\n     * @param request\n     */\n    async createTokenRequestBody(request) {\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.RefreshTokenClientCreateTokenRequestBody, request.correlationId);\n        const correlationId = request.correlationId;\n        const parameterBuilder = new RequestParameterBuilder();\n        parameterBuilder.addClientId(request.tokenBodyParameters?.[AADServerParamKeys.CLIENT_ID] ||\n            this.config.authOptions.clientId);\n        if (request.redirectUri) {\n            parameterBuilder.addRedirectUri(request.redirectUri);\n        }\n        parameterBuilder.addScopes(request.scopes, true, this.config.authOptions.authority.options.OIDCOptions?.defaultScopes);\n        parameterBuilder.addGrantType(GrantType.REFRESH_TOKEN_GRANT);\n        parameterBuilder.addClientInfo();\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n        parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n        parameterBuilder.addThrottling();\n        if (this.serverTelemetryManager && !isOidcProtocolMode(this.config)) {\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n        }\n        parameterBuilder.addCorrelationId(correlationId);\n        parameterBuilder.addRefreshToken(request.refreshToken);\n        if (this.config.clientCredentials.clientSecret) {\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n        }\n        if (this.config.clientCredentials.clientAssertion) {\n            const clientAssertion = this.config.clientCredentials.clientAssertion;\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n        }\n        if (request.authenticationScheme === AuthenticationScheme.POP) {\n            const popTokenGenerator = new PopTokenGenerator(this.cryptoUtils, this.performanceClient);\n            const reqCnfData = await invokeAsync(popTokenGenerator.generateCnf.bind(popTokenGenerator), PerformanceEvents.PopTokenGenerateCnf, this.logger, this.performanceClient, request.correlationId)(request, this.logger);\n            // SPA PoP requires full Base64Url encoded req_cnf string (unhashed)\n            parameterBuilder.addPopToken(reqCnfData.reqCnfString);\n        }\n        else if (request.authenticationScheme === AuthenticationScheme.SSH) {\n            if (request.sshJwk) {\n                parameterBuilder.addSshJwk(request.sshJwk);\n            }\n            else {\n                throw createClientConfigurationError(missingSshJwk);\n            }\n        }\n        if (!StringUtils.isEmptyObj(request.claims) ||\n            (this.config.authOptions.clientCapabilities &&\n                this.config.authOptions.clientCapabilities.length > 0)) {\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n        }\n        if (this.config.systemOptions.preventCorsPreflight &&\n            request.ccsCredential) {\n            switch (request.ccsCredential.type) {\n                case CcsCredentialType.HOME_ACCOUNT_ID:\n                    try {\n                        const clientInfo = buildClientInfoFromHomeAccountId(request.ccsCredential.credential);\n                        parameterBuilder.addCcsOid(clientInfo);\n                    }\n                    catch (e) {\n                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" +\n                            e);\n                    }\n                    break;\n                case CcsCredentialType.UPN:\n                    parameterBuilder.addCcsUpn(request.ccsCredential.credential);\n                    break;\n            }\n        }\n        if (request.tokenBodyParameters) {\n            parameterBuilder.addExtraQueryParameters(request.tokenBodyParameters);\n        }\n        return parameterBuilder.createQueryString();\n    }\n}\n\nexport { RefreshTokenClient };\n//# sourceMappingURL=RefreshTokenClient.mjs.map\n","/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\nimport { BaseClient } from './BaseClient.mjs';\nimport { TimeUtils } from '../utils/TimeUtils.mjs';\nimport { RefreshTokenClient } from './RefreshTokenClient.mjs';\nimport { ClientAuthError, createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { ResponseHandler } from '../response/ResponseHandler.mjs';\nimport { CacheOutcome } from '../utils/Constants.mjs';\nimport { StringUtils } from '../utils/StringUtils.mjs';\nimport { extractTokenClaims, checkMaxAge } from '../account/AuthToken.mjs';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.mjs';\nimport { invokeAsync } from '../utils/FunctionWrappers.mjs';\nimport { tokenRefreshRequired, noAccountInSilentRequest, authTimeNotFound } from '../error/ClientAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/** @internal */\nclass SilentFlowClient extends BaseClient {\n    constructor(configuration, performanceClient) {\n        super(configuration, performanceClient);\n    }\n    /**\n     * Retrieves a token from cache if it is still valid, or uses the cached refresh token to renew\n     * the given token and returns the renewed token\n     * @param request\n     */\n    async acquireToken(request) {\n        try {\n            const [authResponse, cacheOutcome] = await this.acquireCachedToken(request);\n            // if the token is not expired but must be refreshed; get a new one in the background\n            if (cacheOutcome === CacheOutcome.PROACTIVELY_REFRESHED) {\n                this.logger.info(\"SilentFlowClient:acquireCachedToken - Cached access token's refreshOn property has been exceeded'. It's not expired, but must be refreshed.\");\n                // refresh the access token in the background\n                const refreshTokenClient = new RefreshTokenClient(this.config, this.performanceClient);\n                refreshTokenClient\n                    .acquireTokenByRefreshToken(request)\n                    .catch(() => {\n                    // do nothing, this is running in the background and no action is to be taken upon success or failure\n                });\n            }\n            // return the cached token\n            return authResponse;\n        }\n        catch (e) {\n            if (e instanceof ClientAuthError &&\n                e.errorCode === tokenRefreshRequired) {\n                const refreshTokenClient = new RefreshTokenClient(this.config, this.performanceClient);\n                return refreshTokenClient.acquireTokenByRefreshToken(request);\n            }\n            else {\n                throw e;\n            }\n        }\n    }\n    /**\n     * Retrieves token from cache or throws an error if it must be refreshed.\n     * @param request\n     */\n    async acquireCachedToken(request) {\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.SilentFlowClientAcquireCachedToken, request.correlationId);\n        let lastCacheOutcome = CacheOutcome.NOT_APPLICABLE;\n        if (request.forceRefresh ||\n            (!this.config.cacheOptions.claimsBasedCachingEnabled &&\n                !StringUtils.isEmptyObj(request.claims))) {\n            // Must refresh due to present force_refresh flag.\n            this.setCacheOutcome(CacheOutcome.FORCE_REFRESH_OR_CLAIMS, request.correlationId);\n            throw createClientAuthError(tokenRefreshRequired);\n        }\n        // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\n        if (!request.account) {\n            throw createClientAuthError(noAccountInSilentRequest);\n        }\n        const environment = request.authority || this.authority.getPreferredCache();\n        const cacheRecord = this.cacheManager.readCacheRecord(request.account, request, environment, this.performanceClient, request.correlationId);\n        if (!cacheRecord.accessToken) {\n            // must refresh due to non-existent access_token\n            this.setCacheOutcome(CacheOutcome.NO_CACHED_ACCESS_TOKEN, request.correlationId);\n            throw createClientAuthError(tokenRefreshRequired);\n        }\n        else if (TimeUtils.wasClockTurnedBack(cacheRecord.accessToken.cachedAt) ||\n            TimeUtils.isTokenExpired(cacheRecord.accessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\n            // must refresh due to the expires_in value\n            this.setCacheOutcome(CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED, request.correlationId);\n            throw createClientAuthError(tokenRefreshRequired);\n        }\n        else if (cacheRecord.accessToken.refreshOn &&\n            TimeUtils.isTokenExpired(cacheRecord.accessToken.refreshOn, 0)) {\n            // must refresh (in the background) due to the refresh_in value\n            lastCacheOutcome = CacheOutcome.PROACTIVELY_REFRESHED;\n            // don't throw ClientAuthError.createRefreshRequiredError(), return cached token instead\n        }\n        this.setCacheOutcome(lastCacheOutcome, request.correlationId);\n        if (this.config.serverTelemetryManager) {\n            this.config.serverTelemetryManager.incrementCacheHits();\n        }\n        return [\n            await invokeAsync(this.generateResultFromCacheRecord.bind(this), PerformanceEvents.SilentFlowClientGenerateResultFromCacheRecord, this.logger, this.performanceClient, request.correlationId)(cacheRecord, request),\n            lastCacheOutcome,\n        ];\n    }\n    setCacheOutcome(cacheOutcome, correlationId) {\n        this.serverTelemetryManager?.setCacheOutcome(cacheOutcome);\n        this.performanceClient?.addFields({\n            cacheOutcome: cacheOutcome,\n        }, correlationId);\n        if (cacheOutcome !== CacheOutcome.NOT_APPLICABLE) {\n            this.logger.info(`Token refresh is required due to cache outcome: ${cacheOutcome}`);\n        }\n    }\n    /**\n     * Helper function to build response object from the CacheRecord\n     * @param cacheRecord\n     */\n    async generateResultFromCacheRecord(cacheRecord, request) {\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.SilentFlowClientGenerateResultFromCacheRecord, request.correlationId);\n        let idTokenClaims;\n        if (cacheRecord.idToken) {\n            idTokenClaims = extractTokenClaims(cacheRecord.idToken.secret, this.config.cryptoInterface.base64Decode);\n        }\n        // token max_age check\n        if (request.maxAge || request.maxAge === 0) {\n            const authTime = idTokenClaims?.auth_time;\n            if (!authTime) {\n                throw createClientAuthError(authTimeNotFound);\n            }\n            checkMaxAge(authTime, request.maxAge);\n        }\n        return await ResponseHandler.generateAuthenticationResult(this.cryptoUtils, this.authority, cacheRecord, true, request, idTokenClaims);\n    }\n}\n\nexport { SilentFlowClient };\n//# sourceMappingURL=SilentFlowClient.mjs.map\n","/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\nimport { ThrottlingConstants } from '../../utils/Constants.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nclass ThrottlingEntity {\n    /**\n     * validates if a given cache entry is \"Throttling\", parses <key,value>\n     * @param key\n     * @param entity\n     */\n    static isThrottlingEntity(key, entity) {\n        let validateKey = false;\n        if (key) {\n            validateKey =\n                key.indexOf(ThrottlingConstants.THROTTLING_PREFIX) === 0;\n        }\n        let validateEntity = true;\n        if (entity) {\n            validateEntity = entity.hasOwnProperty(\"throttleTime\");\n        }\n        return validateKey && validateEntity;\n    }\n}\n\nexport { ThrottlingEntity };\n//# sourceMappingURL=ThrottlingEntity.mjs.map\n","/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\nimport { createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { methodNotImplemented } from '../error/ClientAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nconst StubbedNetworkModule = {\n    sendGetRequestAsync: () => {\n        return Promise.reject(createClientAuthError(methodNotImplemented));\n    },\n    sendPostRequestAsync: () => {\n        return Promise.reject(createClientAuthError(methodNotImplemented));\n    },\n};\n\nexport { StubbedNetworkModule };\n//# sourceMappingURL=INetworkModule.mjs.map\n","/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nconst missingKidError = \"missing_kid_error\";\nconst missingAlgError = \"missing_alg_error\";\n\nexport { missingAlgError, missingKidError };\n//# sourceMappingURL=JoseHeaderErrorCodes.mjs.map\n","/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\nimport { AuthError } from './AuthError.mjs';\nimport { missingKidError, missingAlgError } from './JoseHeaderErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nconst JoseHeaderErrorMessages = {\n    [missingKidError]: \"The JOSE Header for the requested JWT, JWS or JWK object requires a keyId to be configured as the 'kid' header claim. No 'kid' value was provided.\",\n    [missingAlgError]: \"The JOSE Header for the requested JWT, JWS or JWK object requires an algorithm to be specified as the 'alg' header claim. No 'alg' value was provided.\",\n};\n/**\n * Error thrown when there is an error in the client code running on the browser.\n */\nclass JoseHeaderError extends AuthError {\n    constructor(errorCode, errorMessage) {\n        super(errorCode, errorMessage);\n        this.name = \"JoseHeaderError\";\n        Object.setPrototypeOf(this, JoseHeaderError.prototype);\n    }\n}\n/** Returns JoseHeaderError object */\nfunction createJoseHeaderError(code) {\n    return new JoseHeaderError(code, JoseHeaderErrorMessages[code]);\n}\n\nexport { JoseHeaderError, JoseHeaderErrorMessages, createJoseHeaderError };\n//# sourceMappingURL=JoseHeaderError.mjs.map\n","/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\nimport { createJoseHeaderError } from '../error/JoseHeaderError.mjs';\nimport { JsonWebTokenTypes } from '../utils/Constants.mjs';\nimport { missingKidError, missingAlgError } from '../error/JoseHeaderErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/** @internal */\nclass JoseHeader {\n    constructor(options) {\n        this.typ = options.typ;\n        this.alg = options.alg;\n        this.kid = options.kid;\n    }\n    /**\n     * Builds SignedHttpRequest formatted JOSE Header from the\n     * JOSE Header options provided or previously set on the object and returns\n     * the stringified header object.\n     * Throws if keyId or algorithm aren't provided since they are required for Access Token Binding.\n     * @param shrHeaderOptions\n     * @returns\n     */\n    static getShrHeaderString(shrHeaderOptions) {\n        // KeyID is required on the SHR header\n        if (!shrHeaderOptions.kid) {\n            throw createJoseHeaderError(missingKidError);\n        }\n        // Alg is required on the SHR header\n        if (!shrHeaderOptions.alg) {\n            throw createJoseHeaderError(missingAlgError);\n        }\n        const shrHeader = new JoseHeader({\n            // Access Token PoP headers must have type pop, but the type header can be overriden for special cases\n            typ: shrHeaderOptions.typ || JsonWebTokenTypes.Pop,\n            kid: shrHeaderOptions.kid,\n            alg: shrHeaderOptions.alg,\n        });\n        return JSON.stringify(shrHeader);\n    }\n}\n\nexport { JoseHeader };\n//# sourceMappingURL=JoseHeader.mjs.map\n","/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\nimport { createClientConfigurationError } from '../error/ClientConfigurationError.mjs';\nimport { Constants, HeaderNames } from '../utils/Constants.mjs';\nimport { invalidAuthenticationHeader, missingNonceAuthenticationHeader } from '../error/ClientConfigurationErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * This is a helper class that parses supported HTTP response authentication headers to extract and return\n * header challenge values that can be used outside the basic authorization flows.\n */\nclass AuthenticationHeaderParser {\n    constructor(headers) {\n        this.headers = headers;\n    }\n    /**\n     * This method parses the SHR nonce value out of either the Authentication-Info or WWW-Authenticate authentication headers.\n     * @returns\n     */\n    getShrNonce() {\n        // Attempt to parse nonce from Authentiacation-Info\n        const authenticationInfo = this.headers[HeaderNames.AuthenticationInfo];\n        if (authenticationInfo) {\n            const authenticationInfoChallenges = this.parseChallenges(authenticationInfo);\n            if (authenticationInfoChallenges.nextnonce) {\n                return authenticationInfoChallenges.nextnonce;\n            }\n            throw createClientConfigurationError(invalidAuthenticationHeader);\n        }\n        // Attempt to parse nonce from WWW-Authenticate\n        const wwwAuthenticate = this.headers[HeaderNames.WWWAuthenticate];\n        if (wwwAuthenticate) {\n            const wwwAuthenticateChallenges = this.parseChallenges(wwwAuthenticate);\n            if (wwwAuthenticateChallenges.nonce) {\n                return wwwAuthenticateChallenges.nonce;\n            }\n            throw createClientConfigurationError(invalidAuthenticationHeader);\n        }\n        // If neither header is present, throw missing headers error\n        throw createClientConfigurationError(missingNonceAuthenticationHeader);\n    }\n    /**\n     * Parses an HTTP header's challenge set into a key/value map.\n     * @param header\n     * @returns\n     */\n    parseChallenges(header) {\n        const schemeSeparator = header.indexOf(\" \");\n        const challenges = header.substr(schemeSeparator + 1).split(\",\");\n        const challengeMap = {};\n        challenges.forEach((challenge) => {\n            const [key, value] = challenge.split(\"=\");\n            // Remove escaped quotation marks (', \") from challenge string to keep only the challenge value\n            challengeMap[key] = unescape(value.replace(/['\"]+/g, Constants.EMPTY_STRING));\n        });\n        return challengeMap;\n    }\n}\n\nexport { AuthenticationHeaderParser };\n//# sourceMappingURL=AuthenticationHeaderParser.mjs.map\n","/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\nimport { CacheOutcome, Constants, SERVER_TELEM_CONSTANTS, Separators } from '../../utils/Constants.mjs';\nimport { AuthError } from '../../error/AuthError.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/** @internal */\nclass ServerTelemetryManager {\n    constructor(telemetryRequest, cacheManager) {\n        this.cacheOutcome = CacheOutcome.NOT_APPLICABLE;\n        this.cacheManager = cacheManager;\n        this.apiId = telemetryRequest.apiId;\n        this.correlationId = telemetryRequest.correlationId;\n        this.wrapperSKU = telemetryRequest.wrapperSKU || Constants.EMPTY_STRING;\n        this.wrapperVer = telemetryRequest.wrapperVer || Constants.EMPTY_STRING;\n        this.telemetryCacheKey =\n            SERVER_TELEM_CONSTANTS.CACHE_KEY +\n                Separators.CACHE_KEY_SEPARATOR +\n                telemetryRequest.clientId;\n    }\n    /**\n     * API to add MSER Telemetry to request\n     */\n    generateCurrentRequestHeaderValue() {\n        const request = `${this.apiId}${SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR}${this.cacheOutcome}`;\n        const platformFields = [this.wrapperSKU, this.wrapperVer].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n        const regionDiscoveryFields = this.getRegionDiscoveryFields();\n        const requestWithRegionDiscoveryFields = [\n            request,\n            regionDiscoveryFields,\n        ].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n        return [\n            SERVER_TELEM_CONSTANTS.SCHEMA_VERSION,\n            requestWithRegionDiscoveryFields,\n            platformFields,\n        ].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);\n    }\n    /**\n     * API to add MSER Telemetry for the last failed request\n     */\n    generateLastRequestHeaderValue() {\n        const lastRequests = this.getLastRequests();\n        const maxErrors = ServerTelemetryManager.maxErrorsToSend(lastRequests);\n        const failedRequests = lastRequests.failedRequests\n            .slice(0, 2 * maxErrors)\n            .join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n        const errors = lastRequests.errors\n            .slice(0, maxErrors)\n            .join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n        const errorCount = lastRequests.errors.length;\n        // Indicate whether this header contains all data or partial data\n        const overflow = maxErrors < errorCount\n            ? SERVER_TELEM_CONSTANTS.OVERFLOW_TRUE\n            : SERVER_TELEM_CONSTANTS.OVERFLOW_FALSE;\n        const platformFields = [errorCount, overflow].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n        return [\n            SERVER_TELEM_CONSTANTS.SCHEMA_VERSION,\n            lastRequests.cacheHits,\n            failedRequests,\n            errors,\n            platformFields,\n        ].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);\n    }\n    /**\n     * API to cache token failures for MSER data capture\n     * @param error\n     */\n    cacheFailedRequest(error) {\n        const lastRequests = this.getLastRequests();\n        if (lastRequests.errors.length >=\n            SERVER_TELEM_CONSTANTS.MAX_CACHED_ERRORS) {\n            // Remove a cached error to make room, first in first out\n            lastRequests.failedRequests.shift(); // apiId\n            lastRequests.failedRequests.shift(); // correlationId\n            lastRequests.errors.shift();\n        }\n        lastRequests.failedRequests.push(this.apiId, this.correlationId);\n        if (error instanceof Error && !!error && error.toString()) {\n            if (error instanceof AuthError) {\n                if (error.subError) {\n                    lastRequests.errors.push(error.subError);\n                }\n                else if (error.errorCode) {\n                    lastRequests.errors.push(error.errorCode);\n                }\n                else {\n                    lastRequests.errors.push(error.toString());\n                }\n            }\n            else {\n                lastRequests.errors.push(error.toString());\n            }\n        }\n        else {\n            lastRequests.errors.push(SERVER_TELEM_CONSTANTS.UNKNOWN_ERROR);\n        }\n        this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);\n        return;\n    }\n    /**\n     * Update server telemetry cache entry by incrementing cache hit counter\n     */\n    incrementCacheHits() {\n        const lastRequests = this.getLastRequests();\n        lastRequests.cacheHits += 1;\n        this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);\n        return lastRequests.cacheHits;\n    }\n    /**\n     * Get the server telemetry entity from cache or initialize a new one\n     */\n    getLastRequests() {\n        const initialValue = {\n            failedRequests: [],\n            errors: [],\n            cacheHits: 0,\n        };\n        const lastRequests = this.cacheManager.getServerTelemetry(this.telemetryCacheKey);\n        return lastRequests || initialValue;\n    }\n    /**\n     * Remove server telemetry cache entry\n     */\n    clearTelemetryCache() {\n        const lastRequests = this.getLastRequests();\n        const numErrorsFlushed = ServerTelemetryManager.maxErrorsToSend(lastRequests);\n        const errorCount = lastRequests.errors.length;\n        if (numErrorsFlushed === errorCount) {\n            // All errors were sent on last request, clear Telemetry cache\n            this.cacheManager.removeItem(this.telemetryCacheKey);\n        }\n        else {\n            // Partial data was flushed to server, construct a new telemetry cache item with errors that were not flushed\n            const serverTelemEntity = {\n                failedRequests: lastRequests.failedRequests.slice(numErrorsFlushed * 2),\n                errors: lastRequests.errors.slice(numErrorsFlushed),\n                cacheHits: 0,\n            };\n            this.cacheManager.setServerTelemetry(this.telemetryCacheKey, serverTelemEntity);\n        }\n    }\n    /**\n     * Returns the maximum number of errors that can be flushed to the server in the next network request\n     * @param serverTelemetryEntity\n     */\n    static maxErrorsToSend(serverTelemetryEntity) {\n        let i;\n        let maxErrors = 0;\n        let dataSize = 0;\n        const errorCount = serverTelemetryEntity.errors.length;\n        for (i = 0; i < errorCount; i++) {\n            // failedRequests parameter contains pairs of apiId and correlationId, multiply index by 2 to preserve pairs\n            const apiId = serverTelemetryEntity.failedRequests[2 * i] ||\n                Constants.EMPTY_STRING;\n            const correlationId = serverTelemetryEntity.failedRequests[2 * i + 1] ||\n                Constants.EMPTY_STRING;\n            const errorCode = serverTelemetryEntity.errors[i] || Constants.EMPTY_STRING;\n            // Count number of characters that would be added to header, each character is 1 byte. Add 3 at the end to account for separators\n            dataSize +=\n                apiId.toString().length +\n                    correlationId.toString().length +\n                    errorCode.length +\n                    3;\n            if (dataSize < SERVER_TELEM_CONSTANTS.MAX_LAST_HEADER_BYTES) {\n                // Adding this entry to the header would still keep header size below the limit\n                maxErrors += 1;\n            }\n            else {\n                break;\n            }\n        }\n        return maxErrors;\n    }\n    /**\n     * Get the region discovery fields\n     *\n     * @returns string\n     */\n    getRegionDiscoveryFields() {\n        const regionDiscoveryFields = [];\n        regionDiscoveryFields.push(this.regionUsed || Constants.EMPTY_STRING);\n        regionDiscoveryFields.push(this.regionSource || Constants.EMPTY_STRING);\n        regionDiscoveryFields.push(this.regionOutcome || Constants.EMPTY_STRING);\n        return regionDiscoveryFields.join(\",\");\n    }\n    /**\n     * Update the region discovery metadata\n     *\n     * @param regionDiscoveryMetadata\n     * @returns void\n     */\n    updateRegionDiscoveryMetadata(regionDiscoveryMetadata) {\n        this.regionUsed = regionDiscoveryMetadata.region_used;\n        this.regionSource = regionDiscoveryMetadata.region_source;\n        this.regionOutcome = regionDiscoveryMetadata.region_outcome;\n    }\n    /**\n     * Set cache outcome\n     */\n    setCacheOutcome(cacheOutcome) {\n        this.cacheOutcome = cacheOutcome;\n    }\n}\n\nexport { ServerTelemetryManager };\n//# sourceMappingURL=ServerTelemetryManager.mjs.map\n","/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\nimport { IntFields, PerformanceEventStatus } from './PerformanceEvent.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nclass PerformanceClient {\n    /**\n     * Creates an instance of PerformanceClient,\n     * an abstract class containing core performance telemetry logic.\n     *\n     * @constructor\n     * @param {string} clientId Client ID of the application\n     * @param {string} authority Authority used by the application\n     * @param {Logger} logger Logger used by the application\n     * @param {string} libraryName Name of the library\n     * @param {string} libraryVersion Version of the library\n     * @param {ApplicationTelemetry} applicationTelemetry application name and version\n     * @param {Set<String>} intFields integer fields to be truncated\n     */\n    constructor(clientId, authority, logger, libraryName, libraryVersion, applicationTelemetry, intFields) {\n        this.authority = authority;\n        this.libraryName = libraryName;\n        this.libraryVersion = libraryVersion;\n        this.applicationTelemetry = applicationTelemetry;\n        this.clientId = clientId;\n        this.logger = logger;\n        this.callbacks = new Map();\n        this.eventsByCorrelationId = new Map();\n        this.queueMeasurements = new Map();\n        this.preQueueTimeByCorrelationId = new Map();\n        this.intFields = intFields || new Set();\n        for (const item of IntFields) {\n            this.intFields.add(item);\n        }\n    }\n    /**\n     * Starts and returns an platform-specific implementation of IPerformanceMeasurement.\n     * Note: this function can be changed to abstract at the next major version bump.\n     *\n     * @param {string} measureName\n     * @param {string} correlationId\n     * @returns {IPerformanceMeasurement}\n     */\n    startPerformanceMeasurement(measureName, // eslint-disable-line @typescript-eslint/no-unused-vars\n    correlationId // eslint-disable-line @typescript-eslint/no-unused-vars\n    ) {\n        return {};\n    }\n    /**\n     * Gets map of pre-queue times by correlation Id\n     *\n     * @param {PerformanceEvents} eventName\n     * @param {string} correlationId\n     * @returns {number}\n     */\n    getPreQueueTime(eventName, correlationId) {\n        const preQueueEvent = this.preQueueTimeByCorrelationId.get(correlationId);\n        if (!preQueueEvent) {\n            this.logger.trace(`PerformanceClient.getPreQueueTime: no pre-queue times found for correlationId: ${correlationId}, unable to add queue measurement`);\n            return;\n        }\n        else if (preQueueEvent.name !== eventName) {\n            this.logger.trace(`PerformanceClient.getPreQueueTime: no pre-queue time found for ${eventName}, unable to add queue measurement`);\n            return;\n        }\n        return preQueueEvent.time;\n    }\n    /**\n     * Calculates the difference between current time and time when function was queued.\n     * Note: It is possible to have 0 as the queue time if the current time and the queued time was the same.\n     *\n     * @param {number} preQueueTime\n     * @param {number} currentTime\n     * @returns {number}\n     */\n    calculateQueuedTime(preQueueTime, currentTime) {\n        if (preQueueTime < 1) {\n            this.logger.trace(`PerformanceClient: preQueueTime should be a positive integer and not ${preQueueTime}`);\n            return 0;\n        }\n        if (currentTime < 1) {\n            this.logger.trace(`PerformanceClient: currentTime should be a positive integer and not ${currentTime}`);\n            return 0;\n        }\n        if (currentTime < preQueueTime) {\n            this.logger.trace(\"PerformanceClient: currentTime is less than preQueueTime, check how time is being retrieved\");\n            return 0;\n        }\n        return currentTime - preQueueTime;\n    }\n    /**\n     * Adds queue measurement time to QueueMeasurements array for given correlation ID.\n     *\n     * @param {PerformanceEvents} eventName\n     * @param {?string} correlationId\n     * @param {?number} queueTime\n     * @param {?boolean} manuallyCompleted - indicator for manually completed queue measurements\n     * @returns\n     */\n    addQueueMeasurement(eventName, correlationId, queueTime, manuallyCompleted) {\n        if (!correlationId) {\n            this.logger.trace(`PerformanceClient.addQueueMeasurement: correlationId not provided for ${eventName}, cannot add queue measurement`);\n            return;\n        }\n        if (queueTime === 0) {\n            // Possible for there to be no queue time after calculation\n            this.logger.trace(`PerformanceClient.addQueueMeasurement: queue time provided for ${eventName} is ${queueTime}`);\n        }\n        else if (!queueTime) {\n            this.logger.trace(`PerformanceClient.addQueueMeasurement: no queue time provided for ${eventName}`);\n            return;\n        }\n        const queueMeasurement = {\n            eventName,\n            // Always default queue time to 0 for manually completed (improperly instrumented)\n            queueTime: manuallyCompleted ? 0 : queueTime,\n            manuallyCompleted,\n        };\n        // Adds to existing correlation Id if present in queueMeasurements\n        const existingMeasurements = this.queueMeasurements.get(correlationId);\n        if (existingMeasurements) {\n            existingMeasurements.push(queueMeasurement);\n            this.queueMeasurements.set(correlationId, existingMeasurements);\n        }\n        else {\n            // Sets new correlation Id if not present in queueMeasurements\n            this.logger.trace(`PerformanceClient.addQueueMeasurement: adding correlationId ${correlationId} to queue measurements`);\n            const measurementArray = [queueMeasurement];\n            this.queueMeasurements.set(correlationId, measurementArray);\n        }\n        // Delete processed pre-queue event.\n        this.preQueueTimeByCorrelationId.delete(correlationId);\n    }\n    /**\n     * Starts measuring performance for a given operation. Returns a function that should be used to end the measurement.\n     *\n     * @param {PerformanceEvents} measureName\n     * @param {?string} [correlationId]\n     * @returns {InProgressPerformanceEvent}\n     */\n    startMeasurement(measureName, correlationId) {\n        // Generate a placeholder correlation if the request does not provide one\n        const eventCorrelationId = correlationId || this.generateId();\n        if (!correlationId) {\n            this.logger.info(`PerformanceClient: No correlation id provided for ${measureName}, generating`, eventCorrelationId);\n        }\n        this.logger.trace(`PerformanceClient: Performance measurement started for ${measureName}`, eventCorrelationId);\n        const performanceMeasurement = this.startPerformanceMeasurement(measureName, eventCorrelationId);\n        performanceMeasurement.startMeasurement();\n        const inProgressEvent = {\n            eventId: this.generateId(),\n            status: PerformanceEventStatus.InProgress,\n            authority: this.authority,\n            libraryName: this.libraryName,\n            libraryVersion: this.libraryVersion,\n            clientId: this.clientId,\n            name: measureName,\n            startTimeMs: Date.now(),\n            correlationId: eventCorrelationId,\n            appName: this.applicationTelemetry?.appName,\n            appVersion: this.applicationTelemetry?.appVersion,\n        };\n        // Store in progress events so they can be discarded if not ended properly\n        this.cacheEventByCorrelationId(inProgressEvent);\n        // Return the event and functions the caller can use to properly end/flush the measurement\n        return {\n            end: (event) => {\n                return this.endMeasurement({\n                    // Initial set of event properties\n                    ...inProgressEvent,\n                    // Properties set when event ends\n                    ...event,\n                }, performanceMeasurement);\n            },\n            discard: () => {\n                return this.discardMeasurements(inProgressEvent.correlationId);\n            },\n            add: (fields) => {\n                return this.addFields(fields, inProgressEvent.correlationId);\n            },\n            increment: (fields) => {\n                return this.incrementFields(fields, inProgressEvent.correlationId);\n            },\n            measurement: performanceMeasurement,\n            event: inProgressEvent,\n        };\n    }\n    /**\n     * Stops measuring the performance for an operation. Should only be called directly by PerformanceClient classes,\n     * as consumers should instead use the function returned by startMeasurement.\n     * Adds a new field named as \"[event name]DurationMs\" for sub-measurements, completes and emits an event\n     * otherwise.\n     *\n     * @param {PerformanceEvent} event\n     * @param {IPerformanceMeasurement} measurement\n     * @returns {(PerformanceEvent | null)}\n     */\n    endMeasurement(event, measurement) {\n        const rootEvent = this.eventsByCorrelationId.get(event.correlationId);\n        if (!rootEvent) {\n            this.logger.trace(`PerformanceClient: Measurement not found for ${event.eventId}`, event.correlationId);\n            return null;\n        }\n        const isRoot = event.eventId === rootEvent.eventId;\n        let queueInfo = {\n            totalQueueTime: 0,\n            totalQueueCount: 0,\n            manuallyCompletedCount: 0,\n        };\n        if (isRoot) {\n            queueInfo = this.getQueueInfo(event.correlationId);\n            this.discardCache(rootEvent.correlationId);\n        }\n        else {\n            rootEvent.incompleteSubMeasurements?.delete(event.eventId);\n        }\n        measurement?.endMeasurement();\n        const durationMs = measurement?.flushMeasurement();\n        // null indicates no measurement was taken (e.g. needed performance APIs not present)\n        if (!durationMs) {\n            this.logger.trace(\"PerformanceClient: Performance measurement not taken\", rootEvent.correlationId);\n            return null;\n        }\n        this.logger.trace(`PerformanceClient: Performance measurement ended for ${event.name}: ${durationMs} ms`, event.correlationId);\n        // Add sub-measurement attribute to root event.\n        if (!isRoot) {\n            rootEvent[event.name + \"DurationMs\"] = Math.floor(durationMs);\n            return { ...rootEvent };\n        }\n        let finalEvent = { ...rootEvent, ...event };\n        let incompleteSubsCount = 0;\n        // Incomplete sub-measurements are discarded. They are likely an instrumentation bug that should be fixed.\n        finalEvent.incompleteSubMeasurements?.forEach((subMeasurement) => {\n            this.logger.trace(`PerformanceClient: Incomplete submeasurement ${subMeasurement.name} found for ${event.name}`, finalEvent.correlationId);\n            incompleteSubsCount++;\n        });\n        finalEvent.incompleteSubMeasurements = undefined;\n        finalEvent = {\n            ...finalEvent,\n            durationMs: Math.round(durationMs),\n            queuedTimeMs: queueInfo.totalQueueTime,\n            queuedCount: queueInfo.totalQueueCount,\n            queuedManuallyCompletedCount: queueInfo.manuallyCompletedCount,\n            status: PerformanceEventStatus.Completed,\n            incompleteSubsCount,\n        };\n        this.truncateIntegralFields(finalEvent);\n        this.emitEvents([finalEvent], event.correlationId);\n        return finalEvent;\n    }\n    /**\n     * Saves extra information to be emitted when the measurements are flushed\n     * @param fields\n     * @param correlationId\n     */\n    addFields(fields, correlationId) {\n        this.logger.trace(\"PerformanceClient: Updating static fields\");\n        const event = this.eventsByCorrelationId.get(correlationId);\n        if (event) {\n            this.eventsByCorrelationId.set(correlationId, {\n                ...event,\n                ...fields,\n            });\n        }\n        else {\n            this.logger.trace(\"PerformanceClient: Event not found for\", correlationId);\n        }\n    }\n    /**\n     * Increment counters to be emitted when the measurements are flushed\n     * @param fields {string[]}\n     * @param correlationId {string} correlation identifier\n     */\n    incrementFields(fields, correlationId) {\n        this.logger.trace(\"PerformanceClient: Updating counters\");\n        const event = this.eventsByCorrelationId.get(correlationId);\n        if (event) {\n            for (const counter in fields) {\n                if (!event.hasOwnProperty(counter)) {\n                    event[counter] = 0;\n                }\n                else if (isNaN(Number(event[counter]))) {\n                    return;\n                }\n                event[counter] += fields[counter];\n            }\n        }\n        else {\n            this.logger.trace(\"PerformanceClient: Event not found for\", correlationId);\n        }\n    }\n    /**\n     * Upserts event into event cache.\n     * First key is the correlation id, second key is the event id.\n     * Allows for events to be grouped by correlation id,\n     * and to easily allow for properties on them to be updated.\n     *\n     * @private\n     * @param {PerformanceEvent} event\n     */\n    cacheEventByCorrelationId(event) {\n        const rootEvent = this.eventsByCorrelationId.get(event.correlationId);\n        if (rootEvent) {\n            this.logger.trace(`PerformanceClient: Performance measurement for ${event.name} added/updated`, event.correlationId);\n            rootEvent.incompleteSubMeasurements =\n                rootEvent.incompleteSubMeasurements || new Map();\n            rootEvent.incompleteSubMeasurements.set(event.eventId, {\n                name: event.name,\n                startTimeMs: event.startTimeMs,\n            });\n        }\n        else {\n            this.logger.trace(`PerformanceClient: Performance measurement for ${event.name} started`, event.correlationId);\n            this.eventsByCorrelationId.set(event.correlationId, { ...event });\n        }\n    }\n    getQueueInfo(correlationId) {\n        const queueMeasurementForCorrelationId = this.queueMeasurements.get(correlationId);\n        if (!queueMeasurementForCorrelationId) {\n            this.logger.trace(`PerformanceClient: no queue measurements found for for correlationId: ${correlationId}`);\n        }\n        let totalQueueTime = 0;\n        let totalQueueCount = 0;\n        let manuallyCompletedCount = 0;\n        queueMeasurementForCorrelationId?.forEach((measurement) => {\n            totalQueueTime += measurement.queueTime;\n            totalQueueCount++;\n            manuallyCompletedCount += measurement.manuallyCompleted ? 1 : 0;\n        });\n        return {\n            totalQueueTime,\n            totalQueueCount,\n            manuallyCompletedCount,\n        };\n    }\n    /**\n     * Removes measurements for a given correlation id.\n     *\n     * @param {string} correlationId\n     */\n    discardMeasurements(correlationId) {\n        this.logger.trace(\"PerformanceClient: Performance measurements discarded\", correlationId);\n        this.eventsByCorrelationId.delete(correlationId);\n    }\n    /**\n     * Removes cache for a given correlation id.\n     *\n     * @param {string} correlationId correlation identifier\n     */\n    discardCache(correlationId) {\n        this.discardMeasurements(correlationId);\n        this.logger.trace(\"PerformanceClient: QueueMeasurements discarded\", correlationId);\n        this.queueMeasurements.delete(correlationId);\n        this.logger.trace(\"PerformanceClient: Pre-queue times discarded\", correlationId);\n        this.preQueueTimeByCorrelationId.delete(correlationId);\n    }\n    /**\n     * Registers a callback function to receive performance events.\n     *\n     * @param {PerformanceCallbackFunction} callback\n     * @returns {string}\n     */\n    addPerformanceCallback(callback) {\n        const callbackId = this.generateId();\n        this.callbacks.set(callbackId, callback);\n        this.logger.verbose(`PerformanceClient: Performance callback registered with id: ${callbackId}`);\n        return callbackId;\n    }\n    /**\n     * Removes a callback registered with addPerformanceCallback.\n     *\n     * @param {string} callbackId\n     * @returns {boolean}\n     */\n    removePerformanceCallback(callbackId) {\n        const result = this.callbacks.delete(callbackId);\n        if (result) {\n            this.logger.verbose(`PerformanceClient: Performance callback ${callbackId} removed.`);\n        }\n        else {\n            this.logger.verbose(`PerformanceClient: Performance callback ${callbackId} not removed.`);\n        }\n        return result;\n    }\n    /**\n     * Emits events to all registered callbacks.\n     *\n     * @param {PerformanceEvent[]} events\n     * @param {?string} [correlationId]\n     */\n    emitEvents(events, correlationId) {\n        this.logger.verbose(\"PerformanceClient: Emitting performance events\", correlationId);\n        this.callbacks.forEach((callback, callbackId) => {\n            this.logger.trace(`PerformanceClient: Emitting event to callback ${callbackId}`, correlationId);\n            callback.apply(null, [events]);\n        });\n    }\n    /**\n     * Enforce truncation of integral fields in performance event.\n     * @param {PerformanceEvent} event performance event to update.\n     * @param {Set<string>} intFields integral fields.\n     */\n    truncateIntegralFields(event) {\n        this.intFields.forEach((key) => {\n            if (key in event && typeof event[key] === \"number\") {\n                event[key] = Math.floor(event[key]);\n            }\n        });\n    }\n}\n\nexport { PerformanceClient };\n//# sourceMappingURL=PerformanceClient.mjs.map\n","/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\nimport { PerformanceEventStatus } from './PerformanceEvent.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nclass StubPerformanceMeasurement {\n    startMeasurement() {\n        return;\n    }\n    endMeasurement() {\n        return;\n    }\n    flushMeasurement() {\n        return null;\n    }\n}\nclass StubPerformanceClient {\n    generateId() {\n        return \"callback-id\";\n    }\n    startMeasurement(measureName, correlationId) {\n        return {\n            end: () => null,\n            discard: () => { },\n            add: () => { },\n            increment: () => { },\n            event: {\n                eventId: this.generateId(),\n                status: PerformanceEventStatus.InProgress,\n                authority: \"\",\n                libraryName: \"\",\n                libraryVersion: \"\",\n                clientId: \"\",\n                name: measureName,\n                startTimeMs: Date.now(),\n                correlationId: correlationId || \"\",\n            },\n            measurement: new StubPerformanceMeasurement(),\n        };\n    }\n    startPerformanceMeasurement() {\n        return new StubPerformanceMeasurement();\n    }\n    calculateQueuedTime() {\n        return 0;\n    }\n    addQueueMeasurement() {\n        return;\n    }\n    setPreQueueTime() {\n        return;\n    }\n    endMeasurement() {\n        return null;\n    }\n    discardMeasurements() {\n        return;\n    }\n    removePerformanceCallback() {\n        return true;\n    }\n    addPerformanceCallback() {\n        return \"\";\n    }\n    emitEvents() {\n        return;\n    }\n    addFields() {\n        return;\n    }\n    incrementFields() {\n        return;\n    }\n    cacheEventByCorrelationId() {\n        return;\n    }\n}\n\nexport { StubPerformanceClient, StubPerformanceMeasurement };\n//# sourceMappingURL=StubPerformanceClient.mjs.map\n",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"names":["postRequestFailed","noNetworkConnectivity","LogLevel","name","version","BrowserAuthErrorCodes.nativeExtensionNotInstalled","BrowserAuthErrorCodes.nativeConnectionNotEstablished","BrowserAuthErrorCodes.invalidBase64String","InteractionType","ClientConfigurationErrorCodes.cannotSetOIDCOptions","BrowserAuthErrorCodes.cryptoNonExistent","BrowserCrypto.validateCryptoAvailable","BrowserCrypto.createNewGuid","BrowserCrypto.generateKeyPair","BrowserCrypto.exportJwk","BrowserConfigurationAuthErrorCodes.storageNotSupported","BrowserConfigurationAuthErrorCodes.inMemRedirectUnavailable","CacheHelpers.isIdTokenEntity","CacheHelpers.isAccessTokenEntity","CacheHelpers.isRefreshTokenEntity","NativeStatusCodes.PERSISTENT_ERROR","BrowserAuthErrorCodes.userCancelled","BrowserAuthErrorCodes.unableToLoadToken","BrowserAuthErrorCodes.authCodeRequired","ControllerFactory.createV3Controller","BrowserConfigurationAuthErrorCodes.stubbedPublicClientApplicationCalled"],"mappings":"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"}