import { HttpService } from '@nestjs/axios';
import { Repository } from 'typeorm';
import { CampaignService } from '../campaign/campaign.service';
import { CharacterBioDto, Planet, Species, Starship, Vehicle } from './dto/character-bio.dto';
import { CharacterCreationDto } from './dto/character-creation.dto';
import { CharacterFullDto } from './dto/character-full.dto';
import { CharacterDto, ClassName } from './dto/character.dto';
import { SaveSnapshotDto } from './dto/save-snapshot.dto';
import { SaveDto } from './dto/save.dto';
import { LoginUserDto } from './dto/user-login.dto';
import { CreateUserDto } from './dto/user.create.dto';
import { UserDto } from './dto/user.dto';
import { CharacterEntity } from './entity/character.entity';
import { UserSaveEntity } from './entity/save.entity';
import { RefreshToken } from './entity/token.entity';
import { UserEntity } from './entity/user.entity';
import { ClassStats } from './interfaces/class.interface';
export declare class UsersService {
    private readonly userRepo;
    private readonly userSaveRepo;
    private readonly characterRepo;
    private readonly tokenRepo;
    private readonly httpService;
    private readonly campaignService;
    constructor(userRepo: Repository<UserEntity>, userSaveRepo: Repository<UserSaveEntity>, characterRepo: Repository<CharacterEntity>, tokenRepo: Repository<RefreshToken>, httpService: HttpService, campaignService: CampaignService);
    toUserDto(data: UserEntity): UserDto;
    toSaveDto(data: UserSaveEntity): SaveDto;
    toCharacterDto(data: CharacterEntity): CharacterDto;
    toPlanetDto(planetData: any): Planet;
    toSpeciesDto(speciesData: any[]): Species[];
    toVehiclesDto(vehicleData: any[]): Vehicle[];
    toStarshipsDto(starshipData: any[]): Starship[];
    toCharacterBioDto(data: any): CharacterBioDto;
    getAClass(): ClassName;
    getRandomUniqueCharacterIds(): number[];
    getStatsByClass(characterClass: ClassName): ClassStats;
    comparePasswords(password: string, hash: string): Promise<any>;
    createRefreshToken(user: string, token: string): Promise<RefreshToken>;
    getRefreshToken(token: string): Promise<RefreshToken>;
    getUserId(username: string): Promise<UserEntity>;
    findByLogin({ username, password }: LoginUserDto): Promise<UserDto>;
    create(userDto: CreateUserDto): Promise<UserDto>;
    getSaveFile(user: string, saveId: number): Promise<SaveDto>;
    getSaveFiles(user: string): Promise<SaveSnapshotDto[]>;
    createSaveFile(username: string, saveDto: SaveDto): Promise<void>;
    updateSaveFile(user: string, saveId: number, last_sequence_id: number): Promise<void>;
    getCharacter(id: number): Promise<CharacterDto>;
    getSwapiData(url: string): Promise<any>;
    normalizeToCharacterBioDto(characters: any[]): Promise<CharacterBioDto[]>;
    getCharacterSet(): Promise<CharacterBioDto[]>;
    toCharacterFullDto(data: CharacterEntity): Promise<CharacterFullDto>;
    getCharacterFull(characterId: number): Promise<CharacterFullDto>;
    createCharacter(characterCreation: CharacterCreationDto): Promise<void>;
}
