import { Repository } from 'typeorm';
import { GameStateDto } from '../users/dto/gamestate.dto';
import { CampaignDto } from './dto/campaign.dto';
import { ChoiceMadeDto } from './dto/choice-made.dto';
import { ChoiceDto } from './dto/choice.dto';
import { EpilogueDto, MajorChoiceDto, MetaAlignment } from './dto/epilogue.dto';
import { CampaignEntity } from './entity/campaign.entity';
import { ChoiceEntity } from './entity/choice.entity';
import { DungeonsDragonsAlignment } from './enum/alignment.enum';
import { CampaignChoice, CampaignEndings, ChoiceOption, MajorChoice, PublicChoice, PublicChoiceSelection } from './interfaces/epilogue.interface';
export declare class CampaignService {
    private readonly campaignRepo;
    private readonly choiceRepo;
    constructor(campaignRepo: Repository<CampaignEntity>, choiceRepo: Repository<ChoiceEntity>);
    normalizeToCampaignDto(data: CampaignEntity[]): CampaignDto[];
    toCampaignDto(data: CampaignEntity): CampaignDto;
    getAllCampaigns(): Promise<CampaignDto[]>;
    getCampaignById(id: number): Promise<CampaignDto>;
    toAlignmentText(good: number, neutral: number, evil: number): MetaAlignment;
    toAlignment(alignments: DungeonsDragonsAlignment[]): MetaAlignment;
    calculateAlignment(choices: ChoiceEntity[], campaignChoices: CampaignChoice[]): MetaAlignment;
    calculateEpilogue(alignment: MetaAlignment, endings: CampaignEndings[]): string;
    generatePlayerChoiceLabel(choice: ChoiceEntity, option: ChoiceOption): string;
    generatePublicChoiceLabel(total_population: number, public_choices: PublicChoiceSelection[], choice_options: ChoiceOption[]): string;
    caclulateContent(majorChoices: MajorChoice[], choices: ChoiceEntity[], publicChoices: PublicChoice[], campaignChoices: CampaignChoice[]): MajorChoiceDto[];
    toEpilogueDto(data: CampaignEntity, campaignChoices: CampaignChoice[], choices: ChoiceEntity[], publicChoices: PublicChoice[]): EpilogueDto;
    getPublicChoices(campaign_id: number, playerChoices: ChoiceEntity[], campaignChoices: CampaignChoice[]): Promise<PublicChoice[]>;
    getCampaignEnding({ campaign_id, character_id, }: GameStateDto): Promise<EpilogueDto>;
    createChoiceRecord(playerChoice: ChoiceMadeDto): Promise<void>;
    getChoiceById(campaign: number, sequence: number, character: number): Promise<ChoiceDto>;
    toChoicesDto(choices: ChoiceEntity[]): ChoiceDto[];
    getChoicesByCampaign(campaign: number, character: number): Promise<ChoiceDto[]>;
}
